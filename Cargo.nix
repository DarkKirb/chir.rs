# This file was @generated by cargo2nix 0.11.0.
# It is not intended to be manually edited.

args@{
  release ? true,
  rootFeatures ? [
    "chir-rs/default"
    "chir-rs-common/default"
    "chir-rs-client/default"
    "chir-rs-fe/default"
  ],
  rustPackages,
  buildRustPackages,
  hostPlatform,
  hostPlatformCpu ? null,
  hostPlatformFeatures ? [ ],
  target ? null,
  codegenOpts ? null,
  profileOpts ? null,
  cargoUnstableFlags ? null,
  rustcLinkFlags ? null,
  rustcBuildFlags ? null,
  mkRustCrate,
  rustLib,
  lib,
  workspaceSrc,
  ignoreLockHash,
  cargoConfig ? { },
}:
let
  nixifiedLockHash = "fdf6eb0101ee62344716e2e7a415d3c3234655b421c07a3ce0ecf598190c1e6d";
  workspaceSrc = if args.workspaceSrc == null then ./. else args.workspaceSrc;
  currentLockHash = builtins.hashFile "sha256" (workspaceSrc + /Cargo.lock);
  lockHashIgnored =
    if ignoreLockHash then builtins.trace "Ignoring lock hash" ignoreLockHash else ignoreLockHash;
in
if !lockHashIgnored && (nixifiedLockHash != currentLockHash) then
  throw ("Cargo.nix ${nixifiedLockHash} is out of sync with Cargo.lock ${currentLockHash}")
else
  let
    inherit (rustLib)
      fetchCratesIo
      fetchCrateLocal
      fetchCrateGit
      fetchCrateAlternativeRegistry
      expandFeatures
      decideProfile
      genDrvsByProfile
      ;
    cargoConfig' =
      if cargoConfig != { } then
        cargoConfig
      else if builtins.pathExists ./.cargo/config then
        lib.importTOML ./.cargo/config
      else if builtins.pathExists ./.cargo/config.toml then
        lib.importTOML ./.cargo/config.toml
      else
        { };
    profilesByName = {
    };
    rootFeatures' = expandFeatures rootFeatures;
    overridableMkRustCrate =
      f:
      let
        drvs = genDrvsByProfile profilesByName (
          { profile, profileName }:
          mkRustCrate (
            {
              inherit
                release
                profile
                hostPlatformCpu
                hostPlatformFeatures
                target
                profileOpts
                codegenOpts
                cargoUnstableFlags
                rustcLinkFlags
                rustcBuildFlags
                ;
              cargoConfig = cargoConfig';
            }
            // (f profileName)
          )
        );
      in
      {
        compileMode ? null,
        profileName ? decideProfile compileMode release,
      }:
      let
        drv = drvs.${profileName};
      in
      if compileMode == null then drv else drv.override { inherit compileMode; };
  in
  {
    cargo2nixVersion = "0.11.0";
    workspace = {
      chir-rs = rustPackages.unknown.chir-rs."0.1.0";
      chir-rs-common = rustPackages.unknown.chir-rs-common."0.1.0";
      chir-rs-client = rustPackages.unknown.chir-rs-client."0.1.0";
      chir-rs-fe = rustPackages.unknown.chir-rs-fe."0.1.0";
    };
    "registry+https://github.com/rust-lang/crates.io-index".addr2line."0.21.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "addr2line";
          version = "0.21.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "8a30b2e23b9e17a9f90641c7ab1549cd9b44f296d3ccbf309d2863cfe398a0cb";
          };
          dependencies = {
            gimli =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gimli."0.28.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".adler."1.0.2" =
      overridableMkRustCrate
        (profileName: rec {
          name = "adler";
          version = "1.0.2";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".adler2."2.0.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "adler2";
          version = "2.0.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "512761e0bb2578dd7380c6baaa0f4ce03e84f95e960231d1dec8bf4d7d6e2627";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".ahash."0.8.11" =
      overridableMkRustCrate
        (profileName: rec {
          name = "ahash";
          version = "0.8.11";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "e89da841a80418a9b391ebaea17f5c112ffaaa96f621d2c285b5174da76b9011";
          };
          dependencies = {
            cfg_if =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {
                inherit profileName;
              }).out;
            ${
              if
                !(
                  (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l")
                  && hostPlatform.parsed.kernel.name == "none"
                )
              then
                "once_cell"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.21.3" {
                inherit profileName;
              }).out;
            zerocopy =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zerocopy."0.7.35" {
                inherit profileName;
              }).out;
          };
          buildDependencies = {
            version_check =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.5" {
                profileName = "__noProfile";
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".aho-corasick."1.1.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "aho-corasick";
          version = "1.1.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916";
          };
          features = builtins.concatLists [
            [ "perf-literal" ]
            [ "std" ]
          ];
          dependencies = {
            memchr =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.4" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".alloc-no-stdlib."2.0.4" =
      overridableMkRustCrate
        (profileName: rec {
          name = "alloc-no-stdlib";
          version = "2.0.4";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "cc7bb162ec39d46ab1ca8c77bf72e890535becd1751bb45f64c597edb4c8c6b3";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".alloc-stdlib."0.2.2" =
      overridableMkRustCrate
        (profileName: rec {
          name = "alloc-stdlib";
          version = "0.2.2";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "94fb8275041c72129eb51b7d0322c29b8387a0386127718b096429201a5d6ece";
          };
          dependencies = {
            alloc_no_stdlib =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".alloc-no-stdlib."2.0.4" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".allocator-api2."0.2.21" =
      overridableMkRustCrate
        (profileName: rec {
          name = "allocator-api2";
          version = "0.2.21";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "683d7910e743518b0e34f1186f92494becacb047c7b6bf616c96772180fef923";
          };
          features = builtins.concatLists [
            [ "alloc" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".android-tzdata."0.1.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "android-tzdata";
          version = "0.1.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".android_system_properties."0.1.5" =
      overridableMkRustCrate
        (profileName: rec {
          name = "android_system_properties";
          version = "0.1.5";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311";
          };
          dependencies = {
            libc =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.171" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".anstream."0.6.18" =
      overridableMkRustCrate
        (profileName: rec {
          name = "anstream";
          version = "0.6.18";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "8acc5369981196006228e28809f761875c0327210a891e941f4c683b3a99529b";
          };
          features = builtins.concatLists [
            [ "auto" ]
            [ "default" ]
            [ "wincon" ]
          ];
          dependencies = {
            anstyle =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstyle."1.0.10" {
                inherit profileName;
              }).out;
            anstyle_parse =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstyle-parse."0.2.6" {
                inherit profileName;
              }).out;
            anstyle_query =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstyle-query."1.1.2" {
                inherit profileName;
              }).out;
            ${if hostPlatform.isWindows then "anstyle_wincon" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstyle-wincon."3.0.7" {
                inherit profileName;
              }).out;
            colorchoice =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".colorchoice."1.0.3" {
                inherit profileName;
              }).out;
            is_terminal_polyfill =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".is_terminal_polyfill."1.70.1"
                { inherit profileName; }
              ).out;
            utf8parse =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".utf8parse."0.2.2" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".anstyle."1.0.10" =
      overridableMkRustCrate
        (profileName: rec {
          name = "anstyle";
          version = "1.0.10";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "55cc3b69f167a1ef2e161439aa98aed94e6028e5f9a59be9a6ffb47aef1651f9";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "std" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".anstyle-parse."0.2.6" =
      overridableMkRustCrate
        (profileName: rec {
          name = "anstyle-parse";
          version = "0.2.6";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "3b2d16507662817a6a20a9ea92df6652ee4f94f914589377d69f3b21bc5798a9";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "utf8" ]
          ];
          dependencies = {
            utf8parse =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".utf8parse."0.2.2" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".anstyle-query."1.1.2" =
      overridableMkRustCrate
        (profileName: rec {
          name = "anstyle-query";
          version = "1.1.2";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "79947af37f4177cfead1110013d678905c37501914fba0efea834c3fe9a8d60c";
          };
          dependencies = {
            ${if hostPlatform.isWindows then "windows_sys" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.59.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".anstyle-wincon."3.0.7" =
      overridableMkRustCrate
        (profileName: rec {
          name = "anstyle-wincon";
          version = "3.0.7";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "ca3534e77181a9cc07539ad51f2141fe32f6c3ffd4df76db8ad92346b003ae4e";
          };
          dependencies = {
            anstyle =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstyle."1.0.10" {
                inherit profileName;
              }).out;
            ${if hostPlatform.isWindows then "once_cell" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.21.3" {
                inherit profileName;
              }).out;
            ${if hostPlatform.isWindows then "windows_sys" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.59.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.97" =
      overridableMkRustCrate
        (profileName: rec {
          name = "anyhow";
          version = "1.0.97";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "dcfed56ad506cb2c684a14971b8861fdc3baaaae314b9e5f9bb532cbe3ba7a4f";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "std" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".anymap2."0.13.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "anymap2";
          version = "0.13.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "d301b3b94cb4b2f23d7917810addbbaff90738e0ca2be692bd027e70d7e0330c";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".argon2."0.5.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "argon2";
          version = "0.5.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "3c3610892ee6e0cbce8ae2700349fcf8f98adb0dbfbee85aec3c9179d29cc072";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "default" ]
            [ "password-hash" ]
            [ "rand" ]
          ];
          dependencies = {
            base64ct =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64ct."1.7.3" {
                inherit profileName;
              }).out;
            blake2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".blake2."0.10.6" {
                inherit profileName;
              }).out;
            ${
              if hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" then
                "cpufeatures"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.17" {
                inherit profileName;
              }).out;
            password_hash =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".password-hash."0.5.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".arrayref."0.3.9" =
      overridableMkRustCrate
        (profileName: rec {
          name = "arrayref";
          version = "0.3.9";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "76a2e8124351fda1ef8aaaa3bbd7ebbcb486bbcd4225aca0aa0d84bb2db8fecb";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.6" =
      overridableMkRustCrate
        (profileName: rec {
          name = "arrayvec";
          version = "0.7.6";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "7c02d123df017efcdfbd739ef81735b36c5ba83ec3c59c80a9d7ecc718f92e50";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".ascii."1.1.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "ascii";
          version = "1.1.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "d92bec98840b8f03a5ff5413de5293bfcd8bf96467cf5452609f939ec6f5de16";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "default" ]
            [ "std" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".async-channel."2.3.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "async-channel";
          version = "2.3.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "89b47800b0be77592da0afd425cc03468052844aff33b84e33cc696f64e77b6a";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "std" ]
          ];
          dependencies = {
            concurrent_queue =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".concurrent-queue."2.5.0" {
                inherit profileName;
              }).out;
            event_listener_strategy =
              (
                rustPackages."registry+https://github.com/rust-lang/crates.io-index".event-listener-strategy."0.5.4"
                { inherit profileName; }
              ).out;
            futures_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" {
                inherit profileName;
              }).out;
            pin_project_lite =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.16" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".async-io."2.4.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "async-io";
          version = "2.4.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "43a2b323ccce0a1d90b449fd71f2a06ca7faa7c54c2751f06c9bd851fc061059";
          };
          dependencies = {
            async_lock =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-lock."3.4.0" {
                inherit profileName;
              }).out;
            cfg_if =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {
                inherit profileName;
              }).out;
            concurrent_queue =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".concurrent-queue."2.5.0" {
                inherit profileName;
              }).out;
            futures_io =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.31" {
                inherit profileName;
              }).out;
            futures_lite =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-lite."2.6.0" {
                inherit profileName;
              }).out;
            parking =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking."2.2.1" {
                inherit profileName;
              }).out;
            polling =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".polling."3.7.4" {
                inherit profileName;
              }).out;
            rustix =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustix."0.38.44" {
                inherit profileName;
              }).out;
            slab =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.9" {
                inherit profileName;
              }).out;
            tracing =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" {
                inherit profileName;
              }).out;
            ${if hostPlatform.isWindows then "windows_sys" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.59.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".async-lock."3.4.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "async-lock";
          version = "3.4.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "ff6e472cdea888a4bd64f342f09b3f50e1886d32afe8df3d663c01140b811b18";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "std" ]
          ];
          dependencies = {
            event_listener =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".event-listener."5.4.0" {
                inherit profileName;
              }).out;
            event_listener_strategy =
              (
                rustPackages."registry+https://github.com/rust-lang/crates.io-index".event-listener-strategy."0.5.4"
                { inherit profileName; }
              ).out;
            pin_project_lite =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.16" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".atoi."2.0.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "atoi";
          version = "2.0.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "f28d99ec8bfea296261ca1af174f24225171fea9664ba9003cbebee704810528";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "std" ]
          ];
          dependencies = {
            num_traits =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.19" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".atomic."0.6.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "atomic";
          version = "0.6.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "8d818003e740b63afc82337e3160717f4f63078720a810b7b903e70a5d1d2994";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "fallback" ]
          ];
          dependencies = {
            bytemuck =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.22.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".atomic-waker."1.1.2" =
      overridableMkRustCrate
        (profileName: rec {
          name = "atomic-waker";
          version = "1.1.2";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "1505bd5d3d116872e7271a6d4e16d81d0c8570876c8de68093a09ac269d8aac0";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".autocfg."1.4.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "autocfg";
          version = "1.4.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "ace50bade8e6234aa140d9a2f552bbee1db4d353f69b8217bc503490fc1a9f26";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".aws-config."1.6.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "aws-config";
          version = "1.6.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "8c39646d1a6b51240a1a23bb57ea4eebede7e16fbc237fdc876980233dcecb4f";
          };
          features = builtins.concatLists [
            [ "behavior-version-latest" ]
            [ "credentials-process" ]
            [ "default" ]
            [ "default-https-client" ]
            [ "rt-tokio" ]
            [ "sso" ]
          ];
          dependencies = {
            aws_credential_types =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-credential-types."1.2.2" {
                inherit profileName;
              }).out;
            aws_runtime =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-runtime."1.5.6" {
                inherit profileName;
              }).out;
            aws_sdk_sso =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-sdk-sso."1.64.0" {
                inherit profileName;
              }).out;
            aws_sdk_ssooidc =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-sdk-ssooidc."1.65.0" {
                inherit profileName;
              }).out;
            aws_sdk_sts =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-sdk-sts."1.65.0" {
                inherit profileName;
              }).out;
            aws_smithy_async =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-async."1.2.5" {
                inherit profileName;
              }).out;
            aws_smithy_http =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-http."0.62.0" {
                inherit profileName;
              }).out;
            aws_smithy_json =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-json."0.61.3" {
                inherit profileName;
              }).out;
            aws_smithy_runtime =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-runtime."1.8.1" {
                inherit profileName;
              }).out;
            aws_smithy_runtime_api =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-runtime-api."1.7.4"
                { inherit profileName; }
              ).out;
            aws_smithy_types =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-types."1.3.0" {
                inherit profileName;
              }).out;
            aws_types =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-types."1.3.6" {
                inherit profileName;
              }).out;
            bytes =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.10.1" {
                inherit profileName;
              }).out;
            fastrand =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fastrand."2.3.0" {
                inherit profileName;
              }).out;
            hex =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" {
                inherit profileName;
              }).out;
            http =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.3.1" {
                inherit profileName;
              }).out;
            ring =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.17.14" {
                inherit profileName;
              }).out;
            time =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".time."0.3.41" {
                inherit profileName;
              }).out;
            tokio =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.44.1" {
                inherit profileName;
              }).out;
            tracing =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" {
                inherit profileName;
              }).out;
            url =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.5.4" {
                inherit profileName;
              }).out;
            zeroize =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.8.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".aws-credential-types."1.2.2" =
      overridableMkRustCrate
        (profileName: rec {
          name = "aws-credential-types";
          version = "1.2.2";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "4471bef4c22a06d2c7a1b6492493d3fdf24a805323109d6874f9c94d5906ac14";
          };
          features = builtins.concatLists [
            [ "test-util" ]
          ];
          dependencies = {
            aws_smithy_async =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-async."1.2.5" {
                inherit profileName;
              }).out;
            aws_smithy_runtime_api =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-runtime-api."1.7.4"
                { inherit profileName; }
              ).out;
            aws_smithy_types =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-types."1.3.0" {
                inherit profileName;
              }).out;
            zeroize =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.8.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".aws-lc-rs."1.13.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "aws-lc-rs";
          version = "1.13.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "19b756939cb2f8dc900aa6dcd505e6e2428e9cae7ff7b028c49e3946efa70878";
          };
          features = builtins.concatLists [
            [ "aws-lc-sys" ]
            [ "prebuilt-nasm" ]
          ];
          dependencies = {
            aws_lc_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-lc-sys."0.28.0" {
                inherit profileName;
              }).out;
            zeroize =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.8.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".aws-lc-sys."0.28.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "aws-lc-sys";
          version = "0.28.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "b9f7720b74ed28ca77f90769a71fd8c637a0137f6fae4ae947e1050229cff57f";
          };
          features = builtins.concatLists [
            [ "prebuilt-nasm" ]
          ];
          buildDependencies = {
            ${
              if
                !(
                  (hostPlatform.parsed.cpu.name == "x86_64" || hostPlatform.parsed.cpu.name == "aarch64")
                  && (
                    hostPlatform.parsed.kernel.name == "linux"
                    || hostPlatform.parsed.kernel.name == "darwin"
                    || hostPlatform.parsed.kernel.name == "windows"
                  )
                  && (
                    hostPlatform.parsed.abi.name == "gnu"
                    || hostPlatform.parsed.abi.name == "musl"
                    || hostPlatform.parsed.abi.name == "msvc"
                    || hostPlatform.parsed.abi.name == ""
                  )
                  ||
                    hostPlatform.parsed.cpu.name == "i686"
                    && hostPlatform.parsed.kernel.name == "windows"
                    && hostPlatform.parsed.abi.name == "msvc"
                  ||
                    hostPlatform.parsed.cpu.name == "i686"
                    && hostPlatform.parsed.kernel.name == "linux"
                    && hostPlatform.parsed.abi.name == "gnu"
                )
              then
                "bindgen"
              else
                null
            } =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bindgen."0.69.5" {
                profileName = "__noProfile";
              }).out;
            cc =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.2.17" {
                profileName = "__noProfile";
              }).out;
            cmake =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cmake."0.1.54" {
                profileName = "__noProfile";
              }).out;
            dunce =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".dunce."1.0.5" {
                profileName = "__noProfile";
              }).out;
            fs_extra =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".fs_extra."1.3.0" {
                profileName = "__noProfile";
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".aws-runtime."1.5.6" =
      overridableMkRustCrate
        (profileName: rec {
          name = "aws-runtime";
          version = "1.5.6";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "0aff45ffe35196e593ea3b9dd65b320e51e2dda95aff4390bc459e461d09c6ad";
          };
          features = builtins.concatLists [
            [ "event-stream" ]
            [ "http-02x" ]
            [ "sigv4a" ]
          ];
          dependencies = {
            aws_credential_types =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-credential-types."1.2.2" {
                inherit profileName;
              }).out;
            aws_sigv4 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-sigv4."1.3.0" {
                inherit profileName;
              }).out;
            aws_smithy_async =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-async."1.2.5" {
                inherit profileName;
              }).out;
            aws_smithy_eventstream =
              (
                rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-eventstream."0.60.8"
                { inherit profileName; }
              ).out;
            aws_smithy_http =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-http."0.62.0" {
                inherit profileName;
              }).out;
            aws_smithy_runtime =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-runtime."1.8.1" {
                inherit profileName;
              }).out;
            aws_smithy_runtime_api =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-runtime-api."1.7.4"
                { inherit profileName; }
              ).out;
            aws_smithy_types =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-types."1.3.0" {
                inherit profileName;
              }).out;
            aws_types =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-types."1.3.6" {
                inherit profileName;
              }).out;
            bytes =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.10.1" {
                inherit profileName;
              }).out;
            fastrand =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fastrand."2.3.0" {
                inherit profileName;
              }).out;
            http_02x =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.12" {
                inherit profileName;
              }).out;
            http_body_04x =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body."0.4.6" {
                inherit profileName;
              }).out;
            once_cell =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.21.3" {
                inherit profileName;
              }).out;
            percent_encoding =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.1" {
                inherit profileName;
              }).out;
            pin_project_lite =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.16" {
                inherit profileName;
              }).out;
            tracing =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" {
                inherit profileName;
              }).out;
            uuid =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".uuid."1.16.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".aws-sdk-s3."1.82.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "aws-sdk-s3";
          version = "1.82.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "e6eab2900764411ab01c8e91a76fd11a63b4e12bc3da97d9e14a0ce1343d86d3";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "default-https-client" ]
            [ "rt-tokio" ]
            [ "rustls" ]
            [ "sigv4a" ]
          ];
          dependencies = {
            aws_credential_types =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-credential-types."1.2.2" {
                inherit profileName;
              }).out;
            aws_runtime =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-runtime."1.5.6" {
                inherit profileName;
              }).out;
            aws_sigv4 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-sigv4."1.3.0" {
                inherit profileName;
              }).out;
            aws_smithy_async =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-async."1.2.5" {
                inherit profileName;
              }).out;
            aws_smithy_checksums =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-checksums."0.63.1"
                { inherit profileName; }
              ).out;
            aws_smithy_eventstream =
              (
                rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-eventstream."0.60.8"
                { inherit profileName; }
              ).out;
            aws_smithy_http =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-http."0.62.0" {
                inherit profileName;
              }).out;
            aws_smithy_json =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-json."0.61.3" {
                inherit profileName;
              }).out;
            aws_smithy_runtime =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-runtime."1.8.1" {
                inherit profileName;
              }).out;
            aws_smithy_runtime_api =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-runtime-api."1.7.4"
                { inherit profileName; }
              ).out;
            aws_smithy_types =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-types."1.3.0" {
                inherit profileName;
              }).out;
            aws_smithy_xml =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-xml."0.60.9" {
                inherit profileName;
              }).out;
            aws_types =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-types."1.3.6" {
                inherit profileName;
              }).out;
            bytes =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.10.1" {
                inherit profileName;
              }).out;
            fastrand =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fastrand."2.3.0" {
                inherit profileName;
              }).out;
            hex =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" {
                inherit profileName;
              }).out;
            hmac =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hmac."0.12.1" {
                inherit profileName;
              }).out;
            http =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.12" {
                inherit profileName;
              }).out;
            http_1x =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.3.1" {
                inherit profileName;
              }).out;
            http_body =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body."0.4.6" {
                inherit profileName;
              }).out;
            lru =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lru."0.12.5" {
                inherit profileName;
              }).out;
            once_cell =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.21.3" {
                inherit profileName;
              }).out;
            percent_encoding =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.1" {
                inherit profileName;
              }).out;
            regex_lite =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-lite."0.1.6" {
                inherit profileName;
              }).out;
            sha2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" {
                inherit profileName;
              }).out;
            tracing =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" {
                inherit profileName;
              }).out;
            url =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.5.4" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".aws-sdk-sso."1.64.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "aws-sdk-sso";
          version = "1.64.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "02d4bdb0e5f80f0689e61c77ab678b2b9304af329616af38aef5b6b967b8e736";
          };
          dependencies = {
            aws_credential_types =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-credential-types."1.2.2" {
                inherit profileName;
              }).out;
            aws_runtime =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-runtime."1.5.6" {
                inherit profileName;
              }).out;
            aws_smithy_async =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-async."1.2.5" {
                inherit profileName;
              }).out;
            aws_smithy_http =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-http."0.62.0" {
                inherit profileName;
              }).out;
            aws_smithy_json =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-json."0.61.3" {
                inherit profileName;
              }).out;
            aws_smithy_runtime =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-runtime."1.8.1" {
                inherit profileName;
              }).out;
            aws_smithy_runtime_api =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-runtime-api."1.7.4"
                { inherit profileName; }
              ).out;
            aws_smithy_types =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-types."1.3.0" {
                inherit profileName;
              }).out;
            aws_types =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-types."1.3.6" {
                inherit profileName;
              }).out;
            bytes =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.10.1" {
                inherit profileName;
              }).out;
            fastrand =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fastrand."2.3.0" {
                inherit profileName;
              }).out;
            http =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.12" {
                inherit profileName;
              }).out;
            once_cell =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.21.3" {
                inherit profileName;
              }).out;
            regex_lite =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-lite."0.1.6" {
                inherit profileName;
              }).out;
            tracing =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".aws-sdk-ssooidc."1.65.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "aws-sdk-ssooidc";
          version = "1.65.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "acbbb3ce8da257aedbccdcb1aadafbbb6a5fe9adf445db0e1ea897bdc7e22d08";
          };
          dependencies = {
            aws_credential_types =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-credential-types."1.2.2" {
                inherit profileName;
              }).out;
            aws_runtime =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-runtime."1.5.6" {
                inherit profileName;
              }).out;
            aws_smithy_async =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-async."1.2.5" {
                inherit profileName;
              }).out;
            aws_smithy_http =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-http."0.62.0" {
                inherit profileName;
              }).out;
            aws_smithy_json =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-json."0.61.3" {
                inherit profileName;
              }).out;
            aws_smithy_runtime =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-runtime."1.8.1" {
                inherit profileName;
              }).out;
            aws_smithy_runtime_api =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-runtime-api."1.7.4"
                { inherit profileName; }
              ).out;
            aws_smithy_types =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-types."1.3.0" {
                inherit profileName;
              }).out;
            aws_types =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-types."1.3.6" {
                inherit profileName;
              }).out;
            bytes =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.10.1" {
                inherit profileName;
              }).out;
            fastrand =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fastrand."2.3.0" {
                inherit profileName;
              }).out;
            http =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.12" {
                inherit profileName;
              }).out;
            once_cell =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.21.3" {
                inherit profileName;
              }).out;
            regex_lite =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-lite."0.1.6" {
                inherit profileName;
              }).out;
            tracing =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".aws-sdk-sts."1.65.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "aws-sdk-sts";
          version = "1.65.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "96a78a8f50a1630db757b60f679c8226a8a70ee2ab5f5e6e51dc67f6c61c7cfd";
          };
          dependencies = {
            aws_credential_types =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-credential-types."1.2.2" {
                inherit profileName;
              }).out;
            aws_runtime =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-runtime."1.5.6" {
                inherit profileName;
              }).out;
            aws_smithy_async =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-async."1.2.5" {
                inherit profileName;
              }).out;
            aws_smithy_http =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-http."0.62.0" {
                inherit profileName;
              }).out;
            aws_smithy_json =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-json."0.61.3" {
                inherit profileName;
              }).out;
            aws_smithy_query =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-query."0.60.7" {
                inherit profileName;
              }).out;
            aws_smithy_runtime =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-runtime."1.8.1" {
                inherit profileName;
              }).out;
            aws_smithy_runtime_api =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-runtime-api."1.7.4"
                { inherit profileName; }
              ).out;
            aws_smithy_types =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-types."1.3.0" {
                inherit profileName;
              }).out;
            aws_smithy_xml =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-xml."0.60.9" {
                inherit profileName;
              }).out;
            aws_types =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-types."1.3.6" {
                inherit profileName;
              }).out;
            fastrand =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fastrand."2.3.0" {
                inherit profileName;
              }).out;
            http =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.12" {
                inherit profileName;
              }).out;
            once_cell =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.21.3" {
                inherit profileName;
              }).out;
            regex_lite =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-lite."0.1.6" {
                inherit profileName;
              }).out;
            tracing =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".aws-sigv4."1.3.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "aws-sigv4";
          version = "1.3.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "69d03c3c05ff80d54ff860fe38c726f6f494c639ae975203a101335f223386db";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "http0-compat" ]
            [ "http1" ]
            [ "sign-eventstream" ]
            [ "sign-http" ]
            [ "sigv4a" ]
          ];
          dependencies = {
            aws_credential_types =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-credential-types."1.2.2" {
                inherit profileName;
              }).out;
            aws_smithy_eventstream =
              (
                rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-eventstream."0.60.8"
                { inherit profileName; }
              ).out;
            aws_smithy_http =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-http."0.62.0" {
                inherit profileName;
              }).out;
            aws_smithy_runtime_api =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-runtime-api."1.7.4"
                { inherit profileName; }
              ).out;
            aws_smithy_types =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-types."1.3.0" {
                inherit profileName;
              }).out;
            bytes =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.10.1" {
                inherit profileName;
              }).out;
            crypto_bigint =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crypto-bigint."0.5.5" {
                inherit profileName;
              }).out;
            form_urlencoded =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".form_urlencoded."1.2.1" {
                inherit profileName;
              }).out;
            hex =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" {
                inherit profileName;
              }).out;
            hmac =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hmac."0.12.1" {
                inherit profileName;
              }).out;
            http0 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.12" {
                inherit profileName;
              }).out;
            http =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.3.1" {
                inherit profileName;
              }).out;
            once_cell =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.21.3" {
                inherit profileName;
              }).out;
            p256 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".p256."0.11.1" {
                inherit profileName;
              }).out;
            percent_encoding =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.1" {
                inherit profileName;
              }).out;
            ring =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.17.14" {
                inherit profileName;
              }).out;
            sha2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" {
                inherit profileName;
              }).out;
            subtle =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.6.1" {
                inherit profileName;
              }).out;
            time =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".time."0.3.41" {
                inherit profileName;
              }).out;
            tracing =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" {
                inherit profileName;
              }).out;
            zeroize =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.8.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".aws-smithy-async."1.2.5" =
      overridableMkRustCrate
        (profileName: rec {
          name = "aws-smithy-async";
          version = "1.2.5";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "1e190749ea56f8c42bf15dd76c65e14f8f765233e6df9b0506d9d934ebef867c";
          };
          features = builtins.concatLists [
            [ "rt-tokio" ]
          ];
          dependencies = {
            futures_util =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" {
                inherit profileName;
              }).out;
            pin_project_lite =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.16" {
                inherit profileName;
              }).out;
            tokio =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.44.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".aws-smithy-checksums."0.63.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "aws-smithy-checksums";
          version = "0.63.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "b65d21e1ba6f2cdec92044f904356a19f5ad86961acf015741106cdfafd747c0";
          };
          dependencies = {
            aws_smithy_http =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-http."0.62.0" {
                inherit profileName;
              }).out;
            aws_smithy_types =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-types."1.3.0" {
                inherit profileName;
              }).out;
            bytes =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.10.1" {
                inherit profileName;
              }).out;
            crc32c =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc32c."0.6.8" {
                inherit profileName;
              }).out;
            crc32fast =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.4.2" {
                inherit profileName;
              }).out;
            crc64fast_nvme =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc64fast-nvme."1.2.0" {
                inherit profileName;
              }).out;
            hex =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" {
                inherit profileName;
              }).out;
            http =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.12" {
                inherit profileName;
              }).out;
            http_body =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body."0.4.6" {
                inherit profileName;
              }).out;
            md5 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".md-5."0.10.6" {
                inherit profileName;
              }).out;
            pin_project_lite =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.16" {
                inherit profileName;
              }).out;
            sha1 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha1."0.10.6" {
                inherit profileName;
              }).out;
            sha2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" {
                inherit profileName;
              }).out;
            tracing =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".aws-smithy-eventstream."0.60.8" =
      overridableMkRustCrate
        (profileName: rec {
          name = "aws-smithy-eventstream";
          version = "0.60.8";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "7c45d3dddac16c5c59d553ece225a88870cf81b7b813c9cc17b78cf4685eac7a";
          };
          dependencies = {
            aws_smithy_types =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-types."1.3.0" {
                inherit profileName;
              }).out;
            bytes =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.10.1" {
                inherit profileName;
              }).out;
            crc32fast =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.4.2" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".aws-smithy-http."0.62.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "aws-smithy-http";
          version = "0.62.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "c5949124d11e538ca21142d1fba61ab0a2a2c1bc3ed323cdb3e4b878bfb83166";
          };
          features = builtins.concatLists [
            [ "aws-smithy-eventstream" ]
            [ "event-stream" ]
          ];
          dependencies = {
            aws_smithy_eventstream =
              (
                rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-eventstream."0.60.8"
                { inherit profileName; }
              ).out;
            aws_smithy_runtime_api =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-runtime-api."1.7.4"
                { inherit profileName; }
              ).out;
            aws_smithy_types =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-types."1.3.0" {
                inherit profileName;
              }).out;
            bytes =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.10.1" {
                inherit profileName;
              }).out;
            bytes_utils =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes-utils."0.1.4" {
                inherit profileName;
              }).out;
            futures_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" {
                inherit profileName;
              }).out;
            http_02x =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.12" {
                inherit profileName;
              }).out;
            http_1x =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.3.1" {
                inherit profileName;
              }).out;
            http_body_04x =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body."0.4.6" {
                inherit profileName;
              }).out;
            once_cell =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.21.3" {
                inherit profileName;
              }).out;
            percent_encoding =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.1" {
                inherit profileName;
              }).out;
            pin_project_lite =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.16" {
                inherit profileName;
              }).out;
            pin_utils =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-utils."0.1.0" {
                inherit profileName;
              }).out;
            tracing =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".aws-smithy-http-client."1.0.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "aws-smithy-http-client";
          version = "1.0.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "8aff1159006441d02e57204bf57a1b890ba68bedb6904ffd2873c1c4c11c546b";
          };
          features = builtins.concatLists [
            [ "default-client" ]
            [ "hyper-014" ]
            [ "legacy-rustls-ring" ]
            [ "rustls-aws-lc" ]
          ];
          dependencies = {
            aws_smithy_async =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-async."1.2.5" {
                inherit profileName;
              }).out;
            aws_smithy_runtime_api =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-runtime-api."1.7.4"
                { inherit profileName; }
              ).out;
            aws_smithy_types =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-types."1.3.0" {
                inherit profileName;
              }).out;
            h2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".h2."0.4.8" {
                inherit profileName;
              }).out;
            http_02x =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.12" {
                inherit profileName;
              }).out;
            http_1x =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.3.1" {
                inherit profileName;
              }).out;
            http_body_04x =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body."0.4.6" {
                inherit profileName;
              }).out;
            hyper_0_14 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper."0.14.32" {
                inherit profileName;
              }).out;
            hyper =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper."1.6.0" {
                inherit profileName;
              }).out;
            legacy_hyper_rustls =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper-rustls."0.24.2" {
                inherit profileName;
              }).out;
            hyper_rustls =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper-rustls."0.27.5" {
                inherit profileName;
              }).out;
            hyper_util =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper-util."0.1.11" {
                inherit profileName;
              }).out;
            pin_project_lite =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.16" {
                inherit profileName;
              }).out;
            legacy_rustls =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.21.12" {
                inherit profileName;
              }).out;
            rustls =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.23.25" {
                inherit profileName;
              }).out;
            rustls_native_certs =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-native-certs."0.8.1" {
                inherit profileName;
              }).out;
            rustls_pki_types =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pki-types."1.11.0" {
                inherit profileName;
              }).out;
            tokio =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.44.1" {
                inherit profileName;
              }).out;
            tower =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower."0.5.2" {
                inherit profileName;
              }).out;
            tracing =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".aws-smithy-json."0.61.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "aws-smithy-json";
          version = "0.61.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "92144e45819cae7dc62af23eac5a038a58aa544432d2102609654376a900bd07";
          };
          dependencies = {
            aws_smithy_types =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-types."1.3.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".aws-smithy-observability."0.1.2" =
      overridableMkRustCrate
        (profileName: rec {
          name = "aws-smithy-observability";
          version = "0.1.2";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "445d065e76bc1ef54963db400319f1dd3ebb3e0a74af20f7f7630625b0cc7cc0";
          };
          dependencies = {
            aws_smithy_runtime_api =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-runtime-api."1.7.4"
                { inherit profileName; }
              ).out;
            once_cell =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.21.3" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".aws-smithy-query."0.60.7" =
      overridableMkRustCrate
        (profileName: rec {
          name = "aws-smithy-query";
          version = "0.60.7";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "f2fbd61ceb3fe8a1cb7352e42689cec5335833cd9f94103a61e98f9bb61c64bb";
          };
          dependencies = {
            aws_smithy_types =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-types."1.3.0" {
                inherit profileName;
              }).out;
            urlencoding =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".urlencoding."2.1.3" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".aws-smithy-runtime."1.8.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "aws-smithy-runtime";
          version = "1.8.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "0152749e17ce4d1b47c7747bdfec09dac1ccafdcbc741ebf9daa2a373356730f";
          };
          features = builtins.concatLists [
            [ "client" ]
            [ "connector-hyper-0-14-x" ]
            [ "default-https-client" ]
            [ "rt-tokio" ]
            [ "tls-rustls" ]
          ];
          dependencies = {
            aws_smithy_async =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-async."1.2.5" {
                inherit profileName;
              }).out;
            aws_smithy_http =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-http."0.62.0" {
                inherit profileName;
              }).out;
            aws_smithy_http_client =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-http-client."1.0.1"
                { inherit profileName; }
              ).out;
            aws_smithy_observability =
              (
                rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-observability."0.1.2"
                { inherit profileName; }
              ).out;
            aws_smithy_runtime_api =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-runtime-api."1.7.4"
                { inherit profileName; }
              ).out;
            aws_smithy_types =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-types."1.3.0" {
                inherit profileName;
              }).out;
            bytes =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.10.1" {
                inherit profileName;
              }).out;
            fastrand =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fastrand."2.3.0" {
                inherit profileName;
              }).out;
            http_02x =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.12" {
                inherit profileName;
              }).out;
            http_1x =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.3.1" {
                inherit profileName;
              }).out;
            http_body_04x =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body."0.4.6" {
                inherit profileName;
              }).out;
            http_body_1x =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body."1.0.1" {
                inherit profileName;
              }).out;
            once_cell =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.21.3" {
                inherit profileName;
              }).out;
            pin_project_lite =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.16" {
                inherit profileName;
              }).out;
            pin_utils =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-utils."0.1.0" {
                inherit profileName;
              }).out;
            tokio =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.44.1" {
                inherit profileName;
              }).out;
            tracing =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".aws-smithy-runtime-api."1.7.4" =
      overridableMkRustCrate
        (profileName: rec {
          name = "aws-smithy-runtime-api";
          version = "1.7.4";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "3da37cf5d57011cb1753456518ec76e31691f1f474b73934a284eb2a1c76510f";
          };
          features = builtins.concatLists [
            [ "client" ]
            [ "default" ]
            [ "http-02x" ]
            [ "http-1x" ]
            [ "http-auth" ]
            [ "test-util" ]
          ];
          dependencies = {
            aws_smithy_async =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-async."1.2.5" {
                inherit profileName;
              }).out;
            aws_smithy_types =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-types."1.3.0" {
                inherit profileName;
              }).out;
            bytes =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.10.1" {
                inherit profileName;
              }).out;
            http_02x =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.12" {
                inherit profileName;
              }).out;
            http_1x =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.3.1" {
                inherit profileName;
              }).out;
            pin_project_lite =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.16" {
                inherit profileName;
              }).out;
            tokio =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.44.1" {
                inherit profileName;
              }).out;
            tracing =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" {
                inherit profileName;
              }).out;
            zeroize =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.8.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".aws-smithy-types."1.3.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "aws-smithy-types";
          version = "1.3.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "836155caafba616c0ff9b07944324785de2ab016141c3550bd1c07882f8cee8f";
          };
          features = builtins.concatLists [
            [ "byte-stream-poll-next" ]
            [ "http-body-0-4-x" ]
            [ "http-body-1-x" ]
            [ "rt-tokio" ]
            [ "test-util" ]
          ];
          dependencies = {
            base64_simd =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64-simd."0.8.0" {
                inherit profileName;
              }).out;
            bytes =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.10.1" {
                inherit profileName;
              }).out;
            bytes_utils =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes-utils."0.1.4" {
                inherit profileName;
              }).out;
            futures_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" {
                inherit profileName;
              }).out;
            http =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.12" {
                inherit profileName;
              }).out;
            http_1x =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.3.1" {
                inherit profileName;
              }).out;
            http_body_0_4 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body."0.4.6" {
                inherit profileName;
              }).out;
            http_body_1_0 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body."1.0.1" {
                inherit profileName;
              }).out;
            http_body_util =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body-util."0.1.3" {
                inherit profileName;
              }).out;
            itoa =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.15" {
                inherit profileName;
              }).out;
            num_integer =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.46" {
                inherit profileName;
              }).out;
            pin_project_lite =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.16" {
                inherit profileName;
              }).out;
            pin_utils =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-utils."0.1.0" {
                inherit profileName;
              }).out;
            ryu =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ryu."1.0.20" {
                inherit profileName;
              }).out;
            ${if false then "serde" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            time =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".time."0.3.41" {
                inherit profileName;
              }).out;
            tokio =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.44.1" {
                inherit profileName;
              }).out;
            tokio_util =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-util."0.7.14" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".aws-smithy-xml."0.60.9" =
      overridableMkRustCrate
        (profileName: rec {
          name = "aws-smithy-xml";
          version = "0.60.9";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "ab0b0166827aa700d3dc519f72f8b3a91c35d0b8d042dc5d643a91e6f80648fc";
          };
          dependencies = {
            xmlparser =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".xmlparser."0.13.6" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".aws-types."1.3.6" =
      overridableMkRustCrate
        (profileName: rec {
          name = "aws-types";
          version = "1.3.6";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "3873f8deed8927ce8d04487630dc9ff73193bab64742a61d050e57a68dec4125";
          };
          dependencies = {
            aws_credential_types =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-credential-types."1.2.2" {
                inherit profileName;
              }).out;
            aws_smithy_async =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-async."1.2.5" {
                inherit profileName;
              }).out;
            aws_smithy_runtime_api =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-runtime-api."1.7.4"
                { inherit profileName; }
              ).out;
            aws_smithy_types =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-smithy-types."1.3.0" {
                inherit profileName;
              }).out;
            tracing =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" {
                inherit profileName;
              }).out;
          };
          buildDependencies = {
            rustc_version =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc_version."0.4.1" {
                profileName = "__noProfile";
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".axum."0.8.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "axum";
          version = "0.8.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "de45108900e1f9b9242f7f2e254aa3e2c029c921c258fe9e6b4217eeebd54288";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "form" ]
            [ "http1" ]
            [ "json" ]
            [ "matched-path" ]
            [ "original-uri" ]
            [ "query" ]
            [ "tokio" ]
            [ "tower-log" ]
            [ "tracing" ]
          ];
          dependencies = {
            axum_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".axum-core."0.5.2" {
                inherit profileName;
              }).out;
            bytes =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.10.1" {
                inherit profileName;
              }).out;
            form_urlencoded =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".form_urlencoded."1.2.1" {
                inherit profileName;
              }).out;
            futures_util =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" {
                inherit profileName;
              }).out;
            http =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.3.1" {
                inherit profileName;
              }).out;
            http_body =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body."1.0.1" {
                inherit profileName;
              }).out;
            http_body_util =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body-util."0.1.3" {
                inherit profileName;
              }).out;
            hyper =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper."1.6.0" {
                inherit profileName;
              }).out;
            hyper_util =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper-util."0.1.11" {
                inherit profileName;
              }).out;
            itoa =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.15" {
                inherit profileName;
              }).out;
            matchit =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".matchit."0.8.4" {
                inherit profileName;
              }).out;
            memchr =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.4" {
                inherit profileName;
              }).out;
            mime =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mime."0.3.17" {
                inherit profileName;
              }).out;
            percent_encoding =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.1" {
                inherit profileName;
              }).out;
            pin_project_lite =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.16" {
                inherit profileName;
              }).out;
            rustversion =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rustversion."1.0.20" {
                profileName = "__noProfile";
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            serde_json =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.140" {
                inherit profileName;
              }).out;
            serde_path_to_error =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_path_to_error."0.1.17" {
                inherit profileName;
              }).out;
            serde_urlencoded =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_urlencoded."0.7.1" {
                inherit profileName;
              }).out;
            sync_wrapper =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sync_wrapper."1.0.2" {
                inherit profileName;
              }).out;
            tokio =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.44.1" {
                inherit profileName;
              }).out;
            tower =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower."0.5.2" {
                inherit profileName;
              }).out;
            tower_layer =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-layer."0.3.3" {
                inherit profileName;
              }).out;
            tower_service =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-service."0.3.3" {
                inherit profileName;
              }).out;
            tracing =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".axum-core."0.5.2" =
      overridableMkRustCrate
        (profileName: rec {
          name = "axum-core";
          version = "0.5.2";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "68464cd0412f486726fb3373129ef5d2993f90c34bc2bc1c1e9943b2f4fc7ca6";
          };
          features = builtins.concatLists [
            [ "tracing" ]
          ];
          dependencies = {
            bytes =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.10.1" {
                inherit profileName;
              }).out;
            futures_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" {
                inherit profileName;
              }).out;
            http =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.3.1" {
                inherit profileName;
              }).out;
            http_body =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body."1.0.1" {
                inherit profileName;
              }).out;
            http_body_util =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body-util."0.1.3" {
                inherit profileName;
              }).out;
            mime =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mime."0.3.17" {
                inherit profileName;
              }).out;
            pin_project_lite =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.16" {
                inherit profileName;
              }).out;
            rustversion =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rustversion."1.0.20" {
                profileName = "__noProfile";
              }).out;
            sync_wrapper =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sync_wrapper."1.0.2" {
                inherit profileName;
              }).out;
            tower_layer =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-layer."0.3.3" {
                inherit profileName;
              }).out;
            tower_service =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-service."0.3.3" {
                inherit profileName;
              }).out;
            tracing =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".axum-prometheus."0.8.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "axum-prometheus";
          version = "0.8.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "42e1a6651f119707ec6c416f38fdb5be223707627fe6d47f912850634c106215";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "metrics-exporter-prometheus" ]
            [ "prometheus" ]
          ];
          dependencies = {
            axum =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".axum."0.8.3" {
                inherit profileName;
              }).out;
            bytes =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.10.1" {
                inherit profileName;
              }).out;
            futures_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" {
                inherit profileName;
              }).out;
            http =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.3.1" {
                inherit profileName;
              }).out;
            http_body =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body."1.0.1" {
                inherit profileName;
              }).out;
            matchit =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".matchit."0.8.4" {
                inherit profileName;
              }).out;
            metrics =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".metrics."0.24.1" {
                inherit profileName;
              }).out;
            metrics_exporter_prometheus =
              (
                rustPackages."registry+https://github.com/rust-lang/crates.io-index".metrics-exporter-prometheus."0.16.2"
                { inherit profileName; }
              ).out;
            pin_project =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.1.10" {
                inherit profileName;
              }).out;
            tokio =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.44.1" {
                inherit profileName;
              }).out;
            tower =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower."0.5.2" {
                inherit profileName;
              }).out;
            tower_http =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-http."0.6.2" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".b64-ct."0.1.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "b64-ct";
          version = "0.1.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "41dd1e07aafe656df62d40e74d4627a0cce26da43b0bec233ac1305207a5a768";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "std" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".backtrace."0.3.71" =
      overridableMkRustCrate
        (profileName: rec {
          name = "backtrace";
          version = "0.3.71";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "26b05800d2e817c8b3b4b54abd461726265fa9789ae34330622f2db9ee696f9d";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "gimli-symbolize" ]
            [ "std" ]
          ];
          dependencies = {
            ${
              if
                !(
                  hostPlatform.isWindows
                  && hostPlatform.parsed.abi.name == "msvc"
                  && !(hostPlatform.parsed.vendor.name == "uwp")
                )
              then
                "addr2line"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".addr2line."0.21.0" {
                inherit profileName;
              }).out;
            cfg_if =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {
                inherit profileName;
              }).out;
            ${
              if
                !(
                  hostPlatform.isWindows
                  && hostPlatform.parsed.abi.name == "msvc"
                  && !(hostPlatform.parsed.vendor.name == "uwp")
                )
              then
                "libc"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.171" {
                inherit profileName;
              }).out;
            ${
              if
                !(
                  hostPlatform.isWindows
                  && hostPlatform.parsed.abi.name == "msvc"
                  && !(hostPlatform.parsed.vendor.name == "uwp")
                )
              then
                "miniz_oxide"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.7.4" {
                inherit profileName;
              }).out;
            ${
              if
                !(
                  hostPlatform.isWindows
                  && hostPlatform.parsed.abi.name == "msvc"
                  && !(hostPlatform.parsed.vendor.name == "uwp")
                )
              then
                "object"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".object."0.32.2" {
                inherit profileName;
              }).out;
            rustc_demangle =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-demangle."0.1.24" {
                inherit profileName;
              }).out;
          };
          buildDependencies = {
            cc =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.2.17" {
                profileName = "__noProfile";
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".base16ct."0.1.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "base16ct";
          version = "0.1.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "349a06037c7bf932dd7e7d1f653678b2038b9ad46a74102f1fc7bd7872678cce";
          };
          features = builtins.concatLists [
            [ "alloc" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".base64."0.13.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "base64";
          version = "0.13.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "9e1b586273c5702936fe7b7d6896644d8be71e6314cfe09d3167c95f712589e8";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "std" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".base64."0.21.7" =
      overridableMkRustCrate
        (profileName: rec {
          name = "base64";
          version = "0.21.7";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "9d297deb1925b89f2ccc13d7635fa0714f12c87adce1c75356b39ca9b7178567";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "default" ]
            [ "std" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".base64."0.22.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "base64";
          version = "0.22.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "72b3254f16251a8381aa12e40e3c4d2f0199f8c6508fbecb9d91f575e0fbb8c6";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "default" ]
            [ "std" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".base64-simd."0.8.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "base64-simd";
          version = "0.8.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "339abbe78e73178762e23bea9dfd08e697eb3f3301cd4be981c0f78ba5859195";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "default" ]
            [ "detect" ]
            [ "std" ]
          ];
          dependencies = {
            outref =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".outref."0.5.2" {
                inherit profileName;
              }).out;
            vsimd =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".vsimd."0.8.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".base64ct."1.7.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "base64ct";
          version = "1.7.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "89e25b6adfb930f02d1981565a6e5d9c547ac15a96606256d3b59040e5cd4ca3";
          };
          features = builtins.concatLists [
            [ "alloc" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".bincode."1.3.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "bincode";
          version = "1.3.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "b1f45e9417d87227c7a56d22e471c6206462cba514c7590c09aff4cf6d1ddcad";
          };
          dependencies = {
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".bincode."2.0.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "bincode";
          version = "2.0.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "36eaf5d7b090263e8150820482d5d93cd964a81e4019913c972f4edcc6edb740";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "bincode_derive" ]
            [ "default" ]
            [ "derive" ]
            [ "std" ]
          ];
          dependencies = {
            bincode_derive =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".bincode_derive."2.0.1" {
                profileName = "__noProfile";
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            unty =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unty."0.0.4" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".bincode_derive."2.0.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "bincode_derive";
          version = "2.0.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "bf95709a440f45e986983918d0e8a1f30a9b1df04918fc828670606804ac3c09";
          };
          dependencies = {
            virtue =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".virtue."0.0.18" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".bindgen."0.69.5" =
      overridableMkRustCrate
        (profileName: rec {
          name = "bindgen";
          version = "0.69.5";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "271383c67ccabffb7381723dea0672a673f292304fcb45c01cc648c7a8d58088";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "logging" ]
            [ "prettyplease" ]
            [ "runtime" ]
            [ "which-rustfmt" ]
          ];
          dependencies = {
            bitflags =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.9.0" {
                inherit profileName;
              }).out;
            cexpr =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cexpr."0.6.0" {
                inherit profileName;
              }).out;
            clang_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".clang-sys."1.8.1" {
                inherit profileName;
              }).out;
            itertools =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itertools."0.12.1" {
                inherit profileName;
              }).out;
            lazy_static =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.5.0" {
                inherit profileName;
              }).out;
            lazycell =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazycell."1.3.0" {
                inherit profileName;
              }).out;
            log =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.27" {
                inherit profileName;
              }).out;
            prettyplease =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".prettyplease."0.2.31" {
                inherit profileName;
              }).out;
            proc_macro2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.94" {
                inherit profileName;
              }).out;
            quote =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.40" {
                inherit profileName;
              }).out;
            regex =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.11.1" {
                inherit profileName;
              }).out;
            rustc_hash =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" {
                inherit profileName;
              }).out;
            shlex =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".shlex."1.3.0" {
                inherit profileName;
              }).out;
            syn =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.100" {
                inherit profileName;
              }).out;
            which =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".which."4.4.2" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".bitflags."2.9.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "bitflags";
          version = "2.9.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "5c8214115b7bf84099f1309324e63141d4c5d7cc26862f97a0a857dbefe165bd";
          };
          features = builtins.concatLists [
            [ "serde" ]
            [ "std" ]
          ];
          dependencies = {
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".blake2."0.10.6" =
      overridableMkRustCrate
        (profileName: rec {
          name = "blake2";
          version = "0.10.6";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "46502ad458c9a52b69d4d4d32775c788b7a1b85e8bc9d482d92250fc0e3f8efe";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "std" ]
          ];
          dependencies = {
            digest =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".blake3."1.8.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "blake3";
          version = "1.8.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "389a099b34312839e16420d499a9cad9650541715937ffbdd40d36f49e77eeb3";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "rayon" ]
            [ "serde" ]
            [ "std" ]
          ];
          dependencies = {
            arrayref =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayref."0.3.9" {
                inherit profileName;
              }).out;
            arrayvec =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".arrayvec."0.7.6" {
                inherit profileName;
              }).out;
            cfg_if =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {
                inherit profileName;
              }).out;
            constant_time_eq =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".constant_time_eq."0.3.1" {
                inherit profileName;
              }).out;
            rayon_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rayon-core."1.12.1" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
          };
          buildDependencies = {
            cc =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.2.17" {
                profileName = "__noProfile";
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".block-buffer."0.10.4" =
      overridableMkRustCrate
        (profileName: rec {
          name = "block-buffer";
          version = "0.10.4";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71";
          };
          dependencies = {
            generic_array =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".boolinator."2.4.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "boolinator";
          version = "2.4.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "cfa8873f51c92e232f9bac4065cddef41b714152812bfc5f7672ba16d6ef8cd9";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".brotli-decompressor."4.0.2" =
      overridableMkRustCrate
        (profileName: rec {
          name = "brotli-decompressor";
          version = "4.0.2";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "74fa05ad7d803d413eb8380983b092cbbaf9a85f151b871360e7b00cd7060b37";
          };
          features = builtins.concatLists [
            [ "alloc-stdlib" ]
            [ "default" ]
            [ "std" ]
          ];
          dependencies = {
            alloc_no_stdlib =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".alloc-no-stdlib."2.0.4" {
                inherit profileName;
              }).out;
            alloc_stdlib =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".alloc-stdlib."0.2.2" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".buf_redux."0.8.4" =
      overridableMkRustCrate
        (profileName: rec {
          name = "buf_redux";
          version = "0.8.4";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "b953a6887648bb07a535631f2bc00fbdb2a2216f135552cb3f534ed136b9c07f";
          };
          dependencies = {
            memchr =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.4" {
                inherit profileName;
              }).out;
            safemem =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".safemem."0.3.3" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.17.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "bumpalo";
          version = "3.17.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "1628fb46dfa0b37568d12e5edd512553eccf6a22a78e8bde00bb4aed84d5bdbf";
          };
          features = builtins.concatLists [
            [ "default" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".bytemuck."1.22.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "bytemuck";
          version = "1.22.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "b6b1fc10dbac614ebc03540c9dbd60e83887fda27794998c6528f1782047d540";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "byteorder";
          version = "1.5.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b";
          };
          features = builtins.concatLists [
            [ "std" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".bytes."1.10.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "bytes";
          version = "1.10.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "d71b6127be86fdcfddb610f7182ac57211d4b18a3e9c82eb2d17662f2227ad6a";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "std" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".bytes-utils."0.1.4" =
      overridableMkRustCrate
        (profileName: rec {
          name = "bytes-utils";
          version = "0.1.4";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "7dafe3a8757b027e2be6e4e5601ed563c55989fcf1546e933c66c8eb3a058d35";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "std" ]
          ];
          dependencies = {
            bytes =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.10.1" {
                inherit profileName;
              }).out;
            either =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.15.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".cc."1.2.17" =
      overridableMkRustCrate
        (profileName: rec {
          name = "cc";
          version = "1.2.17";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "1fcb57c740ae1daf453ae85f16e37396f672b039e00d9d866e07ddb24e328e3a";
          };
          features = builtins.concatLists [
            [ "parallel" ]
          ];
          dependencies = {
            jobserver =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jobserver."0.1.33" {
                inherit profileName;
              }).out;
            ${if hostPlatform.isUnix then "libc" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.171" {
                inherit profileName;
              }).out;
            shlex =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".shlex."1.3.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".cexpr."0.6.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "cexpr";
          version = "0.6.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "6fac387a98bb7c37292057cffc56d62ecb629900026402633ae9160df93a8766";
          };
          dependencies = {
            nom =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nom."7.1.3" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "cfg-if";
          version = "1.0.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".cfg_aliases."0.2.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "cfg_aliases";
          version = "0.2.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "613afe47fcd5fac7ccf1db93babcb082c5994d996f20b8b159f2ad1658eb5724";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".chacha20."0.9.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "chacha20";
          version = "0.9.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "c3613f74bd2eac03dad61bd53dbe620703d4371614fe0bc3b9f04dd36fe4e818";
          };
          dependencies = {
            cfg_if =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {
                inherit profileName;
              }).out;
            cipher =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cipher."0.4.4" {
                inherit profileName;
              }).out;
            ${
              if hostPlatform.parsed.cpu.name == "x86_64" || hostPlatform.parsed.cpu.name == "i686" then
                "cpufeatures"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.17" {
                inherit profileName;
              }).out;
          };
        });

    "unknown".chir-rs."0.1.0" = overridableMkRustCrate (profileName: rec {
      name = "chir-rs";
      version = "0.1.0";
      registry = "unknown";
      src = fetchCrateLocal workspaceSrc;
      dependencies = {
        argon2 =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".argon2."0.5.3" {
            inherit profileName;
          }).out;
        aws_config =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-config."1.6.1" {
            inherit profileName;
          }).out;
        aws_sdk_s3 =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-sdk-s3."1.82.0" {
            inherit profileName;
          }).out;
        axum =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".axum."0.8.3" {
            inherit profileName;
          }).out;
        axum_prometheus =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".axum-prometheus."0.8.0" {
            inherit profileName;
          }).out;
        b64_ct =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".b64-ct."0.1.3" {
            inherit profileName;
          }).out;
        bincode =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bincode."2.0.1" {
            inherit profileName;
          }).out;
        blake3 =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".blake3."1.8.1" {
            inherit profileName;
          }).out;
        bytes =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.10.1" {
            inherit profileName;
          }).out;
        chir_rs_common = (rustPackages."unknown".chir-rs-common."0.1.0" { inherit profileName; }).out;
        chrono =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.40" {
            inherit profileName;
          }).out;
        color_eyre =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".color-eyre."0.6.3" {
            inherit profileName;
          }).out;
        dashmap =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".dashmap."6.1.0" {
            inherit profileName;
          }).out;
        dotenvy =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".dotenvy."0.15.7" {
            inherit profileName;
          }).out;
        educe =
          (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".educe."0.6.0" {
            profileName = "__noProfile";
          }).out;
        eyre =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".eyre."0.6.12" {
            inherit profileName;
          }).out;
        futures =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.31" {
            inherit profileName;
          }).out;
        mime =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mime."0.3.17" {
            inherit profileName;
          }).out;
        rand =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.9.0" {
            inherit profileName;
          }).out;
        rustls =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.23.25" {
            inherit profileName;
          }).out;
        rusty_paseto =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rusty_paseto."0.7.2" {
            inherit profileName;
          }).out;
        sentry =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sentry."0.37.0" {
            inherit profileName;
          }).out;
        sentry_core =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sentry-core."0.37.0" {
            inherit profileName;
          }).out;
        sentry_eyre =
          (rustPackages."git+https://github.com/auguwu/sentry-eyre".sentry-eyre."0.2.0" {
            inherit profileName;
          }).out;
        sentry_tower =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sentry-tower."0.37.0" {
            inherit profileName;
          }).out;
        sentry_tracing =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sentry-tracing."0.37.0" {
            inherit profileName;
          }).out;
        serde =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
            inherit profileName;
          }).out;
        sqlx =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sqlx."0.8.3" {
            inherit profileName;
          }).out;
        stretto =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".stretto."0.8.4" {
            inherit profileName;
          }).out;
        tokio =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.44.1" {
            inherit profileName;
          }).out;
        tokio_rustls =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-rustls."0.26.2" {
            inherit profileName;
          }).out;
        tokio_util =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-util."0.7.14" {
            inherit profileName;
          }).out;
        toml =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml."0.8.20" {
            inherit profileName;
          }).out;
        tower_http =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-http."0.6.2" {
            inherit profileName;
          }).out;
        tracing =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" {
            inherit profileName;
          }).out;
        tracing_error =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-error."0.2.1" {
            inherit profileName;
          }).out;
        tracing_subscriber =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-subscriber."0.3.19" {
            inherit profileName;
          }).out;
        unicode_normalization =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-normalization."0.1.24"
            { inherit profileName; }
          ).out;
        url =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.5.4" {
            inherit profileName;
          }).out;
      };
    });

    "unknown".chir-rs-client."0.1.0" = overridableMkRustCrate (profileName: rec {
      name = "chir-rs-client";
      version = "0.1.0";
      registry = "unknown";
      src = fetchCrateLocal workspaceSrc;
      dependencies = {
        bincode =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bincode."2.0.1" {
            inherit profileName;
          }).out;
        chir_rs_common = (rustPackages."unknown".chir-rs-common."0.1.0" { inherit profileName; }).out;
        clap =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap."4.5.35" {
            inherit profileName;
          }).out;
        color_eyre =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".color-eyre."0.6.3" {
            inherit profileName;
          }).out;
        dotenvy =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".dotenvy."0.15.7" {
            inherit profileName;
          }).out;
        eyre =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".eyre."0.6.12" {
            inherit profileName;
          }).out;
        mime =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mime."0.3.17" {
            inherit profileName;
          }).out;
        mime_guess =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mime_guess."2.0.5" {
            inherit profileName;
          }).out;
        reqwest =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".reqwest."0.12.15" {
            inherit profileName;
          }).out;
        tokio =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.44.1" {
            inherit profileName;
          }).out;
        tracing =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" {
            inherit profileName;
          }).out;
        tracing_subscriber =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-subscriber."0.3.19" {
            inherit profileName;
          }).out;
      };
    });

    "unknown".chir-rs-common."0.1.0" = overridableMkRustCrate (profileName: rec {
      name = "chir-rs-common";
      version = "0.1.0";
      registry = "unknown";
      src = fetchCrateLocal workspaceSrc;
      features = builtins.concatLists [
        [ "axum" ]
      ];
      dependencies = {
        axum_core =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".axum-core."0.5.2" {
            inherit profileName;
          }).out;
        b64_ct =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".b64-ct."0.1.3" {
            inherit profileName;
          }).out;
        base64 =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.22.1" {
            inherit profileName;
          }).out;
        bincode =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bincode."2.0.1" {
            inherit profileName;
          }).out;
        bytes =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.10.1" {
            inherit profileName;
          }).out;
        chrono =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.40" {
            inherit profileName;
          }).out;
        educe =
          (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".educe."0.6.0" {
            profileName = "__noProfile";
          }).out;
        eyre =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".eyre."0.6.12" {
            inherit profileName;
          }).out;
        http =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.3.1" {
            inherit profileName;
          }).out;
        mime =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mime."0.3.17" {
            inherit profileName;
          }).out;
        rand =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.9.0" {
            inherit profileName;
          }).out;
        serde =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
            inherit profileName;
          }).out;
        thiserror =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."2.0.12" {
            inherit profileName;
          }).out;
        tracing =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" {
            inherit profileName;
          }).out;
      };
    });

    "unknown".chir-rs-fe."0.1.0" = overridableMkRustCrate (profileName: rec {
      name = "chir-rs-fe";
      version = "0.1.0";
      registry = "unknown";
      src = fetchCrateLocal workspaceSrc;
      dependencies = {
        bincode =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bincode."2.0.1" {
            inherit profileName;
          }).out;
        chir_rs_common = (rustPackages."unknown".chir-rs-common."0.1.0" { inherit profileName; }).out;
        console_error_panic_hook =
          (
            rustPackages."registry+https://github.com/rust-lang/crates.io-index".console_error_panic_hook."0.1.7"
            { inherit profileName; }
          ).out;
        eyre =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".eyre."0.6.12" {
            inherit profileName;
          }).out;
        gloo_net =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-net."0.6.0" {
            inherit profileName;
          }).out;
        gloo_storage =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-storage."0.3.0" {
            inherit profileName;
          }).out;
        tracing =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" {
            inherit profileName;
          }).out;
        tracing_subscriber =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-subscriber."0.3.19" {
            inherit profileName;
          }).out;
        unicode_normalization =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-normalization."0.1.24"
            { inherit profileName; }
          ).out;
        wasm_bindgen =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" {
            inherit profileName;
          }).out;
        wasm_tracing =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-tracing."2.0.0" {
            inherit profileName;
          }).out;
        web_sys =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.77" {
            inherit profileName;
          }).out;
        yew =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".yew."0.21.0" {
            inherit profileName;
          }).out;
        yew_router =
          (rustPackages."registry+https://github.com/rust-lang/crates.io-index".yew-router."0.18.0" {
            inherit profileName;
          }).out;
      };
    });

    "registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.40" =
      overridableMkRustCrate
        (profileName: rec {
          name = "chrono";
          version = "0.4.40";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "1a7964611d71df112cb1730f2ee67324fcf4d0fc6606acbbe9bfe06df124637c";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "android-tzdata" ]
            [ "clock" ]
            [ "default" ]
            [ "iana-time-zone" ]
            [ "js-sys" ]
            [ "now" ]
            [ "oldtime" ]
            [ "std" ]
            [ "wasm-bindgen" ]
            [ "wasmbind" ]
            [ "winapi" ]
            [ "windows-link" ]
          ];
          dependencies = {
            ${if hostPlatform.parsed.kernel.name == "android" then "android_tzdata" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".android-tzdata."0.1.1" {
                inherit profileName;
              }).out;
            ${if hostPlatform.isUnix then "iana_time_zone" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".iana-time-zone."0.1.63" {
                inherit profileName;
              }).out;
            ${
              if
                hostPlatform.parsed.cpu.name == "wasm32"
                && !(hostPlatform.parsed.kernel.name == "emscripten" || hostPlatform.parsed.kernel.name == "wasi")
              then
                "js_sys"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.77" {
                inherit profileName;
              }).out;
            num_traits =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.19" {
                inherit profileName;
              }).out;
            ${
              if
                hostPlatform.parsed.cpu.name == "wasm32"
                && !(hostPlatform.parsed.kernel.name == "emscripten" || hostPlatform.parsed.kernel.name == "wasi")
              then
                "wasm_bindgen"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" {
                inherit profileName;
              }).out;
            ${if hostPlatform.isWindows then "windows_link" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-link."0.1.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".chunked_transfer."1.5.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "chunked_transfer";
          version = "1.5.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "6e4de3bc4ea267985becf712dc6d9eed8b04c953b3fcfb339ebc87acd9804901";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".cipher."0.4.4" =
      overridableMkRustCrate
        (profileName: rec {
          name = "cipher";
          version = "0.4.4";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "773f3b9af64447d2ce9850330c473515014aa235e6a783b02db81ff39e4a3dad";
          };
          dependencies = {
            crypto_common =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crypto-common."0.1.6" {
                inherit profileName;
              }).out;
            inout =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".inout."0.1.4" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".clang-sys."1.8.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "clang-sys";
          version = "1.8.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "0b023947811758c97c59bf9d1c188fd619ad4718dcaa767947df1cadb14f39f4";
          };
          features = builtins.concatLists [
            [ "clang_3_5" ]
            [ "clang_3_6" ]
            [ "clang_3_7" ]
            [ "clang_3_8" ]
            [ "clang_3_9" ]
            [ "clang_4_0" ]
            [ "clang_5_0" ]
            [ "clang_6_0" ]
            [ "libloading" ]
            [ "runtime" ]
          ];
          dependencies = {
            glob =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".glob."0.3.2" {
                inherit profileName;
              }).out;
            libc =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.171" {
                inherit profileName;
              }).out;
            libloading =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libloading."0.8.6" {
                inherit profileName;
              }).out;
          };
          buildDependencies = {
            glob =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".glob."0.3.2" {
                profileName = "__noProfile";
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".clap."4.5.35" =
      overridableMkRustCrate
        (profileName: rec {
          name = "clap";
          version = "4.5.35";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "d8aa86934b44c19c50f87cc2790e19f54f7a67aedb64101c2e1a2e5ecfb73944";
          };
          features = builtins.concatLists [
            [ "color" ]
            [ "default" ]
            [ "derive" ]
            [ "error-context" ]
            [ "help" ]
            [ "std" ]
            [ "suggestions" ]
            [ "usage" ]
          ];
          dependencies = {
            clap_builder =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap_builder."4.5.35" {
                inherit profileName;
              }).out;
            clap_derive =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".clap_derive."4.5.32" {
                profileName = "__noProfile";
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".clap_builder."4.5.35" =
      overridableMkRustCrate
        (profileName: rec {
          name = "clap_builder";
          version = "4.5.35";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "2414dbb2dd0695280da6ea9261e327479e9d37b0630f6b53ba2a11c60c679fd9";
          };
          features = builtins.concatLists [
            [ "color" ]
            [ "error-context" ]
            [ "help" ]
            [ "std" ]
            [ "suggestions" ]
            [ "usage" ]
          ];
          dependencies = {
            anstream =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstream."0.6.18" {
                inherit profileName;
              }).out;
            anstyle =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstyle."1.0.10" {
                inherit profileName;
              }).out;
            clap_lex =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap_lex."0.7.4" {
                inherit profileName;
              }).out;
            strsim =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".strsim."0.11.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".clap_derive."4.5.32" =
      overridableMkRustCrate
        (profileName: rec {
          name = "clap_derive";
          version = "4.5.32";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "09176aae279615badda0765c0c0b3f6ed53f4709118af73cf4655d85d1530cd7";
          };
          features = builtins.concatLists [
            [ "default" ]
          ];
          dependencies = {
            heck =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".heck."0.5.0" {
                inherit profileName;
              }).out;
            proc_macro2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.94" {
                inherit profileName;
              }).out;
            quote =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.40" {
                inherit profileName;
              }).out;
            syn =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.100" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".clap_lex."0.7.4" =
      overridableMkRustCrate
        (profileName: rec {
          name = "clap_lex";
          version = "0.7.4";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "f46ad14479a25103f283c0f10005961cf086d8dc42205bb44c46ac563475dca6";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".cmake."0.1.54" =
      overridableMkRustCrate
        (profileName: rec {
          name = "cmake";
          version = "0.1.54";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "e7caa3f9de89ddbe2c607f4101924c5abec803763ae9534e4f4d7d8f84aa81f0";
          };
          dependencies = {
            cc =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.2.17" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".color-eyre."0.6.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "color-eyre";
          version = "0.6.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "55146f5e46f237f7423d74111267d4597b59b0dad0ffaf7303bce9945d843ad5";
          };
          features = builtins.concatLists [
            [ "capture-spantrace" ]
            [ "color-spantrace" ]
            [ "default" ]
            [ "issue-url" ]
            [ "tracing-error" ]
            [ "track-caller" ]
            [ "url" ]
          ];
          dependencies = {
            backtrace =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".backtrace."0.3.71" {
                inherit profileName;
              }).out;
            color_spantrace =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".color-spantrace."0.2.1" {
                inherit profileName;
              }).out;
            eyre =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".eyre."0.6.12" {
                inherit profileName;
              }).out;
            indenter =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indenter."0.3.3" {
                inherit profileName;
              }).out;
            once_cell =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.21.3" {
                inherit profileName;
              }).out;
            owo_colors =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".owo-colors."3.5.0" {
                inherit profileName;
              }).out;
            tracing_error =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-error."0.2.1" {
                inherit profileName;
              }).out;
            url =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.5.4" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".color-spantrace."0.2.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "color-spantrace";
          version = "0.2.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "cd6be1b2a7e382e2b98b43b2adcca6bb0e465af0bdd38123873ae61eb17a72c2";
          };
          dependencies = {
            once_cell =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.21.3" {
                inherit profileName;
              }).out;
            owo_colors =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".owo-colors."3.5.0" {
                inherit profileName;
              }).out;
            tracing_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.33" {
                inherit profileName;
              }).out;
            tracing_error =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-error."0.2.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".colorchoice."1.0.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "colorchoice";
          version = "1.0.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "5b63caa9aa9397e2d9480a9b13673856c78d8ac123288526c37d7839f2a86990";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".concurrent-queue."2.5.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "concurrent-queue";
          version = "2.5.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "4ca0197aee26d1ae37445ee532fefce43251d24cc7c166799f4d46817f1d3973";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "portable-atomic" ]
            [ "std" ]
          ];
          dependencies = {
            crossbeam_utils =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.21" {
                inherit profileName;
              }).out;
            portable_atomic =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".portable-atomic."1.11.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".console_error_panic_hook."0.1.7" =
      overridableMkRustCrate
        (profileName: rec {
          name = "console_error_panic_hook";
          version = "0.1.7";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "a06aeb73f470f66dcdbf7223caeebb85984942f22f1adb2a088cf9668146bbbc";
          };
          dependencies = {
            cfg_if =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {
                inherit profileName;
              }).out;
            wasm_bindgen =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".const-oid."0.9.6" =
      overridableMkRustCrate
        (profileName: rec {
          name = "const-oid";
          version = "0.9.6";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "c2459377285ad874054d797f3ccebf984978aa39129f6eafde5cdc8315b612f8";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".constant_time_eq."0.3.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "constant_time_eq";
          version = "0.3.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "7c74b8349d32d297c9134b8c88677813a227df8f779daa29bfc29c183fe3dca6";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.4" =
      overridableMkRustCrate
        (profileName: rec {
          name = "core-foundation";
          version = "0.9.4";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "91e195e091a93c46f7102ec7818a2aa394e1e1771c3ab4825963fa03e45afb8f";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "link" ]
          ];
          dependencies = {
            core_foundation_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.7" {
                inherit profileName;
              }).out;
            libc =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.171" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.10.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "core-foundation";
          version = "0.10.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "b55271e5c8c478ad3f38ad24ef34923091e0548492a266d19b3c0b4d82574c63";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "link" ]
          ];
          dependencies = {
            core_foundation_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.7" {
                inherit profileName;
              }).out;
            libc =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.171" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.7" =
      overridableMkRustCrate
        (profileName: rec {
          name = "core-foundation-sys";
          version = "0.8.7";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "link" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.17" =
      overridableMkRustCrate
        (profileName: rec {
          name = "cpufeatures";
          version = "0.2.17";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "59ed5838eebb26a2bb2e58f6d5b5316989ae9d08bab10e0e6d103e656d1b0280";
          };
          dependencies = {
            ${
              if
                hostPlatform.config == "aarch64-linux-android"
                || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.kernel.name == "linux"
                || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.vendor.name == "apple"
                || hostPlatform.parsed.cpu.name == "loongarch64" && hostPlatform.parsed.kernel.name == "linux"
              then
                "libc"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.171" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".crc."3.2.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "crc";
          version = "3.2.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "69e6e4d7b33a94f0991c26729976b10ebde1d34c3ee82408fb536164fa10d636";
          };
          dependencies = {
            crc_catalog =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc-catalog."2.4.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".crc-catalog."2.4.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "crc-catalog";
          version = "2.4.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "19d374276b40fb8bbdee95aef7c7fa6b5316ec764510eb64b8dd0e2ed0d7e7f5";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".crc32c."0.6.8" =
      overridableMkRustCrate
        (profileName: rec {
          name = "crc32c";
          version = "0.6.8";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "3a47af21622d091a8f0fb295b88bc886ac74efcc613efc19f5d0b21de5c89e47";
          };
          buildDependencies = {
            rustc_version =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc_version."0.4.1" {
                profileName = "__noProfile";
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.4.2" =
      overridableMkRustCrate
        (profileName: rec {
          name = "crc32fast";
          version = "1.4.2";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "a97769d94ddab943e4510d138150169a2758b5ef3eb191a9ee688de3e23ef7b3";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "std" ]
          ];
          dependencies = {
            cfg_if =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".crc64fast-nvme."1.2.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "crc64fast-nvme";
          version = "1.2.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "4955638f00a809894c947f85a024020a20815b65a5eea633798ea7924edab2b3";
          };
          dependencies = {
            crc =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc."3.2.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".crossbeam-channel."0.5.14" =
      overridableMkRustCrate
        (profileName: rec {
          name = "crossbeam-channel";
          version = "0.5.14";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "06ba6d68e24814cb8de6bb986db8222d3a027d15872cabc0d18817bc3c0e4471";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "std" ]
          ];
          dependencies = {
            crossbeam_utils =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.21" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".crossbeam-deque."0.8.6" =
      overridableMkRustCrate
        (profileName: rec {
          name = "crossbeam-deque";
          version = "0.8.6";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "9dd111b7b7f7d55b72c0a6ae361660ee5853c9af73f70c3c2ef6858b950e2e51";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "std" ]
          ];
          dependencies = {
            crossbeam_epoch =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-epoch."0.9.18" {
                inherit profileName;
              }).out;
            crossbeam_utils =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.21" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".crossbeam-epoch."0.9.18" =
      overridableMkRustCrate
        (profileName: rec {
          name = "crossbeam-epoch";
          version = "0.9.18";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "5b82ac4a3c2ca9c3460964f020e1402edd5753411d7737aa39c3714ad1b5420e";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "std" ]
          ];
          dependencies = {
            crossbeam_utils =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.21" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".crossbeam-queue."0.3.12" =
      overridableMkRustCrate
        (profileName: rec {
          name = "crossbeam-queue";
          version = "0.3.12";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "0f58bbc28f91df819d0aa2a2c00cd19754769c2fad90579b3592b1c9ba7a3115";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "default" ]
            [ "std" ]
          ];
          dependencies = {
            crossbeam_utils =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.21" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.21" =
      overridableMkRustCrate
        (profileName: rec {
          name = "crossbeam-utils";
          version = "0.8.21";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "d0a5c400df2834b80a4c3327b3aad3a4c4cd4de0629063962b03235697506a28";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "std" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".crypto-bigint."0.4.9" =
      overridableMkRustCrate
        (profileName: rec {
          name = "crypto-bigint";
          version = "0.4.9";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "ef2b4b23cddf68b89b8f8069890e8c270d54e2d5fe1b143820234805e4cb17ef";
          };
          features = builtins.concatLists [
            [ "generic-array" ]
            [ "rand_core" ]
            [ "zeroize" ]
          ];
          dependencies = {
            generic_array =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" {
                inherit profileName;
              }).out;
            rand_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" {
                inherit profileName;
              }).out;
            subtle =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.6.1" {
                inherit profileName;
              }).out;
            zeroize =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.8.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".crypto-bigint."0.5.5" =
      overridableMkRustCrate
        (profileName: rec {
          name = "crypto-bigint";
          version = "0.5.5";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "0dc92fb57ca44df6db8059111ab3af99a63d5d0f8375d9972e319a379c6bab76";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "rand" ]
            [ "rand_core" ]
          ];
          dependencies = {
            rand_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" {
                inherit profileName;
              }).out;
            subtle =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.6.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".crypto-common."0.1.6" =
      overridableMkRustCrate
        (profileName: rec {
          name = "crypto-common";
          version = "0.1.6";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3";
          };
          features = builtins.concatLists [
            [ "std" ]
          ];
          dependencies = {
            generic_array =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" {
                inherit profileName;
              }).out;
            typenum =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".typenum."1.18.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".curve25519-dalek."4.1.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "curve25519-dalek";
          version = "4.1.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "97fb8b7c4503de7d6ae7b42ab72a5a59857b4c937ec27a3d4539dba95b5ab2be";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "digest" ]
            [ "precomputed-tables" ]
            [ "zeroize" ]
          ];
          dependencies = {
            cfg_if =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {
                inherit profileName;
              }).out;
            ${if hostPlatform.parsed.cpu.name == "x86_64" then "cpufeatures" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.17" {
                inherit profileName;
              }).out;
            ${if hostPlatform.parsed.cpu.name == "x86_64" then "curve25519_dalek_derive" else null} =
              (
                buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".curve25519-dalek-derive."0.1.1"
                { profileName = "__noProfile"; }
              ).out;
            digest =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" {
                inherit profileName;
              }).out;
            ${if false then "fiat_crypto" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fiat-crypto."0.2.9" {
                inherit profileName;
              }).out;
            subtle =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.6.1" {
                inherit profileName;
              }).out;
            zeroize =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.8.1" {
                inherit profileName;
              }).out;
          };
          buildDependencies = {
            rustc_version =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc_version."0.4.1" {
                profileName = "__noProfile";
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".curve25519-dalek-derive."0.1.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "curve25519-dalek-derive";
          version = "0.1.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "f46882e17999c6cc590af592290432be3bce0428cb0d5f8b6715e4dc7b383eb3";
          };
          dependencies = {
            proc_macro2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.94" {
                inherit profileName;
              }).out;
            quote =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.40" {
                inherit profileName;
              }).out;
            syn =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.100" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".dashmap."6.1.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "dashmap";
          version = "6.1.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "5041cc499144891f3790297212f32a74fb938e5136a14943f338ef9e0ae276cf";
          };
          dependencies = {
            cfg_if =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {
                inherit profileName;
              }).out;
            crossbeam_utils =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.21" {
                inherit profileName;
              }).out;
            hashbrown =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.14.5" {
                inherit profileName;
              }).out;
            lock_api =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lock_api."0.4.12" {
                inherit profileName;
              }).out;
            once_cell =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.21.3" {
                inherit profileName;
              }).out;
            parking_lot_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot_core."0.9.10" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".debugid."0.8.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "debugid";
          version = "0.8.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "bef552e6f588e446098f6ba40d89ac146c8c7b64aade83c051ee00bb5d2bc18d";
          };
          features = builtins.concatLists [
            [ "serde" ]
          ];
          dependencies = {
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            uuid =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".uuid."1.16.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".der."0.6.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "der";
          version = "0.6.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "f1a467a65c5e759bce6e65eaf91cc29f466cdc57cb65777bd646872a8a1fd4de";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "const-oid" ]
            [ "oid" ]
            [ "zeroize" ]
          ];
          dependencies = {
            const_oid =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".const-oid."0.9.6" {
                inherit profileName;
              }).out;
            zeroize =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.8.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".der."0.7.9" =
      overridableMkRustCrate
        (profileName: rec {
          name = "der";
          version = "0.7.9";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "f55bf8e7b65898637379c1b74eb1551107c8294ed26d855ceb9fd1a09cfc9bc0";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "oid" ]
            [ "pem" ]
            [ "std" ]
            [ "zeroize" ]
          ];
          dependencies = {
            const_oid =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".const-oid."0.9.6" {
                inherit profileName;
              }).out;
            pem_rfc7468 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pem-rfc7468."0.7.0" {
                inherit profileName;
              }).out;
            zeroize =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.8.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".deranged."0.4.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "deranged";
          version = "0.4.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "28cfac68e08048ae1883171632c2aef3ebc555621ae56fbccce1cbf22dd7f058";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "powerfmt" ]
            [ "std" ]
          ];
          dependencies = {
            powerfmt =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".powerfmt."0.2.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" =
      overridableMkRustCrate
        (profileName: rec {
          name = "digest";
          version = "0.10.7";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "block-buffer" ]
            [ "const-oid" ]
            [ "core-api" ]
            [ "default" ]
            [ "mac" ]
            [ "oid" ]
            [ "std" ]
            [ "subtle" ]
          ];
          dependencies = {
            block_buffer =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".block-buffer."0.10.4" {
                inherit profileName;
              }).out;
            const_oid =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".const-oid."0.9.6" {
                inherit profileName;
              }).out;
            crypto_common =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crypto-common."0.1.6" {
                inherit profileName;
              }).out;
            subtle =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.6.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".displaydoc."0.2.5" =
      overridableMkRustCrate
        (profileName: rec {
          name = "displaydoc";
          version = "0.2.5";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "97369cbbc041bc366949bc74d34658d6cda5621039731c6310521892a3a20ae0";
          };
          dependencies = {
            proc_macro2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.94" {
                inherit profileName;
              }).out;
            quote =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.40" {
                inherit profileName;
              }).out;
            syn =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.100" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".dotenvy."0.15.7" =
      overridableMkRustCrate
        (profileName: rec {
          name = "dotenvy";
          version = "0.15.7";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "1aaf95b3e5c8f23aa320147307562d361db0ae0d51242340f558153b4eb2439b";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".dunce."1.0.5" =
      overridableMkRustCrate
        (profileName: rec {
          name = "dunce";
          version = "1.0.5";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "92773504d58c093f6de2459af4af33faa518c13451eb8f2b5698ed3d36e7c813";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".ecdsa."0.14.8" =
      overridableMkRustCrate
        (profileName: rec {
          name = "ecdsa";
          version = "0.14.8";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "413301934810f597c1d19ca71c8710e99a3f1ba28a0d2ebc01551a2daeea3c5c";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "arithmetic" ]
            [ "der" ]
            [ "digest" ]
            [ "hazmat" ]
            [ "pkcs8" ]
            [ "rfc6979" ]
            [ "sign" ]
            [ "std" ]
            [ "verify" ]
          ];
          dependencies = {
            der =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".der."0.6.1" {
                inherit profileName;
              }).out;
            elliptic_curve =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".elliptic-curve."0.12.3" {
                inherit profileName;
              }).out;
            rfc6979 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rfc6979."0.3.1" {
                inherit profileName;
              }).out;
            signature =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".signature."1.6.4" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".ed25519."2.2.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "ed25519";
          version = "2.2.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "115531babc129696a58c64a4fef0a8bf9e9698629fb97e9e40767d235cfbcd53";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "std" ]
          ];
          dependencies = {
            pkcs8 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pkcs8."0.10.2" {
                inherit profileName;
              }).out;
            signature =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".signature."2.2.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".ed25519-dalek."2.1.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "ed25519-dalek";
          version = "2.1.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "4a3daa8e81a3963a60642bcc1f90a670680bd4a77535faa384e9d1c79d620871";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "default" ]
            [ "fast" ]
            [ "std" ]
            [ "zeroize" ]
          ];
          dependencies = {
            curve25519_dalek =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".curve25519-dalek."4.1.3" {
                inherit profileName;
              }).out;
            ed25519 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ed25519."2.2.3" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            sha2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" {
                inherit profileName;
              }).out;
            subtle =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.6.1" {
                inherit profileName;
              }).out;
            zeroize =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.8.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".educe."0.6.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "educe";
          version = "0.6.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "1d7bc049e1bd8cdeb31b68bbd586a9464ecf9f3944af3958a7a9d0f8b9799417";
          };
          features = builtins.concatLists [
            [ "Debug" ]
          ];
          dependencies = {
            enum_ordinalize =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".enum-ordinalize."4.3.0" {
                inherit profileName;
              }).out;
            proc_macro2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.94" {
                inherit profileName;
              }).out;
            quote =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.40" {
                inherit profileName;
              }).out;
            syn =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.100" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".either."1.15.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "either";
          version = "1.15.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "48c757948c5ede0e46177b7add2e67155f70e33c07fea8284df6576da70b3719";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "serde" ]
            [ "std" ]
          ];
          dependencies = {
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".elliptic-curve."0.12.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "elliptic-curve";
          version = "0.12.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "e7bb888ab5300a19b8e5bceef25ac745ad065f3c9f7efc6de1b91958110891d3";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "arithmetic" ]
            [ "digest" ]
            [ "ff" ]
            [ "group" ]
            [ "hazmat" ]
            [ "pkcs8" ]
            [ "sec1" ]
            [ "std" ]
          ];
          dependencies = {
            base16ct =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base16ct."0.1.1" {
                inherit profileName;
              }).out;
            crypto_bigint =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crypto-bigint."0.4.9" {
                inherit profileName;
              }).out;
            der =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".der."0.6.1" {
                inherit profileName;
              }).out;
            digest =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" {
                inherit profileName;
              }).out;
            ff =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ff."0.12.1" {
                inherit profileName;
              }).out;
            generic_array =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" {
                inherit profileName;
              }).out;
            group =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".group."0.12.1" {
                inherit profileName;
              }).out;
            pkcs8 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pkcs8."0.9.0" {
                inherit profileName;
              }).out;
            rand_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" {
                inherit profileName;
              }).out;
            sec1 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sec1."0.3.0" {
                inherit profileName;
              }).out;
            subtle =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.6.1" {
                inherit profileName;
              }).out;
            zeroize =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.8.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".enum-ordinalize."4.3.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "enum-ordinalize";
          version = "4.3.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "fea0dcfa4e54eeb516fe454635a95753ddd39acda650ce703031c6973e315dd5";
          };
          features = builtins.concatLists [
            [ "derive" ]
          ];
          dependencies = {
            enum_ordinalize_derive =
              (
                buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".enum-ordinalize-derive."4.3.1"
                { profileName = "__noProfile"; }
              ).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".enum-ordinalize-derive."4.3.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "enum-ordinalize-derive";
          version = "4.3.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "0d28318a75d4aead5c4db25382e8ef717932d0346600cacae6357eb5941bc5ff";
          };
          dependencies = {
            proc_macro2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.94" {
                inherit profileName;
              }).out;
            quote =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.40" {
                inherit profileName;
              }).out;
            syn =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.100" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".env_filter."0.1.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "env_filter";
          version = "0.1.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "186e05a59d4c50738528153b83b0b0194d3a29507dfec16eccd4b342903397d0";
          };
          features = builtins.concatLists [
            [ "regex" ]
          ];
          dependencies = {
            log =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.27" {
                inherit profileName;
              }).out;
            regex =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.11.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".env_logger."0.11.8" =
      overridableMkRustCrate
        (profileName: rec {
          name = "env_logger";
          version = "0.11.8";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "13c863f0904021b108aa8b2f55046443e6b1ebde8fd4a15c399893aae4fa069f";
          };
          features = builtins.concatLists [
            [ "auto-color" ]
            [ "color" ]
            [ "default" ]
            [ "humantime" ]
            [ "regex" ]
          ];
          dependencies = {
            anstream =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstream."0.6.18" {
                inherit profileName;
              }).out;
            anstyle =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anstyle."1.0.10" {
                inherit profileName;
              }).out;
            env_filter =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".env_filter."0.1.3" {
                inherit profileName;
              }).out;
            jiff =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".jiff."0.2.5" {
                inherit profileName;
              }).out;
            log =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.27" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".equivalent."1.0.2" =
      overridableMkRustCrate
        (profileName: rec {
          name = "equivalent";
          version = "1.0.2";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "877a4ace8713b0bcf2a4e7eec82529c029f1d0619886d18145fea96c3ffe5c0f";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".erased-serde."0.4.6" =
      overridableMkRustCrate
        (profileName: rec {
          name = "erased-serde";
          version = "0.4.6";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "e004d887f51fcb9fef17317a2f3525c887d8aa3f4f50fed920816a688284a5b7";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "default" ]
            [ "std" ]
          ];
          dependencies = {
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            typeid =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".typeid."1.0.3" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".errno."0.3.11" =
      overridableMkRustCrate
        (profileName: rec {
          name = "errno";
          version = "0.3.11";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "976dd42dc7e85965fe702eb8164f21f450704bdde31faefd6471dba214cb594e";
          };
          features = builtins.concatLists [
            [ "std" ]
          ];
          dependencies = {
            ${
              if
                hostPlatform.isUnix
                || hostPlatform.parsed.kernel.name == "hermit"
                || hostPlatform.parsed.kernel.name == "wasi"
              then
                "libc"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.171" {
                inherit profileName;
              }).out;
            ${if hostPlatform.isWindows then "windows_sys" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.59.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".etcetera."0.8.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "etcetera";
          version = "0.8.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "136d1b5283a1ab77bd9257427ffd09d8667ced0570b6f938942bc7568ed5b943";
          };
          dependencies = {
            cfg_if =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {
                inherit profileName;
              }).out;
            home =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".home."0.5.11" {
                inherit profileName;
              }).out;
            ${if hostPlatform.isWindows then "windows_sys" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".event-listener."5.4.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "event-listener";
          version = "5.4.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "3492acde4c3fc54c845eaab3eed8bd00c7a7d881f78bfc801e43a93dec1331ae";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "parking" ]
            [ "portable-atomic" ]
            [ "portable-atomic-util" ]
            [ "portable_atomic_crate" ]
            [ "std" ]
          ];
          dependencies = {
            concurrent_queue =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".concurrent-queue."2.5.0" {
                inherit profileName;
              }).out;
            parking =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking."2.2.1" {
                inherit profileName;
              }).out;
            pin_project_lite =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.16" {
                inherit profileName;
              }).out;
            portable_atomic_crate =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".portable-atomic."1.11.0" {
                inherit profileName;
              }).out;
            portable_atomic_util =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".portable-atomic-util."0.2.4" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".event-listener-strategy."0.5.4" =
      overridableMkRustCrate
        (profileName: rec {
          name = "event-listener-strategy";
          version = "0.5.4";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "8be9f3dfaaffdae2972880079a491a1a8bb7cbed0b8dd7a347f668b4150a3b93";
          };
          features = builtins.concatLists [
            [ "std" ]
          ];
          dependencies = {
            event_listener =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".event-listener."5.4.0" {
                inherit profileName;
              }).out;
            pin_project_lite =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.16" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".eyre."0.6.12" =
      overridableMkRustCrate
        (profileName: rec {
          name = "eyre";
          version = "0.6.12";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "7cd915d99f24784cdc19fd37ef22b97e3ff0ae756c7e492e9fbfe897d61e2aec";
          };
          features = builtins.concatLists [
            [ "auto-install" ]
            [ "default" ]
            [ "track-caller" ]
          ];
          dependencies = {
            indenter =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indenter."0.3.3" {
                inherit profileName;
              }).out;
            once_cell =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.21.3" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".fallible-iterator."0.2.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "fallible-iterator";
          version = "0.2.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "4443176a9f2c162692bd3d352d745ef9413eec5782a80d8fd6f8a1ac692a07f7";
          };
          features = builtins.concatLists [
            [ "std" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".fastrand."2.3.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "fastrand";
          version = "2.3.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "37909eebbb50d72f9059c3b6d82c0463f2ff062c9e95845c43a6c9c0355411be";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "default" ]
            [ "std" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".ff."0.12.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "ff";
          version = "0.12.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "d013fc25338cc558c5c2cfbad646908fb23591e2404481826742b651c9af7160";
          };
          dependencies = {
            rand_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" {
                inherit profileName;
              }).out;
            subtle =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.6.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".fiat-crypto."0.2.9" =
      overridableMkRustCrate
        (profileName: rec {
          name = "fiat-crypto";
          version = "0.2.9";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "28dea519a9695b9977216879a3ebfddf92f1c08c05d984f8996aecd6ecdc811d";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".filetime."0.2.25" =
      overridableMkRustCrate
        (profileName: rec {
          name = "filetime";
          version = "0.2.25";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "35c0522e981e68cbfa8c3f978441a5f34b30b96e146b33cd3359176b50fe8586";
          };
          dependencies = {
            cfg_if =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {
                inherit profileName;
              }).out;
            ${if hostPlatform.isUnix then "libc" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.171" {
                inherit profileName;
              }).out;
            ${if hostPlatform.parsed.kernel.name == "redox" then "libredox" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libredox."0.1.3" {
                inherit profileName;
              }).out;
            ${if hostPlatform.isWindows then "windows_sys" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.59.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".findshlibs."0.10.2" =
      overridableMkRustCrate
        (profileName: rec {
          name = "findshlibs";
          version = "0.10.2";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "40b9e59cd0f7e0806cca4be089683ecb6434e602038df21fe6bf6711b2f07f64";
          };
          dependencies = {
            ${
              if hostPlatform.parsed.kernel.name == "darwin" || hostPlatform.parsed.kernel.name == "ios" then
                "lazy_static"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.5.0" {
                inherit profileName;
              }).out;
            libc =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.171" {
                inherit profileName;
              }).out;
            ${if hostPlatform.parsed.kernel.name == "windows" then "winapi" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" {
                inherit profileName;
              }).out;
          };
          buildDependencies = {
            cc =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.2.17" {
                profileName = "__noProfile";
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".flate2."1.1.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "flate2";
          version = "1.1.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "7ced92e76e966ca2fd84c8f7aa01a4aea65b0eb6648d72f7c8f3e2764a67fece";
          };
          features = builtins.concatLists [
            [ "any_impl" ]
            [ "default" ]
            [ "miniz_oxide" ]
            [ "rust_backend" ]
          ];
          dependencies = {
            crc32fast =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc32fast."1.4.2" {
                inherit profileName;
              }).out;
            miniz_oxide =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.8.7" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".flume."0.11.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "flume";
          version = "0.11.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "da0e4dd2a88388a1f4ccc7c9ce104604dab68d9f408dc34cd45823d5a9069095";
          };
          features = builtins.concatLists [
            [ "async" ]
            [ "futures-core" ]
            [ "futures-sink" ]
          ];
          dependencies = {
            futures_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" {
                inherit profileName;
              }).out;
            futures_sink =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.31" {
                inherit profileName;
              }).out;
            spin1 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".spin."0.9.8" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" =
      overridableMkRustCrate
        (profileName: rec {
          name = "fnv";
          version = "1.0.7";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "std" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".foldhash."0.1.5" =
      overridableMkRustCrate
        (profileName: rec {
          name = "foldhash";
          version = "0.1.5";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "d9c4f5dac5e15c24eb999c26181a6ca40b39fe946cbe4c263c7209467bc83af2";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".form_urlencoded."1.2.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "form_urlencoded";
          version = "1.2.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "e13624c2627564efccf4934284bdd98cbaa14e79b0b5a141218e507b3a823456";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "default" ]
            [ "std" ]
          ];
          dependencies = {
            percent_encoding =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".fs_extra."1.3.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "fs_extra";
          version = "1.3.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "42703706b716c37f96a77aea830392ad231f44c9e9a67872fa5548707e11b11c";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".futures."0.3.31" =
      overridableMkRustCrate
        (profileName: rec {
          name = "futures";
          version = "0.3.31";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "65bc07b1a8bc7c85c5f2e110c476c7389b4554ba72af57d8445ea63a576b0876";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "async-await" ]
            [ "default" ]
            [ "executor" ]
            [ "futures-executor" ]
            [ "std" ]
          ];
          dependencies = {
            futures_channel =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.31" {
                inherit profileName;
              }).out;
            futures_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" {
                inherit profileName;
              }).out;
            futures_executor =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-executor."0.3.31" {
                inherit profileName;
              }).out;
            futures_io =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.31" {
                inherit profileName;
              }).out;
            futures_sink =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.31" {
                inherit profileName;
              }).out;
            futures_task =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-task."0.3.31" {
                inherit profileName;
              }).out;
            futures_util =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.31" =
      overridableMkRustCrate
        (profileName: rec {
          name = "futures-channel";
          version = "0.3.31";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "2dff15bf788c671c1934e366d07e30c1814a8ef514e1af724a602e8a2fbe1b10";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "default" ]
            [ "futures-sink" ]
            [ "sink" ]
            [ "std" ]
          ];
          dependencies = {
            futures_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" {
                inherit profileName;
              }).out;
            futures_sink =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.31" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" =
      overridableMkRustCrate
        (profileName: rec {
          name = "futures-core";
          version = "0.3.31";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "05f29059c0c2090612e8d742178b0580d2dc940c837851ad723096f87af6663e";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "default" ]
            [ "std" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".futures-executor."0.3.31" =
      overridableMkRustCrate
        (profileName: rec {
          name = "futures-executor";
          version = "0.3.31";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "1e28d1d997f585e54aebc3f97d39e72338912123a67330d723fdbb564d646c9f";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "std" ]
          ];
          dependencies = {
            futures_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" {
                inherit profileName;
              }).out;
            futures_task =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-task."0.3.31" {
                inherit profileName;
              }).out;
            futures_util =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".futures-intrusive."0.5.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "futures-intrusive";
          version = "0.5.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "1d930c203dd0b6ff06e0201a4a2fe9149b43c684fd4420555b26d21b1a02956f";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "default" ]
            [ "parking_lot" ]
            [ "std" ]
          ];
          dependencies = {
            futures_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" {
                inherit profileName;
              }).out;
            lock_api =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lock_api."0.4.12" {
                inherit profileName;
              }).out;
            parking_lot =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.3" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.31" =
      overridableMkRustCrate
        (profileName: rec {
          name = "futures-io";
          version = "0.3.31";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "9e5c1b78ca4aae1ac06c48a526a655760685149f0d465d21f37abfe57ce075c6";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "std" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".futures-lite."2.6.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "futures-lite";
          version = "2.6.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "f5edaec856126859abb19ed65f39e90fea3a9574b9707f13539acf4abf7eb532";
          };
          dependencies = {
            futures_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" {
                inherit profileName;
              }).out;
            pin_project_lite =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.16" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".futures-macro."0.3.31" =
      overridableMkRustCrate
        (profileName: rec {
          name = "futures-macro";
          version = "0.3.31";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "162ee34ebcb7c64a8abebc059ce0fee27c2262618d7b60ed8faf72fef13c3650";
          };
          dependencies = {
            proc_macro2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.94" {
                inherit profileName;
              }).out;
            quote =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.40" {
                inherit profileName;
              }).out;
            syn =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.100" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.31" =
      overridableMkRustCrate
        (profileName: rec {
          name = "futures-sink";
          version = "0.3.31";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "e575fab7d1e0dcb8d0c7bcf9a63ee213816ab51902e6d244a95819acacf1d4f7";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "default" ]
            [ "std" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".futures-task."0.3.31" =
      overridableMkRustCrate
        (profileName: rec {
          name = "futures-task";
          version = "0.3.31";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "f90f7dce0722e95104fcb095585910c0977252f286e354b5e3bd38902cd99988";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "std" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" =
      overridableMkRustCrate
        (profileName: rec {
          name = "futures-util";
          version = "0.3.31";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "9fa08315bb612088cc391249efdc3bc77536f16c91f6cf495e6fbe85b20a4a81";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "async-await" ]
            [ "async-await-macro" ]
            [ "channel" ]
            [ "default" ]
            [ "futures-channel" ]
            [ "futures-io" ]
            [ "futures-macro" ]
            [ "futures-sink" ]
            [ "io" ]
            [ "memchr" ]
            [ "sink" ]
            [ "slab" ]
            [ "std" ]
          ];
          dependencies = {
            futures_channel =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.31" {
                inherit profileName;
              }).out;
            futures_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" {
                inherit profileName;
              }).out;
            futures_io =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.31" {
                inherit profileName;
              }).out;
            futures_macro =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-macro."0.3.31" {
                profileName = "__noProfile";
              }).out;
            futures_sink =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.31" {
                inherit profileName;
              }).out;
            futures_task =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-task."0.3.31" {
                inherit profileName;
              }).out;
            memchr =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.4" {
                inherit profileName;
              }).out;
            pin_project_lite =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.16" {
                inherit profileName;
              }).out;
            pin_utils =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-utils."0.1.0" {
                inherit profileName;
              }).out;
            slab =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.9" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" =
      overridableMkRustCrate
        (profileName: rec {
          name = "generic-array";
          version = "0.14.7";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a";
          };
          features = builtins.concatLists [
            [ "more_lengths" ]
          ];
          dependencies = {
            typenum =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".typenum."1.18.0" {
                inherit profileName;
              }).out;
          };
          buildDependencies = {
            version_check =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.5" {
                profileName = "__noProfile";
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.15" =
      overridableMkRustCrate
        (profileName: rec {
          name = "getrandom";
          version = "0.2.15";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7";
          };
          features = builtins.concatLists [
            [ "js" ]
            [ "js-sys" ]
            [ "std" ]
            [ "wasm-bindgen" ]
          ];
          dependencies = {
            cfg_if =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {
                inherit profileName;
              }).out;
            ${
              if
                (hostPlatform.parsed.cpu.name == "wasm32" || hostPlatform.parsed.cpu.name == "wasm64")
                && hostPlatform.parsed.kernel.name == "unknown"
              then
                "js_sys"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.77" {
                inherit profileName;
              }).out;
            ${if hostPlatform.isUnix then "libc" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.171" {
                inherit profileName;
              }).out;
            ${if hostPlatform.parsed.kernel.name == "wasi" then "wasi" else null} =
              (
                rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasi."0.11.0+wasi-snapshot-preview1"
                { inherit profileName; }
              ).out;
            ${
              if
                (hostPlatform.parsed.cpu.name == "wasm32" || hostPlatform.parsed.cpu.name == "wasm64")
                && hostPlatform.parsed.kernel.name == "unknown"
              then
                "wasm_bindgen"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".getrandom."0.3.2" =
      overridableMkRustCrate
        (profileName: rec {
          name = "getrandom";
          version = "0.3.2";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "73fea8450eea4bac3940448fb7ae50d91f034f941199fcd9d909a5a07aa455f0";
          };
          features = builtins.concatLists [
            [ "std" ]
            [ "wasm_js" ]
          ];
          dependencies = {
            cfg_if =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {
                inherit profileName;
              }).out;
            ${
              if
                hostPlatform.parsed.cpu.name == "wasm32"
                && (hostPlatform.parsed.kernel.name == "unknown" || hostPlatform.parsed.kernel.name == "none")
                && builtins.elem "atomics" hostPlatformFeatures
              then
                "js_sys"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.77" {
                inherit profileName;
              }).out;
            ${
              if
                (hostPlatform.parsed.kernel.name == "linux" || hostPlatform.parsed.kernel.name == "android")
                && !(hostPlatform.parsed.kernel.name == "linux" && hostPlatform.parsed.abi.name == "")
                || hostPlatform.parsed.kernel.name == "dragonfly"
                || hostPlatform.parsed.kernel.name == "freebsd"
                || hostPlatform.parsed.kernel.name == "hurd"
                || hostPlatform.parsed.kernel.name == "illumos"
                || hostPlatform.parsed.kernel.name == "cygwin"
                ||
                  hostPlatform.parsed.kernel.name == "horizon"
                  && (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l")
                || hostPlatform.parsed.kernel.name == "haiku"
                || hostPlatform.parsed.kernel.name == "redox"
                || hostPlatform.parsed.kernel.name == "nto"
                || hostPlatform.parsed.kernel.name == "aix"
                || hostPlatform.parsed.kernel.name == "ios"
                || hostPlatform.parsed.kernel.name == "visionos"
                || hostPlatform.parsed.kernel.name == "watchos"
                || hostPlatform.parsed.kernel.name == "tvos"
                || hostPlatform.parsed.kernel.name == "darwin"
                || hostPlatform.parsed.kernel.name == "openbsd"
                || hostPlatform.parsed.kernel.name == "vita"
                || hostPlatform.parsed.kernel.name == "emscripten"
                || hostPlatform.parsed.kernel.name == "netbsd"
                || hostPlatform.parsed.kernel.name == "solaris"
                || hostPlatform.parsed.kernel.name == "vxworks"
              then
                "libc"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.171" {
                inherit profileName;
              }).out;
            ${if false then "r_efi" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".r-efi."5.2.0" {
                inherit profileName;
              }).out;
            ${
              if
                hostPlatform.parsed.cpu.name == "wasm32"
                && hostPlatform.parsed.kernel.name == "wasi"
                && hostPlatform.parsed.abi.name == "p2"
              then
                "wasi"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasi."0.14.2+wasi-0.2.4" {
                inherit profileName;
              }).out;
            ${
              if
                hostPlatform.parsed.cpu.name == "wasm32"
                && (hostPlatform.parsed.kernel.name == "unknown" || hostPlatform.parsed.kernel.name == "none")
              then
                "wasm_bindgen"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".gimli."0.26.2" =
      overridableMkRustCrate
        (profileName: rec {
          name = "gimli";
          version = "0.26.2";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "22030e2c5a68ec659fde1e949a745124b48e6fa8b045b7ed5bd1fe4ccc5c4e5d";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "endian-reader" ]
            [ "fallible-iterator" ]
            [ "indexmap" ]
            [ "read" ]
            [ "read-core" ]
            [ "stable_deref_trait" ]
            [ "std" ]
            [ "write" ]
          ];
          dependencies = {
            fallible_iterator =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fallible-iterator."0.2.0" {
                inherit profileName;
              }).out;
            indexmap =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."1.9.3" {
                inherit profileName;
              }).out;
            stable_deref_trait =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".stable_deref_trait."1.2.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".gimli."0.28.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "gimli";
          version = "0.28.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "4271d37baee1b8c7e4b708028c57d816cf9d2434acb33a549475f78c181f6253";
          };
          features = builtins.concatLists [
            [ "read" ]
            [ "read-core" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".glob."0.3.2" =
      overridableMkRustCrate
        (profileName: rec {
          name = "glob";
          version = "0.3.2";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "a8d1add55171497b4705a648c6b583acafb01d58050a51727785f0b2c8e0a2b2";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".gloo."0.8.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "gloo";
          version = "0.8.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "28999cda5ef6916ffd33fb4a7b87e1de633c47c0dc6d97905fee1cdaa142b94d";
          };
          features = builtins.concatLists [
            [ "console" ]
            [ "default" ]
            [ "dialogs" ]
            [ "events" ]
            [ "file" ]
            [ "gloo-console" ]
            [ "gloo-dialogs" ]
            [ "gloo-events" ]
            [ "gloo-file" ]
            [ "gloo-history" ]
            [ "gloo-net" ]
            [ "gloo-render" ]
            [ "gloo-storage" ]
            [ "gloo-timers" ]
            [ "gloo-utils" ]
            [ "gloo-worker" ]
            [ "history" ]
            [ "net" ]
            [ "render" ]
            [ "storage" ]
            [ "timers" ]
            [ "utils" ]
            [ "worker" ]
          ];
          dependencies = {
            gloo_console =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-console."0.2.3" {
                inherit profileName;
              }).out;
            gloo_dialogs =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-dialogs."0.1.1" {
                inherit profileName;
              }).out;
            gloo_events =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-events."0.1.2" {
                inherit profileName;
              }).out;
            gloo_file =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-file."0.2.3" {
                inherit profileName;
              }).out;
            gloo_history =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-history."0.1.5" {
                inherit profileName;
              }).out;
            gloo_net =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-net."0.3.1" {
                inherit profileName;
              }).out;
            gloo_render =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-render."0.1.1" {
                inherit profileName;
              }).out;
            gloo_storage =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-storage."0.2.2" {
                inherit profileName;
              }).out;
            gloo_timers =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-timers."0.2.6" {
                inherit profileName;
              }).out;
            gloo_utils =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-utils."0.1.7" {
                inherit profileName;
              }).out;
            gloo_worker =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-worker."0.2.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".gloo."0.10.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "gloo";
          version = "0.10.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "cd35526c28cc55c1db77aed6296de58677dbab863b118483a27845631d870249";
          };
          features = builtins.concatLists [
            [ "console" ]
            [ "default" ]
            [ "dialogs" ]
            [ "events" ]
            [ "file" ]
            [ "futures" ]
            [ "gloo-console" ]
            [ "gloo-dialogs" ]
            [ "gloo-events" ]
            [ "gloo-file" ]
            [ "gloo-history" ]
            [ "gloo-net" ]
            [ "gloo-render" ]
            [ "gloo-storage" ]
            [ "gloo-timers" ]
            [ "gloo-utils" ]
            [ "gloo-worker" ]
            [ "history" ]
            [ "net" ]
            [ "render" ]
            [ "storage" ]
            [ "timers" ]
            [ "utils" ]
            [ "worker" ]
          ];
          dependencies = {
            gloo_console =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-console."0.3.0" {
                inherit profileName;
              }).out;
            gloo_dialogs =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-dialogs."0.2.0" {
                inherit profileName;
              }).out;
            gloo_events =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-events."0.2.0" {
                inherit profileName;
              }).out;
            gloo_file =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-file."0.3.0" {
                inherit profileName;
              }).out;
            gloo_history =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-history."0.2.2" {
                inherit profileName;
              }).out;
            gloo_net =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-net."0.4.0" {
                inherit profileName;
              }).out;
            gloo_render =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-render."0.2.0" {
                inherit profileName;
              }).out;
            gloo_storage =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-storage."0.3.0" {
                inherit profileName;
              }).out;
            gloo_timers =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-timers."0.3.0" {
                inherit profileName;
              }).out;
            gloo_utils =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-utils."0.2.0" {
                inherit profileName;
              }).out;
            gloo_worker =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-worker."0.4.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".gloo-console."0.2.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "gloo-console";
          version = "0.2.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "82b7ce3c05debe147233596904981848862b068862e9ec3e34be446077190d3f";
          };
          dependencies = {
            gloo_utils =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-utils."0.1.7" {
                inherit profileName;
              }).out;
            js_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.77" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            wasm_bindgen =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" {
                inherit profileName;
              }).out;
            web_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.77" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".gloo-console."0.3.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "gloo-console";
          version = "0.3.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "2a17868f56b4a24f677b17c8cb69958385102fa879418052d60b50bc1727e261";
          };
          dependencies = {
            gloo_utils =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-utils."0.2.0" {
                inherit profileName;
              }).out;
            js_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.77" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            wasm_bindgen =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" {
                inherit profileName;
              }).out;
            web_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.77" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".gloo-dialogs."0.1.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "gloo-dialogs";
          version = "0.1.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "67062364ac72d27f08445a46cab428188e2e224ec9e37efdba48ae8c289002e6";
          };
          dependencies = {
            wasm_bindgen =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" {
                inherit profileName;
              }).out;
            web_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.77" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".gloo-dialogs."0.2.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "gloo-dialogs";
          version = "0.2.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "bf4748e10122b01435750ff530095b1217cf6546173459448b83913ebe7815df";
          };
          dependencies = {
            wasm_bindgen =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" {
                inherit profileName;
              }).out;
            web_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.77" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".gloo-events."0.1.2" =
      overridableMkRustCrate
        (profileName: rec {
          name = "gloo-events";
          version = "0.1.2";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "68b107f8abed8105e4182de63845afcc7b69c098b7852a813ea7462a320992fc";
          };
          dependencies = {
            wasm_bindgen =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" {
                inherit profileName;
              }).out;
            web_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.77" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".gloo-events."0.2.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "gloo-events";
          version = "0.2.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "27c26fb45f7c385ba980f5fa87ac677e363949e065a083722697ef1b2cc91e41";
          };
          dependencies = {
            wasm_bindgen =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" {
                inherit profileName;
              }).out;
            web_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.77" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".gloo-file."0.2.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "gloo-file";
          version = "0.2.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "a8d5564e570a38b43d78bdc063374a0c3098c4f0d64005b12f9bbe87e869b6d7";
          };
          features = builtins.concatLists [
            [ "default" ]
          ];
          dependencies = {
            gloo_events =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-events."0.1.2" {
                inherit profileName;
              }).out;
            js_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.77" {
                inherit profileName;
              }).out;
            wasm_bindgen =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" {
                inherit profileName;
              }).out;
            web_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.77" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".gloo-file."0.3.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "gloo-file";
          version = "0.3.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "97563d71863fb2824b2e974e754a81d19c4a7ec47b09ced8a0e6656b6d54bd1f";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "futures" ]
            [ "futures-channel" ]
          ];
          dependencies = {
            futures_channel =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.31" {
                inherit profileName;
              }).out;
            gloo_events =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-events."0.2.0" {
                inherit profileName;
              }).out;
            js_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.77" {
                inherit profileName;
              }).out;
            wasm_bindgen =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" {
                inherit profileName;
              }).out;
            web_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.77" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".gloo-history."0.1.5" =
      overridableMkRustCrate
        (profileName: rec {
          name = "gloo-history";
          version = "0.1.5";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "85725d90bf0ed47063b3930ef28e863658a7905989e9929a8708aab74a1d5e7f";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "query" ]
            [ "serde_urlencoded" ]
            [ "thiserror" ]
          ];
          dependencies = {
            gloo_events =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-events."0.1.2" {
                inherit profileName;
              }).out;
            gloo_utils =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-utils."0.1.7" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            serde_wasm_bindgen =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde-wasm-bindgen."0.5.0" {
                inherit profileName;
              }).out;
            serde_urlencoded =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_urlencoded."0.7.1" {
                inherit profileName;
              }).out;
            thiserror =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.69" {
                inherit profileName;
              }).out;
            wasm_bindgen =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" {
                inherit profileName;
              }).out;
            web_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.77" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".gloo-history."0.2.2" =
      overridableMkRustCrate
        (profileName: rec {
          name = "gloo-history";
          version = "0.2.2";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "903f432be5ba34427eac5e16048ef65604a82061fe93789f2212afc73d8617d6";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "query" ]
            [ "serde_urlencoded" ]
            [ "thiserror" ]
          ];
          dependencies = {
            ${if hostPlatform.parsed.cpu.name == "wasm32" then "getrandom" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.15" {
                inherit profileName;
              }).out;
            gloo_events =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-events."0.2.0" {
                inherit profileName;
              }).out;
            gloo_utils =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-utils."0.2.0" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            serde_wasm_bindgen =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde-wasm-bindgen."0.6.5" {
                inherit profileName;
              }).out;
            serde_urlencoded =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_urlencoded."0.7.1" {
                inherit profileName;
              }).out;
            thiserror =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.69" {
                inherit profileName;
              }).out;
            wasm_bindgen =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" {
                inherit profileName;
              }).out;
            web_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.77" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".gloo-net."0.3.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "gloo-net";
          version = "0.3.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "a66b4e3c7d9ed8d315fd6b97c8b1f74a7c6ecbbc2320e65ae7ed38b7068cc620";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "eventsource" ]
            [ "futures-channel" ]
            [ "futures-core" ]
            [ "futures-sink" ]
            [ "http" ]
            [ "json" ]
            [ "pin-project" ]
            [ "serde" ]
            [ "serde_json" ]
            [ "websocket" ]
          ];
          dependencies = {
            futures_channel =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.31" {
                inherit profileName;
              }).out;
            futures_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" {
                inherit profileName;
              }).out;
            futures_sink =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.31" {
                inherit profileName;
              }).out;
            gloo_utils =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-utils."0.1.7" {
                inherit profileName;
              }).out;
            http =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.12" {
                inherit profileName;
              }).out;
            js_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.77" {
                inherit profileName;
              }).out;
            pin_project =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.1.10" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            serde_json =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.140" {
                inherit profileName;
              }).out;
            thiserror =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.69" {
                inherit profileName;
              }).out;
            wasm_bindgen =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" {
                inherit profileName;
              }).out;
            wasm_bindgen_futures =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.50"
                { inherit profileName; }
              ).out;
            web_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.77" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".gloo-net."0.4.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "gloo-net";
          version = "0.4.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "8ac9e8288ae2c632fa9f8657ac70bfe38a1530f345282d7ba66a1f70b72b7dc4";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "eventsource" ]
            [ "futures-channel" ]
            [ "futures-core" ]
            [ "futures-sink" ]
            [ "http" ]
            [ "json" ]
            [ "pin-project" ]
            [ "serde" ]
            [ "serde_json" ]
            [ "websocket" ]
          ];
          dependencies = {
            futures_channel =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.31" {
                inherit profileName;
              }).out;
            futures_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" {
                inherit profileName;
              }).out;
            futures_sink =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.31" {
                inherit profileName;
              }).out;
            gloo_utils =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-utils."0.2.0" {
                inherit profileName;
              }).out;
            http =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.12" {
                inherit profileName;
              }).out;
            js_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.77" {
                inherit profileName;
              }).out;
            pin_project =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.1.10" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            serde_json =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.140" {
                inherit profileName;
              }).out;
            thiserror =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.69" {
                inherit profileName;
              }).out;
            wasm_bindgen =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" {
                inherit profileName;
              }).out;
            wasm_bindgen_futures =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.50"
                { inherit profileName; }
              ).out;
            web_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.77" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".gloo-net."0.6.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "gloo-net";
          version = "0.6.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "c06f627b1a58ca3d42b45d6104bf1e1a03799df472df00988b6ba21accc10580";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "eventsource" ]
            [ "futures-channel" ]
            [ "futures-core" ]
            [ "futures-sink" ]
            [ "http" ]
            [ "json" ]
            [ "pin-project" ]
            [ "serde" ]
            [ "serde_json" ]
            [ "websocket" ]
          ];
          dependencies = {
            futures_channel =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.31" {
                inherit profileName;
              }).out;
            futures_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" {
                inherit profileName;
              }).out;
            futures_sink =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.31" {
                inherit profileName;
              }).out;
            gloo_utils =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-utils."0.2.0" {
                inherit profileName;
              }).out;
            http =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.3.1" {
                inherit profileName;
              }).out;
            js_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.77" {
                inherit profileName;
              }).out;
            pin_project =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.1.10" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            serde_json =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.140" {
                inherit profileName;
              }).out;
            thiserror =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.69" {
                inherit profileName;
              }).out;
            wasm_bindgen =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" {
                inherit profileName;
              }).out;
            wasm_bindgen_futures =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.50"
                { inherit profileName; }
              ).out;
            web_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.77" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".gloo-render."0.1.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "gloo-render";
          version = "0.1.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "2fd9306aef67cfd4449823aadcd14e3958e0800aa2183955a309112a84ec7764";
          };
          dependencies = {
            wasm_bindgen =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" {
                inherit profileName;
              }).out;
            web_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.77" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".gloo-render."0.2.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "gloo-render";
          version = "0.2.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "56008b6744713a8e8d98ac3dcb7d06543d5662358c9c805b4ce2167ad4649833";
          };
          dependencies = {
            wasm_bindgen =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" {
                inherit profileName;
              }).out;
            web_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.77" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".gloo-storage."0.2.2" =
      overridableMkRustCrate
        (profileName: rec {
          name = "gloo-storage";
          version = "0.2.2";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "5d6ab60bf5dbfd6f0ed1f7843da31b41010515c745735c970e821945ca91e480";
          };
          dependencies = {
            gloo_utils =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-utils."0.1.7" {
                inherit profileName;
              }).out;
            js_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.77" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            serde_json =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.140" {
                inherit profileName;
              }).out;
            thiserror =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.69" {
                inherit profileName;
              }).out;
            wasm_bindgen =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" {
                inherit profileName;
              }).out;
            web_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.77" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".gloo-storage."0.3.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "gloo-storage";
          version = "0.3.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "fbc8031e8c92758af912f9bc08fbbadd3c6f3cfcbf6b64cdf3d6a81f0139277a";
          };
          dependencies = {
            gloo_utils =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-utils."0.2.0" {
                inherit profileName;
              }).out;
            js_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.77" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            serde_json =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.140" {
                inherit profileName;
              }).out;
            thiserror =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.69" {
                inherit profileName;
              }).out;
            wasm_bindgen =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" {
                inherit profileName;
              }).out;
            web_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.77" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".gloo-timers."0.2.6" =
      overridableMkRustCrate
        (profileName: rec {
          name = "gloo-timers";
          version = "0.2.6";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "9b995a66bb87bebce9a0f4a95aed01daca4872c050bfcb21653361c03bc35e5c";
          };
          features = builtins.concatLists [
            [ "default" ]
          ];
          dependencies = {
            js_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.77" {
                inherit profileName;
              }).out;
            wasm_bindgen =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".gloo-timers."0.3.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "gloo-timers";
          version = "0.3.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "bbb143cf96099802033e0d4f4963b19fd2e0b728bcf076cd9cf7f6634f092994";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "futures" ]
            [ "futures-channel" ]
            [ "futures-core" ]
          ];
          dependencies = {
            futures_channel =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.31" {
                inherit profileName;
              }).out;
            futures_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" {
                inherit profileName;
              }).out;
            js_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.77" {
                inherit profileName;
              }).out;
            wasm_bindgen =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".gloo-utils."0.1.7" =
      overridableMkRustCrate
        (profileName: rec {
          name = "gloo-utils";
          version = "0.1.7";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "037fcb07216cb3a30f7292bd0176b050b7b9a052ba830ef7d5d65f6dc64ba58e";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "serde" ]
          ];
          dependencies = {
            js_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.77" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            serde_json =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.140" {
                inherit profileName;
              }).out;
            wasm_bindgen =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" {
                inherit profileName;
              }).out;
            web_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.77" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".gloo-utils."0.2.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "gloo-utils";
          version = "0.2.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "0b5555354113b18c547c1d3a98fbf7fb32a9ff4f6fa112ce823a21641a0ba3aa";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "serde" ]
          ];
          dependencies = {
            js_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.77" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            serde_json =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.140" {
                inherit profileName;
              }).out;
            wasm_bindgen =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" {
                inherit profileName;
              }).out;
            web_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.77" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".gloo-worker."0.2.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "gloo-worker";
          version = "0.2.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "13471584da78061a28306d1359dd0178d8d6fc1c7c80e5e35d27260346e0516a";
          };
          features = builtins.concatLists [
            [ "default" ]
          ];
          dependencies = {
            anymap2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anymap2."0.13.0" {
                inherit profileName;
              }).out;
            bincode =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bincode."1.3.3" {
                inherit profileName;
              }).out;
            gloo_console =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-console."0.2.3" {
                inherit profileName;
              }).out;
            gloo_utils =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-utils."0.1.7" {
                inherit profileName;
              }).out;
            js_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.77" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            wasm_bindgen =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" {
                inherit profileName;
              }).out;
            wasm_bindgen_futures =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.50"
                { inherit profileName; }
              ).out;
            web_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.77" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".gloo-worker."0.4.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "gloo-worker";
          version = "0.4.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "76495d3dd87de51da268fa3a593da118ab43eb7f8809e17eb38d3319b424e400";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "futures" ]
          ];
          dependencies = {
            bincode =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bincode."1.3.3" {
                inherit profileName;
              }).out;
            futures =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.31" {
                inherit profileName;
              }).out;
            gloo_utils =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-utils."0.2.0" {
                inherit profileName;
              }).out;
            gloo_worker_macros =
              (
                buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo-worker-macros."0.1.0"
                { profileName = "__noProfile"; }
              ).out;
            js_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.77" {
                inherit profileName;
              }).out;
            pinned =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pinned."0.1.0" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            thiserror =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.69" {
                inherit profileName;
              }).out;
            wasm_bindgen =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" {
                inherit profileName;
              }).out;
            wasm_bindgen_futures =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.50"
                { inherit profileName; }
              ).out;
            web_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.77" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".gloo-worker-macros."0.1.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "gloo-worker-macros";
          version = "0.1.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "956caa58d4857bc9941749d55e4bd3000032d8212762586fa5705632967140e7";
          };
          dependencies = {
            proc_macro_crate =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.3.1" {
                inherit profileName;
              }).out;
            proc_macro2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.94" {
                inherit profileName;
              }).out;
            quote =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.40" {
                inherit profileName;
              }).out;
            syn =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.100" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".group."0.12.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "group";
          version = "0.12.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "5dfbfb3a6cfbd390d5c9564ab283a0349b9b9fcd46a706c1eb10e0db70bfbac7";
          };
          dependencies = {
            ff =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ff."0.12.1" {
                inherit profileName;
              }).out;
            rand_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" {
                inherit profileName;
              }).out;
            subtle =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.6.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".h2."0.3.26" =
      overridableMkRustCrate
        (profileName: rec {
          name = "h2";
          version = "0.3.26";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "81fe527a889e1532da5c525686d96d4c2e74cdd345badf8dfef9f6b39dd5f5e8";
          };
          dependencies = {
            bytes =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.10.1" {
                inherit profileName;
              }).out;
            fnv =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" {
                inherit profileName;
              }).out;
            futures_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" {
                inherit profileName;
              }).out;
            futures_sink =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.31" {
                inherit profileName;
              }).out;
            futures_util =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" {
                inherit profileName;
              }).out;
            http =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.12" {
                inherit profileName;
              }).out;
            indexmap =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."2.8.0" {
                inherit profileName;
              }).out;
            slab =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.9" {
                inherit profileName;
              }).out;
            tokio =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.44.1" {
                inherit profileName;
              }).out;
            tokio_util =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-util."0.7.14" {
                inherit profileName;
              }).out;
            tracing =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".h2."0.4.8" =
      overridableMkRustCrate
        (profileName: rec {
          name = "h2";
          version = "0.4.8";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "5017294ff4bb30944501348f6f8e42e6ad28f42c8bbef7a74029aff064a4e3c2";
          };
          dependencies = {
            atomic_waker =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".atomic-waker."1.1.2" {
                inherit profileName;
              }).out;
            bytes =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.10.1" {
                inherit profileName;
              }).out;
            fnv =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" {
                inherit profileName;
              }).out;
            futures_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" {
                inherit profileName;
              }).out;
            futures_sink =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.31" {
                inherit profileName;
              }).out;
            http =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.3.1" {
                inherit profileName;
              }).out;
            indexmap =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."2.8.0" {
                inherit profileName;
              }).out;
            slab =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.9" {
                inherit profileName;
              }).out;
            tokio =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.44.1" {
                inherit profileName;
              }).out;
            tokio_util =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-util."0.7.14" {
                inherit profileName;
              }).out;
            tracing =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.12.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "hashbrown";
          version = "0.12.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "8a9ee70c43aaf417c914396645a0fa852624801b24ebb7ae78fe8272889ac888";
          };
          features = builtins.concatLists [
            [ "raw" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.14.5" =
      overridableMkRustCrate
        (profileName: rec {
          name = "hashbrown";
          version = "0.14.5";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1";
          };
          features = builtins.concatLists [
            [ "ahash" ]
            [ "raw" ]
            [ "serde" ]
          ];
          dependencies = {
            ahash =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.8.11" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.15.2" =
      overridableMkRustCrate
        (profileName: rec {
          name = "hashbrown";
          version = "0.15.2";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "bf151400ff0baff5465007dd2f3e717f3fe502074ca563069ce3a6629d07b289";
          };
          features = builtins.concatLists [
            [ "allocator-api2" ]
            [ "default" ]
            [ "default-hasher" ]
            [ "equivalent" ]
            [ "inline-more" ]
            [ "raw-entry" ]
          ];
          dependencies = {
            allocator_api2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".allocator-api2."0.2.21" {
                inherit profileName;
              }).out;
            equivalent =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".equivalent."1.0.2" {
                inherit profileName;
              }).out;
            foldhash =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".foldhash."0.1.5" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".hashlink."0.10.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "hashlink";
          version = "0.10.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "7382cf6263419f2d8df38c55d7da83da5c18aef87fc7a7fc1fb1e344edfe14c1";
          };
          dependencies = {
            hashbrown =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.15.2" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".heck."0.5.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "heck";
          version = "0.5.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "2304e00983f87ffb38b55b444b5e3b60a884b5d30c0fca7d82fe33449bbe55ea";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.3.9" =
      overridableMkRustCrate
        (profileName: rec {
          name = "hermit-abi";
          version = "0.3.9";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "d231dfb89cfffdbc30e7fc41579ed6066ad03abda9e567ccafae602b97ec5024";
          };
          features = builtins.concatLists [
            [ "default" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.4.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "hermit-abi";
          version = "0.4.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "fbf6a919d6cf397374f7dfeeea91d974c7c0a7221d0d0f4f20d859d329e53fcc";
          };
          features = builtins.concatLists [
            [ "default" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "hex";
          version = "0.4.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "default" ]
            [ "std" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".hkdf."0.12.4" =
      overridableMkRustCrate
        (profileName: rec {
          name = "hkdf";
          version = "0.12.4";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "7b5f8eb2ad728638ea2c7d47a21db23b7b58a72ed6a38256b8a1849f15fbbdf7";
          };
          dependencies = {
            hmac =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hmac."0.12.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".hmac."0.12.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "hmac";
          version = "0.12.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "6c49c37c09c17a53d937dfbb742eb3a961d65a994e6bcdcf37e7399d0cc8ab5e";
          };
          features = builtins.concatLists [
            [ "reset" ]
          ];
          dependencies = {
            digest =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".home."0.5.11" =
      overridableMkRustCrate
        (profileName: rec {
          name = "home";
          version = "0.5.11";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "589533453244b0995c858700322199b2becb13b627df2851f64a2775d024abcf";
          };
          dependencies = {
            ${if hostPlatform.isWindows then "windows_sys" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.59.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".hostname."0.4.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "hostname";
          version = "0.4.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "f9c7c7c8ac16c798734b8a24560c1362120597c40d5e1459f09498f8f6c8f2ba";
          };
          features = builtins.concatLists [
            [ "default" ]
          ];
          dependencies = {
            cfg_if =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {
                inherit profileName;
              }).out;
            ${if hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "redox" then "libc" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.171" {
                inherit profileName;
              }).out;
            ${if hostPlatform.parsed.kernel.name == "windows" then "windows" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows."0.52.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".http."0.2.12" =
      overridableMkRustCrate
        (profileName: rec {
          name = "http";
          version = "0.2.12";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "601cbb57e577e2f5ef5be8e7b83f0f63994f25aa94d673e54a92d5c516d101f1";
          };
          dependencies = {
            bytes =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.10.1" {
                inherit profileName;
              }).out;
            fnv =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" {
                inherit profileName;
              }).out;
            itoa =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.15" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".http."1.3.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "http";
          version = "1.3.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "f4a85d31aea989eead29a3aaf9e1115a180df8282431156e533de47660892565";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "std" ]
          ];
          dependencies = {
            bytes =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.10.1" {
                inherit profileName;
              }).out;
            fnv =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fnv."1.0.7" {
                inherit profileName;
              }).out;
            itoa =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.15" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".http-body."0.4.6" =
      overridableMkRustCrate
        (profileName: rec {
          name = "http-body";
          version = "0.4.6";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "7ceab25649e9960c0311ea418d17bee82c0dcec1bd053b5f9a66e265a693bed2";
          };
          dependencies = {
            bytes =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.10.1" {
                inherit profileName;
              }).out;
            http =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.12" {
                inherit profileName;
              }).out;
            pin_project_lite =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.16" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".http-body."1.0.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "http-body";
          version = "1.0.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "1efedce1fb8e6913f23e0c92de8e62cd5b772a67e7b3946df930a62566c93184";
          };
          dependencies = {
            bytes =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.10.1" {
                inherit profileName;
              }).out;
            http =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.3.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".http-body-util."0.1.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "http-body-util";
          version = "0.1.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "b021d93e26becf5dc7e1b75b1bed1fd93124b374ceb73f43d4d4eafec896a64a";
          };
          features = builtins.concatLists [
            [ "default" ]
          ];
          dependencies = {
            bytes =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.10.1" {
                inherit profileName;
              }).out;
            futures_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" {
                inherit profileName;
              }).out;
            http =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.3.1" {
                inherit profileName;
              }).out;
            http_body =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body."1.0.1" {
                inherit profileName;
              }).out;
            pin_project_lite =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.16" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".httparse."1.10.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "httparse";
          version = "1.10.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "6dbf3de79e51f3d586ab4cb9d5c3e2c14aa28ed23d180cf89b4df0454a69cc87";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "std" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".httpdate."1.0.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "httpdate";
          version = "1.0.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "df3b46402a9d5adb4c86a0cf463f42e19994e3ee891101b1841f30a545cb49a9";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".hyper."0.14.32" =
      overridableMkRustCrate
        (profileName: rec {
          name = "hyper";
          version = "0.14.32";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "41dfc780fdec9373c01bae43289ea34c972e40ee3c9f6b3c8801a35f35586ce7";
          };
          features = builtins.concatLists [
            [ "client" ]
            [ "h2" ]
            [ "http1" ]
            [ "http2" ]
            [ "runtime" ]
            [ "server" ]
            [ "socket2" ]
            [ "stream" ]
            [ "tcp" ]
          ];
          dependencies = {
            bytes =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.10.1" {
                inherit profileName;
              }).out;
            futures_channel =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.31" {
                inherit profileName;
              }).out;
            futures_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" {
                inherit profileName;
              }).out;
            futures_util =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" {
                inherit profileName;
              }).out;
            h2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".h2."0.3.26" {
                inherit profileName;
              }).out;
            http =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.12" {
                inherit profileName;
              }).out;
            http_body =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body."0.4.6" {
                inherit profileName;
              }).out;
            httparse =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".httparse."1.10.1" {
                inherit profileName;
              }).out;
            httpdate =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".httpdate."1.0.3" {
                inherit profileName;
              }).out;
            itoa =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.15" {
                inherit profileName;
              }).out;
            pin_project_lite =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.16" {
                inherit profileName;
              }).out;
            socket2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.5.9" {
                inherit profileName;
              }).out;
            tokio =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.44.1" {
                inherit profileName;
              }).out;
            tower_service =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-service."0.3.3" {
                inherit profileName;
              }).out;
            tracing =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" {
                inherit profileName;
              }).out;
            want =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".want."0.3.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".hyper."1.6.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "hyper";
          version = "1.6.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "cc2b571658e38e0c01b1fdca3bbbe93c00d3d71693ff2770043f8c29bc7d6f80";
          };
          features = builtins.concatLists [
            [ "client" ]
            [ "default" ]
            [ "http1" ]
            [ "http2" ]
            [ "server" ]
          ];
          dependencies = {
            bytes =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.10.1" {
                inherit profileName;
              }).out;
            futures_channel =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.31" {
                inherit profileName;
              }).out;
            futures_util =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" {
                inherit profileName;
              }).out;
            h2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".h2."0.4.8" {
                inherit profileName;
              }).out;
            http =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.3.1" {
                inherit profileName;
              }).out;
            http_body =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body."1.0.1" {
                inherit profileName;
              }).out;
            httparse =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".httparse."1.10.1" {
                inherit profileName;
              }).out;
            httpdate =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".httpdate."1.0.3" {
                inherit profileName;
              }).out;
            itoa =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.15" {
                inherit profileName;
              }).out;
            pin_project_lite =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.16" {
                inherit profileName;
              }).out;
            smallvec =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.14.0" {
                inherit profileName;
              }).out;
            tokio =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.44.1" {
                inherit profileName;
              }).out;
            want =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".want."0.3.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".hyper-rustls."0.24.2" =
      overridableMkRustCrate
        (profileName: rec {
          name = "hyper-rustls";
          version = "0.24.2";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "ec3efd23720e2049821a693cbc7e65ea87c72f1c58ff2f9522ff332b1491e590";
          };
          features = builtins.concatLists [
            [ "acceptor" ]
            [ "default" ]
            [ "http1" ]
            [ "http2" ]
            [ "log" ]
            [ "logging" ]
            [ "native-tokio" ]
            [ "rustls-native-certs" ]
            [ "tls12" ]
            [ "tokio-runtime" ]
          ];
          dependencies = {
            futures_util =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" {
                inherit profileName;
              }).out;
            http =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."0.2.12" {
                inherit profileName;
              }).out;
            hyper =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper."0.14.32" {
                inherit profileName;
              }).out;
            log =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.27" {
                inherit profileName;
              }).out;
            rustls =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.21.12" {
                inherit profileName;
              }).out;
            rustls_native_certs =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-native-certs."0.6.3" {
                inherit profileName;
              }).out;
            tokio =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.44.1" {
                inherit profileName;
              }).out;
            tokio_rustls =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-rustls."0.24.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".hyper-rustls."0.27.5" =
      overridableMkRustCrate
        (profileName: rec {
          name = "hyper-rustls";
          version = "0.27.5";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "2d191583f3da1305256f22463b9bb0471acad48a4e534a5218b9963e9c1f59b2";
          };
          features = builtins.concatLists [
            [ "http1" ]
            [ "http2" ]
            [ "native-tokio" ]
            [ "ring" ]
            [ "rustls-native-certs" ]
            [ "tls12" ]
            [ "webpki-roots" ]
            [ "webpki-tokio" ]
          ];
          dependencies = {
            futures_util =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" {
                inherit profileName;
              }).out;
            http =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.3.1" {
                inherit profileName;
              }).out;
            hyper =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper."1.6.0" {
                inherit profileName;
              }).out;
            hyper_util =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper-util."0.1.11" {
                inherit profileName;
              }).out;
            rustls =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.23.25" {
                inherit profileName;
              }).out;
            rustls_native_certs =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-native-certs."0.8.1" {
                inherit profileName;
              }).out;
            pki_types =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pki-types."1.11.0" {
                inherit profileName;
              }).out;
            tokio =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.44.1" {
                inherit profileName;
              }).out;
            tokio_rustls =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-rustls."0.26.2" {
                inherit profileName;
              }).out;
            tower_service =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-service."0.3.3" {
                inherit profileName;
              }).out;
            webpki_roots =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webpki-roots."0.26.8" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".hyper-util."0.1.11" =
      overridableMkRustCrate
        (profileName: rec {
          name = "hyper-util";
          version = "0.1.11";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "497bbc33a26fdd4af9ed9c70d63f61cf56a938375fbb32df34db9b1cd6d643f2";
          };
          features = builtins.concatLists [
            [ "client" ]
            [ "client-legacy" ]
            [ "default" ]
            [ "http1" ]
            [ "http2" ]
            [ "server" ]
            [ "service" ]
            [ "tokio" ]
          ];
          dependencies = {
            bytes =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.10.1" {
                inherit profileName;
              }).out;
            futures_channel =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.31" {
                inherit profileName;
              }).out;
            futures_util =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" {
                inherit profileName;
              }).out;
            http =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.3.1" {
                inherit profileName;
              }).out;
            http_body =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body."1.0.1" {
                inherit profileName;
              }).out;
            hyper =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper."1.6.0" {
                inherit profileName;
              }).out;
            libc =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.171" {
                inherit profileName;
              }).out;
            pin_project_lite =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.16" {
                inherit profileName;
              }).out;
            socket2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.5.9" {
                inherit profileName;
              }).out;
            tokio =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.44.1" {
                inherit profileName;
              }).out;
            tower_service =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-service."0.3.3" {
                inherit profileName;
              }).out;
            tracing =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".iana-time-zone."0.1.63" =
      overridableMkRustCrate
        (profileName: rec {
          name = "iana-time-zone";
          version = "0.1.63";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "b0c919e5debc312ad217002b8048a17b7d83f80703865bbfcfebb0458b0b27d8";
          };
          features = builtins.concatLists [
            [ "fallback" ]
          ];
          dependencies = {
            ${if hostPlatform.parsed.kernel.name == "android" then "android_system_properties" else null} =
              (
                rustPackages."registry+https://github.com/rust-lang/crates.io-index".android_system_properties."0.1.5"
                { inherit profileName; }
              ).out;
            ${if hostPlatform.parsed.vendor.name == "apple" then "core_foundation_sys" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.7" {
                inherit profileName;
              }).out;
            ${if hostPlatform.parsed.kernel.name == "haiku" then "iana_time_zone_haiku" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".iana-time-zone-haiku."0.1.2" {
                inherit profileName;
              }).out;
            ${
              if hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.kernel.name == "unknown" then
                "js_sys"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.77" {
                inherit profileName;
              }).out;
            ${
              if hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.kernel.name == "unknown" then
                "log"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.27" {
                inherit profileName;
              }).out;
            ${
              if hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.kernel.name == "unknown" then
                "wasm_bindgen"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" {
                inherit profileName;
              }).out;
            ${if hostPlatform.parsed.kernel.name == "windows" then "windows_core" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-core."0.61.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".iana-time-zone-haiku."0.1.2" =
      overridableMkRustCrate
        (profileName: rec {
          name = "iana-time-zone-haiku";
          version = "0.1.2";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f";
          };
          buildDependencies = {
            cc =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.2.17" {
                profileName = "__noProfile";
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".icu_collections."1.5.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "icu_collections";
          version = "1.5.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "db2fa452206ebee18c4b5c2274dbf1de17008e874b4dc4f0aea9d01ca79e4526";
          };
          dependencies = {
            displaydoc =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".displaydoc."0.2.5" {
                profileName = "__noProfile";
              }).out;
            yoke =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".yoke."0.7.5" {
                inherit profileName;
              }).out;
            zerofrom =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zerofrom."0.1.6" {
                inherit profileName;
              }).out;
            zerovec =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zerovec."0.10.4" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".icu_locid."1.5.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "icu_locid";
          version = "1.5.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "13acbb8371917fc971be86fc8057c41a64b521c184808a698c02acc242dbf637";
          };
          features = builtins.concatLists [
            [ "zerovec" ]
          ];
          dependencies = {
            displaydoc =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".displaydoc."0.2.5" {
                profileName = "__noProfile";
              }).out;
            litemap =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".litemap."0.7.5" {
                inherit profileName;
              }).out;
            tinystr =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinystr."0.7.6" {
                inherit profileName;
              }).out;
            writeable =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".writeable."0.5.5" {
                inherit profileName;
              }).out;
            zerovec =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zerovec."0.10.4" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".icu_locid_transform."1.5.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "icu_locid_transform";
          version = "1.5.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "01d11ac35de8e40fdeda00d9e1e9d92525f3f9d887cdd7aa81d727596788b54e";
          };
          features = builtins.concatLists [
            [ "compiled_data" ]
          ];
          dependencies = {
            displaydoc =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".displaydoc."0.2.5" {
                profileName = "__noProfile";
              }).out;
            icu_locid =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".icu_locid."1.5.0" {
                inherit profileName;
              }).out;
            icu_locid_transform_data =
              (
                rustPackages."registry+https://github.com/rust-lang/crates.io-index".icu_locid_transform_data."1.5.1"
                { inherit profileName; }
              ).out;
            icu_provider =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".icu_provider."1.5.0" {
                inherit profileName;
              }).out;
            tinystr =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinystr."0.7.6" {
                inherit profileName;
              }).out;
            zerovec =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zerovec."0.10.4" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".icu_locid_transform_data."1.5.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "icu_locid_transform_data";
          version = "1.5.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "7515e6d781098bf9f7205ab3fc7e9709d34554ae0b21ddbcb5febfa4bc7df11d";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".icu_normalizer."1.5.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "icu_normalizer";
          version = "1.5.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "19ce3e0da2ec68599d193c93d088142efd7f9c5d6fc9b803774855747dc6a84f";
          };
          features = builtins.concatLists [
            [ "compiled_data" ]
            [ "default" ]
          ];
          dependencies = {
            displaydoc =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".displaydoc."0.2.5" {
                profileName = "__noProfile";
              }).out;
            icu_collections =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".icu_collections."1.5.0" {
                inherit profileName;
              }).out;
            icu_normalizer_data =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".icu_normalizer_data."1.5.1" {
                inherit profileName;
              }).out;
            icu_properties =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".icu_properties."1.5.1" {
                inherit profileName;
              }).out;
            icu_provider =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".icu_provider."1.5.0" {
                inherit profileName;
              }).out;
            smallvec =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.14.0" {
                inherit profileName;
              }).out;
            utf16_iter =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".utf16_iter."1.0.5" {
                inherit profileName;
              }).out;
            utf8_iter =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".utf8_iter."1.0.4" {
                inherit profileName;
              }).out;
            write16 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".write16."1.0.0" {
                inherit profileName;
              }).out;
            zerovec =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zerovec."0.10.4" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".icu_normalizer_data."1.5.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "icu_normalizer_data";
          version = "1.5.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "c5e8338228bdc8ab83303f16b797e177953730f601a96c25d10cb3ab0daa0cb7";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".icu_properties."1.5.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "icu_properties";
          version = "1.5.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "93d6020766cfc6302c15dbbc9c8778c37e62c14427cb7f6e601d849e092aeef5";
          };
          features = builtins.concatLists [
            [ "compiled_data" ]
            [ "default" ]
          ];
          dependencies = {
            displaydoc =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".displaydoc."0.2.5" {
                profileName = "__noProfile";
              }).out;
            icu_collections =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".icu_collections."1.5.0" {
                inherit profileName;
              }).out;
            icu_locid_transform =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".icu_locid_transform."1.5.0" {
                inherit profileName;
              }).out;
            icu_properties_data =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".icu_properties_data."1.5.1" {
                inherit profileName;
              }).out;
            icu_provider =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".icu_provider."1.5.0" {
                inherit profileName;
              }).out;
            tinystr =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinystr."0.7.6" {
                inherit profileName;
              }).out;
            zerovec =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zerovec."0.10.4" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".icu_properties_data."1.5.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "icu_properties_data";
          version = "1.5.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "85fb8799753b75aee8d2a21d7c14d9f38921b54b3dbda10f5a3c7a7b82dba5e2";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".icu_provider."1.5.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "icu_provider";
          version = "1.5.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "6ed421c8a8ef78d3e2dbc98a973be2f3770cb42b606e3ab18d6237c4dfde68d9";
          };
          features = builtins.concatLists [
            [ "macros" ]
          ];
          dependencies = {
            displaydoc =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".displaydoc."0.2.5" {
                profileName = "__noProfile";
              }).out;
            icu_locid =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".icu_locid."1.5.0" {
                inherit profileName;
              }).out;
            icu_provider_macros =
              (
                buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".icu_provider_macros."1.5.0"
                { profileName = "__noProfile"; }
              ).out;
            stable_deref_trait =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".stable_deref_trait."1.2.0" {
                inherit profileName;
              }).out;
            tinystr =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinystr."0.7.6" {
                inherit profileName;
              }).out;
            writeable =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".writeable."0.5.5" {
                inherit profileName;
              }).out;
            yoke =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".yoke."0.7.5" {
                inherit profileName;
              }).out;
            zerofrom =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zerofrom."0.1.6" {
                inherit profileName;
              }).out;
            zerovec =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zerovec."0.10.4" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".icu_provider_macros."1.5.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "icu_provider_macros";
          version = "1.5.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "1ec89e9337638ecdc08744df490b221a7399bf8d164eb52a665454e60e075ad6";
          };
          dependencies = {
            proc_macro2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.94" {
                inherit profileName;
              }).out;
            quote =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.40" {
                inherit profileName;
              }).out;
            syn =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.100" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".id-arena."2.2.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "id-arena";
          version = "2.2.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "25a2bc672d1148e28034f176e01fffebb08b35768468cc954630da77a1449005";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "rayon" ]
            [ "std" ]
          ];
          dependencies = {
            rayon =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rayon."1.10.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".idna."1.0.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "idna";
          version = "1.0.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "686f825264d630750a544639377bae737628043f20d38bbc029e8f29ea968a7e";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "compiled_data" ]
            [ "std" ]
          ];
          dependencies = {
            idna_adapter =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".idna_adapter."1.2.0" {
                inherit profileName;
              }).out;
            smallvec =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.14.0" {
                inherit profileName;
              }).out;
            utf8_iter =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".utf8_iter."1.0.4" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".idna_adapter."1.2.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "idna_adapter";
          version = "1.2.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "daca1df1c957320b2cf139ac61e7bd64fed304c5040df000a745aa1de3b4ef71";
          };
          features = builtins.concatLists [
            [ "compiled_data" ]
          ];
          dependencies = {
            icu_normalizer =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".icu_normalizer."1.5.0" {
                inherit profileName;
              }).out;
            icu_properties =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".icu_properties."1.5.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".implicit-clone."0.4.9" =
      overridableMkRustCrate
        (profileName: rec {
          name = "implicit-clone";
          version = "0.4.9";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "f8a9aa791c7b5a71b636b7a68207fdebf171ddfc593d9c8506ec4cbc527b6a84";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "derive" ]
            [ "implicit-clone-derive" ]
            [ "indexmap" ]
            [ "map" ]
          ];
          dependencies = {
            implicit_clone_derive =
              (
                buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".implicit-clone-derive."0.1.2"
                { profileName = "__noProfile"; }
              ).out;
            indexmap =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."2.8.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".implicit-clone-derive."0.1.2" =
      overridableMkRustCrate
        (profileName: rec {
          name = "implicit-clone-derive";
          version = "0.1.2";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "699c1b6d335e63d0ba5c1e1c7f647371ce989c3bcbe1f7ed2b85fa56e3bd1a21";
          };
          dependencies = {
            quote =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.40" {
                inherit profileName;
              }).out;
            syn =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.100" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".indenter."0.3.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "indenter";
          version = "0.3.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "ce23b50ad8242c51a442f3ff322d56b02f08852c77e4c0b4d3fd684abc89c683";
          };
          features = builtins.concatLists [
            [ "default" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".indexmap."1.9.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "indexmap";
          version = "1.9.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "bd070e393353796e801d209ad339e89596eb4c8d430d18ede6a1cced8fafbd99";
          };
          dependencies = {
            hashbrown =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.12.3" {
                inherit profileName;
              }).out;
          };
          buildDependencies = {
            autocfg =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.4.0" {
                profileName = "__noProfile";
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".indexmap."2.8.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "indexmap";
          version = "2.8.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "3954d50fe15b02142bf25d3b8bdadb634ec3948f103d04ffe3031bc8fe9d7058";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "serde" ]
            [ "std" ]
          ];
          dependencies = {
            equivalent =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".equivalent."1.0.2" {
                inherit profileName;
              }).out;
            hashbrown =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.15.2" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".inout."0.1.4" =
      overridableMkRustCrate
        (profileName: rec {
          name = "inout";
          version = "0.1.4";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "879f10e63c20629ecabbb64a8010319738c66a5cd0c29b02d63d272b03751d01";
          };
          dependencies = {
            generic_array =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".ipnet."2.11.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "ipnet";
          version = "2.11.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "469fb0b9cefa57e3ef31275ee7cacb78f2fdca44e4765491884a2b119d4eb130";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "std" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".is_terminal_polyfill."1.70.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "is_terminal_polyfill";
          version = "1.70.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "7943c866cc5cd64cbc25b2e01621d07fa8eb2a1a23160ee81ce38704e97b8ecf";
          };
          features = builtins.concatLists [
            [ "default" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".iso8601."0.6.2" =
      overridableMkRustCrate
        (profileName: rec {
          name = "iso8601";
          version = "0.6.2";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "c5c177cff824ab21a6f41079a4c401241c4e8be14f316c4c6b07d5fca351c98d";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "std" ]
          ];
          dependencies = {
            nom =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nom."8.0.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".itertools."0.12.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "itertools";
          version = "0.12.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "ba291022dbbd398a455acf126c1e341954079855bc60dfdda641363bd6922569";
          };
          dependencies = {
            either =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.15.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.15" =
      overridableMkRustCrate
        (profileName: rec {
          name = "itoa";
          version = "1.0.15";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "4a5f13b858c8d314ee3e8f639011f7ccefe71f97f96e50151fb991f267928e2c";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".jiff."0.2.5" =
      overridableMkRustCrate
        (profileName: rec {
          name = "jiff";
          version = "0.2.5";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "c102670231191d07d37a35af3eb77f1f0dbf7a71be51a962dcd57ea607be7260";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "std" ]
          ];
          dependencies = {
            ${if false then "jiff_static" else null} =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".jiff-static."0.2.5" {
                profileName = "__noProfile";
              }).out;
            log =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.27" {
                inherit profileName;
              }).out;
            ${
              if !(hostPlatform.cargo2nix.max-atomic-width >= hostPlatform.cargo2nix.target-pointer-width) then
                "portable_atomic"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".portable-atomic."1.11.0" {
                inherit profileName;
              }).out;
            ${
              if !(hostPlatform.cargo2nix.max-atomic-width >= hostPlatform.cargo2nix.target-pointer-width) then
                "portable_atomic_util"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".portable-atomic-util."0.2.4" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".jiff-static."0.2.5" =
      overridableMkRustCrate
        (profileName: rec {
          name = "jiff-static";
          version = "0.2.5";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "4cdde31a9d349f1b1f51a0b3714a5940ac022976f4b49485fc04be052b183b4c";
          };
          features = builtins.concatLists [
            [ "default" ]
          ];
          dependencies = {
            proc_macro2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.94" {
                inherit profileName;
              }).out;
            quote =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.40" {
                inherit profileName;
              }).out;
            syn =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.100" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".jobserver."0.1.33" =
      overridableMkRustCrate
        (profileName: rec {
          name = "jobserver";
          version = "0.1.33";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "38f262f097c174adebe41eb73d66ae9c06b2844fb0da69969647bbddd9b0538a";
          };
          dependencies = {
            ${if hostPlatform.isWindows then "getrandom" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.3.2" {
                inherit profileName;
              }).out;
            ${if hostPlatform.isUnix then "libc" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.171" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.77" =
      overridableMkRustCrate
        (profileName: rec {
          name = "js-sys";
          version = "0.3.77";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "1cfaf33c695fc6e08064efbc1f72ec937429614f25eef83af942d0e227c3a28f";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "std" ]
          ];
          dependencies = {
            once_cell =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.21.3" {
                inherit profileName;
              }).out;
            wasm_bindgen =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.5.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "lazy_static";
          version = "1.5.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe";
          };
          features = builtins.concatLists [
            [ "spin" ]
            [ "spin_no_std" ]
          ];
          dependencies = {
            spin =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".spin."0.9.8" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".lazycell."1.3.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "lazycell";
          version = "1.3.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".leb128."0.2.5" =
      overridableMkRustCrate
        (profileName: rec {
          name = "leb128";
          version = "0.2.5";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "884e2677b40cc8c339eaefcb701c32ef1fd2493d71118dc0ca4b6a736c93bd67";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".libc."0.2.171" =
      overridableMkRustCrate
        (profileName: rec {
          name = "libc";
          version = "0.2.171";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "c19937216e9d3aa9956d9bb8dfc0b0c8beb6058fc4f7a4dc4d850edf86a237d6";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "extra_traits" ]
            [ "std" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".libloading."0.8.6" =
      overridableMkRustCrate
        (profileName: rec {
          name = "libloading";
          version = "0.8.6";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "fc2f4eb4bc735547cfed7c0a4922cbd04a4655978c09b54f1f7b228750664c34";
          };
          dependencies = {
            ${if hostPlatform.isUnix then "cfg_if" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {
                inherit profileName;
              }).out;
            ${if hostPlatform.isWindows then "windows_targets" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.52.6" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".libm."0.2.11" =
      overridableMkRustCrate
        (profileName: rec {
          name = "libm";
          version = "0.2.11";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "8355be11b20d696c8f18f6cc018c4e372165b1fa8126cef092399c9951984ffa";
          };
          features = builtins.concatLists [
            [ "default" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".libredox."0.1.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "libredox";
          version = "0.1.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "c0ff37bd590ca25063e35af745c343cb7a0271906fb7b37e4813e8f79f00268d";
          };
          features = builtins.concatLists [
            [ "call" ]
            [ "default" ]
            [ "redox_syscall" ]
            [ "std" ]
          ];
          dependencies = {
            bitflags =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.9.0" {
                inherit profileName;
              }).out;
            libc =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.171" {
                inherit profileName;
              }).out;
            syscall =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.5.10" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".libsqlite3-sys."0.30.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "libsqlite3-sys";
          version = "0.30.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "2e99fb7a497b1e3339bc746195567ed8d3e24945ecd636e3619d20b9de9e9149";
          };
          features = builtins.concatLists [
            [ "bundled" ]
            [ "bundled_bindings" ]
            [ "cc" ]
            [ "pkg-config" ]
            [ "unlock_notify" ]
            [ "vcpkg" ]
          ];
          buildDependencies = {
            cc =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.2.17" {
                profileName = "__noProfile";
              }).out;
            pkg_config =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.32" {
                profileName = "__noProfile";
              }).out;
            vcpkg =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".vcpkg."0.2.15" {
                profileName = "__noProfile";
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".linux-raw-sys."0.4.15" =
      overridableMkRustCrate
        (profileName: rec {
          name = "linux-raw-sys";
          version = "0.4.15";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "d26c52dbd32dccf2d10cac7725f8eae5296885fb5703b261f7d0a0739ec807ab";
          };
          features = builtins.concatLists [
            [ "elf" ]
            [ "errno" ]
            [ "general" ]
            [ "if_ether" ]
            [ "ioctl" ]
            [ "net" ]
            [ "netlink" ]
            [ "no_std" ]
            [ "prctl" ]
            [ "xdp" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".linux-raw-sys."0.9.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "linux-raw-sys";
          version = "0.9.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "fe7db12097d22ec582439daf8618b8fdd1a7bef6270e9af3b1ebcd30893cf413";
          };
          features = builtins.concatLists [
            [ "elf" ]
            [ "errno" ]
            [ "general" ]
            [ "ioctl" ]
            [ "no_std" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".litemap."0.7.5" =
      overridableMkRustCrate
        (profileName: rec {
          name = "litemap";
          version = "0.7.5";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "23fb14cb19457329c82206317a5663005a4d404783dc74f4252769b0d5f42856";
          };
          features = builtins.concatLists [
            [ "alloc" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".lock_api."0.4.12" =
      overridableMkRustCrate
        (profileName: rec {
          name = "lock_api";
          version = "0.4.12";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "07af8b9cdd281b7915f413fa73f29ebd5d55d0d3f0155584dade1ff18cea1b17";
          };
          features = builtins.concatLists [
            [ "atomic_usize" ]
            [ "default" ]
          ];
          dependencies = {
            scopeguard =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".scopeguard."1.2.0" {
                inherit profileName;
              }).out;
          };
          buildDependencies = {
            autocfg =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.4.0" {
                profileName = "__noProfile";
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".log."0.4.27" =
      overridableMkRustCrate
        (profileName: rec {
          name = "log";
          version = "0.4.27";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "13dc2df351e3202783a1fe0d44375f7295ffb4049267b0f3018346dc122a1d94";
          };
          features = builtins.concatLists [
            [ "std" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".lru."0.12.5" =
      overridableMkRustCrate
        (profileName: rec {
          name = "lru";
          version = "0.12.5";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "234cf4f4a04dc1f57e24b96cc0cd600cf2af460d4161ac5ecdd0af8e1f3b2a38";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "hashbrown" ]
          ];
          dependencies = {
            hashbrown =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.15.2" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".matchers."0.1.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "matchers";
          version = "0.1.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "8263075bb86c5a1b1427b5ae862e8889656f126e9f77c484496e8b47cf5c5558";
          };
          dependencies = {
            regex_automata =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-automata."0.1.10" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".matchit."0.8.4" =
      overridableMkRustCrate
        (profileName: rec {
          name = "matchit";
          version = "0.8.4";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "47e1ffaa40ddd1f3ed91f717a33c8c0ee23fff369e3aa8772b9605cc1d22f4c3";
          };
          features = builtins.concatLists [
            [ "default" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".md-5."0.10.6" =
      overridableMkRustCrate
        (profileName: rec {
          name = "md-5";
          version = "0.10.6";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "d89e7ee0cfbedfc4da3340218492196241d89eefb6dab27de5df917a6d2e78cf";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "std" ]
          ];
          dependencies = {
            cfg_if =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {
                inherit profileName;
              }).out;
            digest =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.4" =
      overridableMkRustCrate
        (profileName: rec {
          name = "memchr";
          version = "2.7.4";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "default" ]
            [ "std" ]
            [ "use_std" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".metrics."0.24.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "metrics";
          version = "0.24.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "7a7deb012b3b2767169ff203fadb4c6b0b82b947512e5eb9e0b78c2e186ad9e3";
          };
          dependencies = {
            ahash =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.8.11" {
                inherit profileName;
              }).out;
            ${if hostPlatform.parsed.cpu.bits == 32 then "portable_atomic" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".portable-atomic."1.11.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".metrics-exporter-prometheus."0.16.2" =
      overridableMkRustCrate
        (profileName: rec {
          name = "metrics-exporter-prometheus";
          version = "0.16.2";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "dd7399781913e5393588a8d8c6a2867bf85fb38eaf2502fdce465aad2dc6f034";
          };
          dependencies = {
            base64 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.22.1" {
                inherit profileName;
              }).out;
            indexmap =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."2.8.0" {
                inherit profileName;
              }).out;
            metrics =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".metrics."0.24.1" {
                inherit profileName;
              }).out;
            metrics_util =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".metrics-util."0.19.0" {
                inherit profileName;
              }).out;
            quanta =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quanta."0.12.5" {
                inherit profileName;
              }).out;
            thiserror =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.69" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".metrics-util."0.19.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "metrics-util";
          version = "0.19.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "dbd4884b1dd24f7d6628274a2f5ae22465c337c5ba065ec9b6edccddf8acc673";
          };
          features = builtins.concatLists [
            [ "crossbeam-epoch" ]
            [ "crossbeam-utils" ]
            [ "hashbrown" ]
            [ "quanta" ]
            [ "rand" ]
            [ "rand_xoshiro" ]
            [ "recency" ]
            [ "registry" ]
            [ "sketches-ddsketch" ]
            [ "storage" ]
          ];
          dependencies = {
            crossbeam_epoch =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-epoch."0.9.18" {
                inherit profileName;
              }).out;
            crossbeam_utils =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.21" {
                inherit profileName;
              }).out;
            hashbrown =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.15.2" {
                inherit profileName;
              }).out;
            metrics =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".metrics."0.24.1" {
                inherit profileName;
              }).out;
            quanta =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quanta."0.12.5" {
                inherit profileName;
              }).out;
            rand =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" {
                inherit profileName;
              }).out;
            rand_xoshiro =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_xoshiro."0.6.0" {
                inherit profileName;
              }).out;
            sketches_ddsketch =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sketches-ddsketch."0.3.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".mime."0.3.17" =
      overridableMkRustCrate
        (profileName: rec {
          name = "mime";
          version = "0.3.17";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "6877bb514081ee2a7ff5ef9de3281f14a4dd4bceac4c09388074a6b5df8a139a";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".mime_guess."2.0.5" =
      overridableMkRustCrate
        (profileName: rec {
          name = "mime_guess";
          version = "2.0.5";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "f7c44f8e672c00fe5308fa235f821cb4198414e1c77935c1ab6948d3fd78550e";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "rev-mappings" ]
          ];
          dependencies = {
            mime =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mime."0.3.17" {
                inherit profileName;
              }).out;
            unicase =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicase."2.8.1" {
                inherit profileName;
              }).out;
          };
          buildDependencies = {
            unicase =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".unicase."2.8.1" {
                profileName = "__noProfile";
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".minimal-lexical."0.2.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "minimal-lexical";
          version = "0.2.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "68354c5c6bd36d73ff3feceb05efa59b6acb7626617f4962be322a825e61f79a";
          };
          features = builtins.concatLists [
            [ "std" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.7.4" =
      overridableMkRustCrate
        (profileName: rec {
          name = "miniz_oxide";
          version = "0.7.4";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "b8a240ddb74feaf34a79a7add65a741f3167852fba007066dcac1ca548d89c08";
          };
          dependencies = {
            adler =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".adler."1.0.2" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".miniz_oxide."0.8.7" =
      overridableMkRustCrate
        (profileName: rec {
          name = "miniz_oxide";
          version = "0.8.7";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "ff70ce3e48ae43fa075863cef62e8b43b71a4f2382229920e0df362592919430";
          };
          features = builtins.concatLists [
            [ "with-alloc" ]
          ];
          dependencies = {
            adler2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".adler2."2.0.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".mio."1.0.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "mio";
          version = "1.0.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "2886843bf800fba2e3377cff24abf6379b4c4d5c6681eaf9ea5b0d15090450bd";
          };
          features = builtins.concatLists [
            [ "net" ]
            [ "os-ext" ]
            [ "os-poll" ]
          ];
          dependencies = {
            ${
              if
                hostPlatform.isUnix
                || hostPlatform.parsed.kernel.name == "hermit"
                || hostPlatform.parsed.kernel.name == "wasi"
              then
                "libc"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.171" {
                inherit profileName;
              }).out;
            ${if hostPlatform.parsed.kernel.name == "wasi" then "wasi" else null} =
              (
                rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasi."0.11.0+wasi-snapshot-preview1"
                { inherit profileName; }
              ).out;
            ${if hostPlatform.isWindows then "windows_sys" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".multipart."0.18.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "multipart";
          version = "0.18.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "00dec633863867f29cb39df64a397cdf4a6354708ddd7759f70c7fb51c5f9182";
          };
          features = builtins.concatLists [
            [ "buf_redux" ]
            [ "httparse" ]
            [ "quick-error" ]
            [ "safemem" ]
            [ "server" ]
            [ "twoway" ]
          ];
          dependencies = {
            buf_redux =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".buf_redux."0.8.4" {
                inherit profileName;
              }).out;
            httparse =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".httparse."1.10.1" {
                inherit profileName;
              }).out;
            log =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.27" {
                inherit profileName;
              }).out;
            mime =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mime."0.3.17" {
                inherit profileName;
              }).out;
            mime_guess =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mime_guess."2.0.5" {
                inherit profileName;
              }).out;
            quick_error =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quick-error."1.2.3" {
                inherit profileName;
              }).out;
            rand =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" {
                inherit profileName;
              }).out;
            safemem =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".safemem."0.3.3" {
                inherit profileName;
              }).out;
            tempfile =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tempfile."3.19.1" {
                inherit profileName;
              }).out;
            twoway =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".twoway."0.1.8" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".nom."7.1.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "nom";
          version = "7.1.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "d273983c5a657a70a3e8f2a01329822f3b8c8172b73826411a55751e404a0a4a";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "std" ]
          ];
          dependencies = {
            memchr =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.4" {
                inherit profileName;
              }).out;
            minimal_lexical =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".minimal-lexical."0.2.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".nom."8.0.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "nom";
          version = "8.0.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "df9761775871bdef83bee530e60050f7e54b1105350d6884eb0fb4f46c2f9405";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "std" ]
          ];
          dependencies = {
            memchr =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.4" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".nu-ansi-term."0.46.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "nu-ansi-term";
          version = "0.46.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84";
          };
          dependencies = {
            overload =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".overload."0.1.1" {
                inherit profileName;
              }).out;
            ${if hostPlatform.parsed.kernel.name == "windows" then "winapi" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".num-bigint-dig."0.8.4" =
      overridableMkRustCrate
        (profileName: rec {
          name = "num-bigint-dig";
          version = "0.8.4";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "dc84195820f291c7697304f3cbdadd1cb7199c0efc917ff5eafd71225c136151";
          };
          features = builtins.concatLists [
            [ "i128" ]
            [ "prime" ]
            [ "rand" ]
            [ "u64_digit" ]
            [ "zeroize" ]
          ];
          dependencies = {
            byteorder =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" {
                inherit profileName;
              }).out;
            lazy_static =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.5.0" {
                inherit profileName;
              }).out;
            libm =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libm."0.2.11" {
                inherit profileName;
              }).out;
            num_integer =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.46" {
                inherit profileName;
              }).out;
            num_iter =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-iter."0.1.45" {
                inherit profileName;
              }).out;
            num_traits =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.19" {
                inherit profileName;
              }).out;
            rand =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" {
                inherit profileName;
              }).out;
            smallvec =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.14.0" {
                inherit profileName;
              }).out;
            zeroize =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.8.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".num-conv."0.1.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "num-conv";
          version = "0.1.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "51d515d32fb182ee37cda2ccdcb92950d6a3c2893aa280e540671c2cd0f3b1d9";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.46" =
      overridableMkRustCrate
        (profileName: rec {
          name = "num-integer";
          version = "0.1.46";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "7969661fd2958a5cb096e56c8e1ad0444ac2bbcd0061bd28660485a44879858f";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "i128" ]
            [ "std" ]
          ];
          dependencies = {
            num_traits =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.19" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".num-iter."0.1.45" =
      overridableMkRustCrate
        (profileName: rec {
          name = "num-iter";
          version = "0.1.45";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "1429034a0490724d0075ebb2bc9e875d6503c3cf69e235a8941aa757d83ef5bf";
          };
          dependencies = {
            num_integer =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.46" {
                inherit profileName;
              }).out;
            num_traits =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.19" {
                inherit profileName;
              }).out;
          };
          buildDependencies = {
            autocfg =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.4.0" {
                profileName = "__noProfile";
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.19" =
      overridableMkRustCrate
        (profileName: rec {
          name = "num-traits";
          version = "0.2.19";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841";
          };
          features = builtins.concatLists [
            [ "i128" ]
            [ "libm" ]
            [ "std" ]
          ];
          dependencies = {
            libm =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libm."0.2.11" {
                inherit profileName;
              }).out;
          };
          buildDependencies = {
            autocfg =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.4.0" {
                profileName = "__noProfile";
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.16.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "num_cpus";
          version = "1.16.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "4161fcb6d602d4d2081af7c3a45852d875a03dd337a6bfdd6e06407b61342a43";
          };
          dependencies = {
            ${if hostPlatform.parsed.kernel.name == "hermit" then "hermit_abi" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.3.9" {
                inherit profileName;
              }).out;
            ${if !hostPlatform.isWindows then "libc" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.171" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".num_threads."0.1.7" =
      overridableMkRustCrate
        (profileName: rec {
          name = "num_threads";
          version = "0.1.7";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "5c7398b9c8b70908f6371f47ed36737907c87c52af34c268fed0bf0ceb92ead9";
          };
          dependencies = {
            ${
              if
                hostPlatform.parsed.kernel.name == "darwin"
                || hostPlatform.parsed.kernel.name == "ios"
                || hostPlatform.parsed.kernel.name == "freebsd"
              then
                "libc"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.171" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".object."0.32.2" =
      overridableMkRustCrate
        (profileName: rec {
          name = "object";
          version = "0.32.2";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "a6a622008b6e321afc04970976f62ee297fdbaa6f95318ca343e3eebb9648441";
          };
          features = builtins.concatLists [
            [ "archive" ]
            [ "coff" ]
            [ "elf" ]
            [ "macho" ]
            [ "pe" ]
            [ "read_core" ]
            [ "unaligned" ]
            [ "xcoff" ]
          ];
          dependencies = {
            memchr =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.4" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".once_cell."1.21.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "once_cell";
          version = "1.21.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "42f5e15c9953c5e4ccceeb2e7382a716482c34515315f7b03532b8b4e8393d2d";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "default" ]
            [ "race" ]
            [ "std" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".openssl-probe."0.1.6" =
      overridableMkRustCrate
        (profileName: rec {
          name = "openssl-probe";
          version = "0.1.6";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "d05e27ee213611ffe7d6348b942e8f942b37114c00cc03cec254295a4a17852e";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".os_info."3.10.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "os_info";
          version = "3.10.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "2a604e53c24761286860eba4e2c8b23a0161526476b1de520139d69cdb85a6b5";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "serde" ]
          ];
          dependencies = {
            log =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.27" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            ${if hostPlatform.isWindows then "windows_sys" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".outref."0.5.2" =
      overridableMkRustCrate
        (profileName: rec {
          name = "outref";
          version = "0.5.2";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "1a80800c0488c3a21695ea981a54918fbb37abf04f4d0720c453632255e2ff0e";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".overload."0.1.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "overload";
          version = "0.1.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".owo-colors."3.5.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "owo-colors";
          version = "3.5.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "c1b04fb49957986fdce4d6ee7a65027d55d4b6d2265e5848bbb507b58ccfdb6f";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".p256."0.11.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "p256";
          version = "0.11.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "51f44edd08f51e2ade572f141051021c5af22677e42b7dd28a88155151c33594";
          };
          features = builtins.concatLists [
            [ "arithmetic" ]
            [ "default" ]
            [ "digest" ]
            [ "ecdsa" ]
            [ "ecdsa-core" ]
            [ "pkcs8" ]
            [ "sha2" ]
            [ "sha256" ]
            [ "std" ]
          ];
          dependencies = {
            ecdsa_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ecdsa."0.14.8" {
                inherit profileName;
              }).out;
            elliptic_curve =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".elliptic-curve."0.12.3" {
                inherit profileName;
              }).out;
            sha2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".parking."2.2.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "parking";
          version = "2.2.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "f38d5652c16fde515bb1ecef450ab0f6a219d619a7274976324d5e377f7dceba";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "parking_lot";
          version = "0.12.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "f1bf18183cf54e8d6059647fc3063646a1801cf30896933ec2311622cc4b9a27";
          };
          features = builtins.concatLists [
            [ "default" ]
          ];
          dependencies = {
            lock_api =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lock_api."0.4.12" {
                inherit profileName;
              }).out;
            parking_lot_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot_core."0.9.10" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".parking_lot_core."0.9.10" =
      overridableMkRustCrate
        (profileName: rec {
          name = "parking_lot_core";
          version = "0.9.10";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "1e401f977ab385c9e4e3ab30627d6f26d00e2c73eef317493c4ec6d468726cf8";
          };
          dependencies = {
            cfg_if =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {
                inherit profileName;
              }).out;
            ${if hostPlatform.isUnix then "libc" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.171" {
                inherit profileName;
              }).out;
            ${if hostPlatform.parsed.kernel.name == "redox" then "syscall" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.5.10" {
                inherit profileName;
              }).out;
            smallvec =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.14.0" {
                inherit profileName;
              }).out;
            ${if hostPlatform.isWindows then "windows_targets" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.52.6" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".password-hash."0.5.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "password-hash";
          version = "0.5.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "346f04948ba92c43e8469c1ee6736c7563d71012b17d40745260fe106aac2166";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "default" ]
            [ "rand_core" ]
          ];
          dependencies = {
            base64ct =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64ct."1.7.3" {
                inherit profileName;
              }).out;
            rand_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" {
                inherit profileName;
              }).out;
            subtle =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.6.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".pem-rfc7468."0.7.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "pem-rfc7468";
          version = "0.7.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "88b39c9bfcfc231068454382784bb460aae594343fb030d46e9f50a645418412";
          };
          features = builtins.concatLists [
            [ "alloc" ]
          ];
          dependencies = {
            base64ct =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64ct."1.7.3" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "percent-encoding";
          version = "2.3.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "e3148f5046208a5d56bcfc03053e3ca6334e51da8dfb19b6cdc8b306fae3283e";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "default" ]
            [ "std" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".pin-project."1.1.10" =
      overridableMkRustCrate
        (profileName: rec {
          name = "pin-project";
          version = "1.1.10";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "677f1add503faace112b9f1373e43e9e054bfdd22ff1a63c1bc485eaec6a6a8a";
          };
          dependencies = {
            pin_project_internal =
              (
                buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-internal."1.1.10"
                { profileName = "__noProfile"; }
              ).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".pin-project-internal."1.1.10" =
      overridableMkRustCrate
        (profileName: rec {
          name = "pin-project-internal";
          version = "1.1.10";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "6e918e4ff8c4549eb882f14b3a4bc8c8bc93de829416eacf579f1207a8fbf861";
          };
          dependencies = {
            proc_macro2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.94" {
                inherit profileName;
              }).out;
            quote =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.40" {
                inherit profileName;
              }).out;
            syn =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.100" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.16" =
      overridableMkRustCrate
        (profileName: rec {
          name = "pin-project-lite";
          version = "0.2.16";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "3b3cff922bd51709b605d9ead9aa71031d81447142d828eb4a6eba76fe619f9b";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".pin-utils."0.1.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "pin-utils";
          version = "0.1.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".pinned."0.1.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "pinned";
          version = "0.1.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "a829027bd95e54cfe13e3e258a1ae7b645960553fb82b75ff852c29688ee595b";
          };
          dependencies = {
            futures =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.31" {
                inherit profileName;
              }).out;
            rustversion =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rustversion."1.0.20" {
                profileName = "__noProfile";
              }).out;
            thiserror =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.69" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".pkcs1."0.7.5" =
      overridableMkRustCrate
        (profileName: rec {
          name = "pkcs1";
          version = "0.7.5";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "c8ffb9f10fa047879315e6625af03c164b16962a5368d724ed16323b68ace47f";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "pem" ]
            [ "pkcs8" ]
            [ "std" ]
            [ "zeroize" ]
          ];
          dependencies = {
            der =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".der."0.7.9" {
                inherit profileName;
              }).out;
            pkcs8 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pkcs8."0.10.2" {
                inherit profileName;
              }).out;
            spki =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".spki."0.7.3" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".pkcs8."0.9.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "pkcs8";
          version = "0.9.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "9eca2c590a5f85da82668fa685c09ce2888b9430e83299debf1f34b65fd4a4ba";
          };
          features = builtins.concatLists [
            [ "alloc" ]
          ];
          dependencies = {
            der =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".der."0.6.1" {
                inherit profileName;
              }).out;
            spki =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".spki."0.6.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".pkcs8."0.10.2" =
      overridableMkRustCrate
        (profileName: rec {
          name = "pkcs8";
          version = "0.10.2";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "f950b2377845cebe5cf8b5165cb3cc1a5e0fa5cfa3e1f7f55707d8fd82e0a7b7";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "pem" ]
            [ "std" ]
          ];
          dependencies = {
            der =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".der."0.7.9" {
                inherit profileName;
              }).out;
            spki =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".spki."0.7.3" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".pkg-config."0.3.32" =
      overridableMkRustCrate
        (profileName: rec {
          name = "pkg-config";
          version = "0.3.32";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "7edddbd0b52d732b21ad9a5fab5c704c14cd949e5e9a1ec5929a24fded1b904c";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".polling."3.7.4" =
      overridableMkRustCrate
        (profileName: rec {
          name = "polling";
          version = "3.7.4";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "a604568c3202727d1507653cb121dbd627a58684eb09a820fd746bee38b4442f";
          };
          dependencies = {
            cfg_if =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {
                inherit profileName;
              }).out;
            ${if hostPlatform.isWindows then "concurrent_queue" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".concurrent-queue."2.5.0" {
                inherit profileName;
              }).out;
            ${if hostPlatform.parsed.kernel.name == "hermit" then "hermit_abi" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hermit-abi."0.4.0" {
                inherit profileName;
              }).out;
            ${if hostPlatform.isWindows then "pin_project_lite" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.16" {
                inherit profileName;
              }).out;
            ${
              if
                hostPlatform.isUnix
                || hostPlatform.parsed.kernel.name == "fuchsia"
                || hostPlatform.parsed.kernel.name == "vxworks"
              then
                "rustix"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustix."0.38.44" {
                inherit profileName;
              }).out;
            tracing =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" {
                inherit profileName;
              }).out;
            ${if hostPlatform.isWindows then "windows_sys" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.59.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".portable-atomic."1.11.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "portable-atomic";
          version = "1.11.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "350e9b48cbc6b0e028b0473b114454c6316e57336ee184ceab6e53f72c178b3e";
          };
          features = builtins.concatLists [
            [ "fallback" ]
            [ "require-cas" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".portable-atomic-util."0.2.4" =
      overridableMkRustCrate
        (profileName: rec {
          name = "portable-atomic-util";
          version = "0.2.4";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "d8a2f0d8d040d7848a709caf78912debcc3f33ee4b3cac47d73d1e1069e83507";
          };
          features = builtins.concatLists [
            [ "alloc" ]
          ];
          dependencies = {
            portable_atomic =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".portable-atomic."1.11.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".powerfmt."0.2.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "powerfmt";
          version = "0.2.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "439ee305def115ba05938db6eb1644ff94165c5ab5e9420d1c1bcedbba909391";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".ppv-lite86."0.2.21" =
      overridableMkRustCrate
        (profileName: rec {
          name = "ppv-lite86";
          version = "0.2.21";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "85eae3c4ed2f50dcfe72643da4befc30deadb458a9b590d720cde2f2b1e97da9";
          };
          features = builtins.concatLists [
            [ "simd" ]
            [ "std" ]
          ];
          dependencies = {
            zerocopy =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zerocopy."0.8.24" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".prettyplease."0.2.31" =
      overridableMkRustCrate
        (profileName: rec {
          name = "prettyplease";
          version = "0.2.31";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "5316f57387668042f561aae71480de936257848f9c43ce528e311d89a07cadeb";
          };
          features = builtins.concatLists [
            [ "verbatim" ]
          ];
          dependencies = {
            proc_macro2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.94" {
                inherit profileName;
              }).out;
            syn =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.100" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".proc-macro-crate."1.3.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "proc-macro-crate";
          version = "1.3.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "7f4c021e1093a56626774e81216a4ce732a735e5bad4868a03f3ed65ca0c3919";
          };
          dependencies = {
            once_cell =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.21.3" {
                inherit profileName;
              }).out;
            toml_edit =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml_edit."0.19.15" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".proc-macro-error."1.0.4" =
      overridableMkRustCrate
        (profileName: rec {
          name = "proc-macro-error";
          version = "1.0.4";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "da25490ff9892aab3fcf7c36f08cfb902dd3e71ca0f9f9517bea02a73a5ce38c";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "syn" ]
            [ "syn-error" ]
          ];
          dependencies = {
            proc_macro_error_attr =
              (
                buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-error-attr."1.0.4"
                { profileName = "__noProfile"; }
              ).out;
            proc_macro2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.94" {
                inherit profileName;
              }).out;
            quote =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.40" {
                inherit profileName;
              }).out;
            syn =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" {
                inherit profileName;
              }).out;
          };
          buildDependencies = {
            version_check =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.5" {
                profileName = "__noProfile";
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".proc-macro-error-attr."1.0.4" =
      overridableMkRustCrate
        (profileName: rec {
          name = "proc-macro-error-attr";
          version = "1.0.4";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "a1be40180e52ecc98ad80b184934baf3d0d29f979574e439af5a55274b35f869";
          };
          dependencies = {
            proc_macro2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.94" {
                inherit profileName;
              }).out;
            quote =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.40" {
                inherit profileName;
              }).out;
          };
          buildDependencies = {
            version_check =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.5" {
                profileName = "__noProfile";
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.94" =
      overridableMkRustCrate
        (profileName: rec {
          name = "proc-macro2";
          version = "1.0.94";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "a31971752e70b8b2686d7e46ec17fb38dad4051d94024c88df49b667caea9c84";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "proc-macro" ]
          ];
          dependencies = {
            unicode_ident =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-ident."1.0.18" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".prokio."0.1.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "prokio";
          version = "0.1.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "03b55e106e5791fa5a13abd13c85d6127312e8e09098059ca2bc9b03ca4cf488";
          };
          features = builtins.concatLists [
            [ "default" ]
          ];
          dependencies = {
            futures =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.31" {
                inherit profileName;
              }).out;
            ${if hostPlatform.parsed.cpu.name == "wasm32" then "gloo" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo."0.8.1" {
                inherit profileName;
              }).out;
            ${if !(hostPlatform.parsed.cpu.name == "wasm32") then "num_cpus" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.16.0" {
                inherit profileName;
              }).out;
            ${if !(hostPlatform.parsed.cpu.name == "wasm32") then "once_cell" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.21.3" {
                inherit profileName;
              }).out;
            pin_project =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.1.10" {
                inherit profileName;
              }).out;
            pinned =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pinned."0.1.0" {
                inherit profileName;
              }).out;
            ${if !(hostPlatform.parsed.cpu.name == "wasm32") then "tokio" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.44.1" {
                inherit profileName;
              }).out;
            ${if !(hostPlatform.parsed.cpu.name == "wasm32") then "tokio_stream" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-stream."0.1.17" {
                inherit profileName;
              }).out;
            ${if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen_futures" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.50"
                { inherit profileName; }
              ).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".quanta."0.12.5" =
      overridableMkRustCrate
        (profileName: rec {
          name = "quanta";
          version = "0.12.5";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "3bd1fe6824cea6538803de3ff1bc0cf3949024db3d43c9643024bfb33a807c0e";
          };
          dependencies = {
            crossbeam_utils =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.21" {
                inherit profileName;
              }).out;
            ${
              if !(hostPlatform.parsed.kernel.name == "windows" || hostPlatform.parsed.cpu.name == "wasm32") then
                "libc"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.171" {
                inherit profileName;
              }).out;
            once_cell =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.21.3" {
                inherit profileName;
              }).out;
            ${
              if hostPlatform.parsed.cpu.name == "i686" || hostPlatform.parsed.cpu.name == "x86_64" then
                "raw_cpuid"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".raw-cpuid."11.5.0" {
                inherit profileName;
              }).out;
            ${
              if hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.kernel.name == "wasi" then
                "wasi"
              else
                null
            } =
              (
                rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasi."0.11.0+wasi-snapshot-preview1"
                { inherit profileName; }
              ).out;
            ${
              if hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.kernel.name == "unknown" then
                "web_sys"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.77" {
                inherit profileName;
              }).out;
            ${if hostPlatform.parsed.kernel.name == "windows" then "winapi" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".quick-error."1.2.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "quick-error";
          version = "1.2.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "a1d01941d82fa2ab50be1e79e6714289dd7cde78eba4c074bc5a4374f650dfe0";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".quinn."0.11.7" =
      overridableMkRustCrate
        (profileName: rec {
          name = "quinn";
          version = "0.11.7";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "c3bd15a6f2967aef83887dcb9fec0014580467e33720d073560cf015a5683012";
          };
          features = builtins.concatLists [
            [ "ring" ]
            [ "runtime-tokio" ]
            [ "rustls" ]
            [ "rustls-ring" ]
          ];
          dependencies = {
            bytes =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.10.1" {
                inherit profileName;
              }).out;
            pin_project_lite =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.16" {
                inherit profileName;
              }).out;
            proto =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quinn-proto."0.11.10" {
                inherit profileName;
              }).out;
            udp =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quinn-udp."0.5.11" {
                inherit profileName;
              }).out;
            rustc_hash =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."2.1.1" {
                inherit profileName;
              }).out;
            rustls =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.23.25" {
                inherit profileName;
              }).out;
            socket2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.5.9" {
                inherit profileName;
              }).out;
            thiserror =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."2.0.12" {
                inherit profileName;
              }).out;
            tokio =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.44.1" {
                inherit profileName;
              }).out;
            tracing =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" {
                inherit profileName;
              }).out;
            ${if false then "web_time" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-time."1.1.0" {
                inherit profileName;
              }).out;
          };
          buildDependencies = {
            cfg_aliases =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg_aliases."0.2.1" {
                profileName = "__noProfile";
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".quinn-proto."0.11.10" =
      overridableMkRustCrate
        (profileName: rec {
          name = "quinn-proto";
          version = "0.11.10";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "b820744eb4dc9b57a3398183639c511b5a26d2ed702cedd3febaa1393caa22cc";
          };
          features = builtins.concatLists [
            [ "ring" ]
            [ "rustls-ring" ]
          ];
          dependencies = {
            bytes =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.10.1" {
                inherit profileName;
              }).out;
            ${if false then "getrandom" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.3.2" {
                inherit profileName;
              }).out;
            rand =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.9.0" {
                inherit profileName;
              }).out;
            ring =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.17.14" {
                inherit profileName;
              }).out;
            rustc_hash =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-hash."2.1.1" {
                inherit profileName;
              }).out;
            rustls =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.23.25" {
                inherit profileName;
              }).out;
            ${if false then "rustls_pki_types" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pki-types."1.11.0" {
                inherit profileName;
              }).out;
            slab =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.9" {
                inherit profileName;
              }).out;
            thiserror =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."2.0.12" {
                inherit profileName;
              }).out;
            tinyvec =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinyvec."1.9.0" {
                inherit profileName;
              }).out;
            tracing =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" {
                inherit profileName;
              }).out;
            ${if false then "web_time" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-time."1.1.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".quinn-udp."0.5.11" =
      overridableMkRustCrate
        (profileName: rec {
          name = "quinn-udp";
          version = "0.5.11";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "541d0f57c6ec747a90738a52741d3221f7960e8ac2f0ff4b1a63680e033b4ab5";
          };
          features = builtins.concatLists [
            [ "tracing" ]
          ];
          dependencies = {
            libc =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.171" {
                inherit profileName;
              }).out;
            ${if hostPlatform.isWindows then "once_cell" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.21.3" {
                inherit profileName;
              }).out;
            socket2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.5.9" {
                inherit profileName;
              }).out;
            tracing =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" {
                inherit profileName;
              }).out;
            ${if hostPlatform.isWindows then "windows_sys" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.59.0" {
                inherit profileName;
              }).out;
          };
          buildDependencies = {
            cfg_aliases =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg_aliases."0.2.1" {
                profileName = "__noProfile";
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".quote."1.0.40" =
      overridableMkRustCrate
        (profileName: rec {
          name = "quote";
          version = "1.0.40";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "proc-macro" ]
          ];
          dependencies = {
            proc_macro2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.94" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".r-efi."5.2.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "r-efi";
          version = "5.2.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "74765f6d916ee2faa39bc8e68e4f3ed8949b48cccdac59983d287a7cb71ce9c5";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" =
      overridableMkRustCrate
        (profileName: rec {
          name = "rand";
          version = "0.8.5";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "default" ]
            [ "getrandom" ]
            [ "libc" ]
            [ "rand_chacha" ]
            [ "std" ]
            [ "std_rng" ]
          ];
          dependencies = {
            ${if hostPlatform.isUnix then "libc" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.171" {
                inherit profileName;
              }).out;
            rand_chacha =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.3.1" {
                inherit profileName;
              }).out;
            rand_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".rand."0.9.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "rand";
          version = "0.9.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "3779b94aeb87e8bd4e834cee3650289ee9e0d5677f976ecdb6d219e5f4f6cd94";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "default" ]
            [ "os_rng" ]
            [ "small_rng" ]
            [ "std" ]
            [ "std_rng" ]
            [ "thread_rng" ]
          ];
          dependencies = {
            rand_chacha =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.9.0" {
                inherit profileName;
              }).out;
            rand_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.9.3" {
                inherit profileName;
              }).out;
            zerocopy =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zerocopy."0.8.24" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.3.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "rand_chacha";
          version = "0.3.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88";
          };
          features = builtins.concatLists [
            [ "std" ]
          ];
          dependencies = {
            ppv_lite86 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ppv-lite86."0.2.21" {
                inherit profileName;
              }).out;
            rand_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".rand_chacha."0.9.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "rand_chacha";
          version = "0.9.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "d3022b5f1df60f26e1ffddd6c66e8aa15de382ae63b3a0c1bfc0e4d3e3f325cb";
          };
          features = builtins.concatLists [
            [ "std" ]
          ];
          dependencies = {
            ppv_lite86 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ppv-lite86."0.2.21" {
                inherit profileName;
              }).out;
            rand_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.9.3" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" =
      overridableMkRustCrate
        (profileName: rec {
          name = "rand_core";
          version = "0.6.4";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "getrandom" ]
            [ "std" ]
          ];
          dependencies = {
            getrandom =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.15" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".rand_core."0.9.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "rand_core";
          version = "0.9.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "99d9a13982dcf210057a8a78572b2217b667c3beacbf3a0d8b454f6f82837d38";
          };
          features = builtins.concatLists [
            [ "os_rng" ]
            [ "std" ]
          ];
          dependencies = {
            getrandom =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.3.2" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".rand_xoshiro."0.6.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "rand_xoshiro";
          version = "0.6.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "6f97cdb2a36ed4183de61b2f824cc45c9f1037f28afe0a322e9fff4c108b5aaa";
          };
          dependencies = {
            rand_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".raw-cpuid."11.5.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "raw-cpuid";
          version = "11.5.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "c6df7ab838ed27997ba19a4664507e6f82b41fe6e20be42929332156e5e85146";
          };
          dependencies = {
            bitflags =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.9.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".rayon."1.10.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "rayon";
          version = "1.10.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "b418a60154510ca1a002a752ca9714984e21e4241e804d32555251faf8b78ffa";
          };
          dependencies = {
            either =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.15.0" {
                inherit profileName;
              }).out;
            rayon_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rayon-core."1.12.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".rayon-core."1.12.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "rayon-core";
          version = "1.12.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "1465873a3dfdaa8ae7cb14b4383657caab0b3e8a0aa9ae8e04b044854c8dfce2";
          };
          dependencies = {
            crossbeam_deque =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-deque."0.8.6" {
                inherit profileName;
              }).out;
            crossbeam_utils =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-utils."0.8.21" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.5.10" =
      overridableMkRustCrate
        (profileName: rec {
          name = "redox_syscall";
          version = "0.5.10";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "0b8c0c260b63a8219631167be35e6a988e9554dbd323f8bd08439c8ed1302bd1";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "userspace" ]
          ];
          dependencies = {
            bitflags =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.9.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".regex."1.11.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "regex";
          version = "1.11.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "b544ef1b4eac5dc2db33ea63606ae9ffcfac26c1416a2806ae0bf5f56b201191";
          };
          features = builtins.concatLists [
            [ "perf" ]
            [ "perf-backtrack" ]
            [ "perf-cache" ]
            [ "perf-dfa" ]
            [ "perf-inline" ]
            [ "perf-literal" ]
            [ "perf-onepass" ]
            [ "std" ]
            [ "unicode-case" ]
            [ "unicode-perl" ]
          ];
          dependencies = {
            aho_corasick =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aho-corasick."1.1.3" {
                inherit profileName;
              }).out;
            memchr =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.4" {
                inherit profileName;
              }).out;
            regex_automata =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-automata."0.4.9" {
                inherit profileName;
              }).out;
            regex_syntax =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.8.5" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".regex-automata."0.1.10" =
      overridableMkRustCrate
        (profileName: rec {
          name = "regex-automata";
          version = "0.1.10";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "6c230d73fb8d8c1b9c0b3135c5142a8acee3a0558fb8db5cf1cb65f8d7862132";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "regex-syntax" ]
            [ "std" ]
          ];
          dependencies = {
            regex_syntax =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.6.29" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".regex-automata."0.4.9" =
      overridableMkRustCrate
        (profileName: rec {
          name = "regex-automata";
          version = "0.4.9";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "809e8dc61f6de73b46c85f4c96486310fe304c434cfa43669d7b40f711150908";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "dfa-onepass" ]
            [ "hybrid" ]
            [ "meta" ]
            [ "nfa-backtrack" ]
            [ "nfa-pikevm" ]
            [ "nfa-thompson" ]
            [ "perf-inline" ]
            [ "perf-literal" ]
            [ "perf-literal-multisubstring" ]
            [ "perf-literal-substring" ]
            [ "std" ]
            [ "syntax" ]
            [ "unicode-case" ]
            [ "unicode-perl" ]
            [ "unicode-word-boundary" ]
          ];
          dependencies = {
            aho_corasick =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aho-corasick."1.1.3" {
                inherit profileName;
              }).out;
            memchr =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.4" {
                inherit profileName;
              }).out;
            regex_syntax =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.8.5" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".regex-lite."0.1.6" =
      overridableMkRustCrate
        (profileName: rec {
          name = "regex-lite";
          version = "0.1.6";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "53a49587ad06b26609c52e423de037e7f57f20d53535d66e08c695f347df952a";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "std" ]
            [ "string" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.6.29" =
      overridableMkRustCrate
        (profileName: rec {
          name = "regex-syntax";
          version = "0.6.29";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "f162c6dd7b008981e4d40210aca20b4bd0f9b60ca9271061b07f78537722f2e1";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "unicode" ]
            [ "unicode-age" ]
            [ "unicode-bool" ]
            [ "unicode-case" ]
            [ "unicode-gencat" ]
            [ "unicode-perl" ]
            [ "unicode-script" ]
            [ "unicode-segment" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".regex-syntax."0.8.5" =
      overridableMkRustCrate
        (profileName: rec {
          name = "regex-syntax";
          version = "0.8.5";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "2b15c43186be67a4fd63bee50d0303afffcef381492ebe2c5d87f324e1b8815c";
          };
          features = builtins.concatLists [
            [ "std" ]
            [ "unicode-case" ]
            [ "unicode-perl" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".reqwest."0.12.15" =
      overridableMkRustCrate
        (profileName: rec {
          name = "reqwest";
          version = "0.12.15";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "d19c46a6fdd48bc4dab94b6103fccc55d34c67cc0ad04653aad4ea2a07cd7bbb";
          };
          features = builtins.concatLists [
            [ "__rustls" ]
            [ "__rustls-ring" ]
            [ "__tls" ]
            [ "blocking" ]
            [ "json" ]
            [ "rustls-tls" ]
            [ "rustls-tls-webpki-roots" ]
            [ "rustls-tls-webpki-roots-no-provider" ]
            [ "stream" ]
          ];
          dependencies = {
            base64 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.22.1" {
                inherit profileName;
              }).out;
            bytes =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.10.1" {
                inherit profileName;
              }).out;
            ${if !(hostPlatform.parsed.cpu.name == "wasm32") then "futures_channel" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.31" {
                inherit profileName;
              }).out;
            futures_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" {
                inherit profileName;
              }).out;
            futures_util =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" {
                inherit profileName;
              }).out;
            http =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.3.1" {
                inherit profileName;
              }).out;
            ${if !(hostPlatform.parsed.cpu.name == "wasm32") then "http_body" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body."1.0.1" {
                inherit profileName;
              }).out;
            ${if !(hostPlatform.parsed.cpu.name == "wasm32") then "http_body_util" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body-util."0.1.3" {
                inherit profileName;
              }).out;
            ${if !(hostPlatform.parsed.cpu.name == "wasm32") then "hyper" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper."1.6.0" {
                inherit profileName;
              }).out;
            ${if !(hostPlatform.parsed.cpu.name == "wasm32") then "hyper_rustls" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper-rustls."0.27.5" {
                inherit profileName;
              }).out;
            ${if !(hostPlatform.parsed.cpu.name == "wasm32") then "hyper_util" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hyper-util."0.1.11" {
                inherit profileName;
              }).out;
            ${if !(hostPlatform.parsed.cpu.name == "wasm32") then "ipnet" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ipnet."2.11.0" {
                inherit profileName;
              }).out;
            ${if hostPlatform.parsed.cpu.name == "wasm32" then "js_sys" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.77" {
                inherit profileName;
              }).out;
            ${if !(hostPlatform.parsed.cpu.name == "wasm32") then "log" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.27" {
                inherit profileName;
              }).out;
            ${if !(hostPlatform.parsed.cpu.name == "wasm32") then "mime" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mime."0.3.17" {
                inherit profileName;
              }).out;
            ${if !(hostPlatform.parsed.cpu.name == "wasm32") then "once_cell" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.21.3" {
                inherit profileName;
              }).out;
            ${if !(hostPlatform.parsed.cpu.name == "wasm32") then "percent_encoding" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.1" {
                inherit profileName;
              }).out;
            ${if !(hostPlatform.parsed.cpu.name == "wasm32") then "pin_project_lite" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.16" {
                inherit profileName;
              }).out;
            ${if !(hostPlatform.parsed.cpu.name == "wasm32") then "quinn" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quinn."0.11.7" {
                inherit profileName;
              }).out;
            ${if !(hostPlatform.parsed.cpu.name == "wasm32") then "rustls" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.23.25" {
                inherit profileName;
              }).out;
            ${if !(hostPlatform.parsed.cpu.name == "wasm32") then "rustls_pemfile" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pemfile."2.2.0" {
                inherit profileName;
              }).out;
            ${if !(hostPlatform.parsed.cpu.name == "wasm32") then "rustls_pki_types" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pki-types."1.11.0" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            serde_json =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.140" {
                inherit profileName;
              }).out;
            serde_urlencoded =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_urlencoded."0.7.1" {
                inherit profileName;
              }).out;
            sync_wrapper =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sync_wrapper."1.0.2" {
                inherit profileName;
              }).out;
            ${if !(hostPlatform.parsed.cpu.name == "wasm32") then "tokio" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.44.1" {
                inherit profileName;
              }).out;
            ${if !(hostPlatform.parsed.cpu.name == "wasm32") then "tokio_rustls" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-rustls."0.26.2" {
                inherit profileName;
              }).out;
            ${if !(hostPlatform.parsed.cpu.name == "wasm32") then "tokio_util" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-util."0.7.14" {
                inherit profileName;
              }).out;
            ${if !(hostPlatform.parsed.cpu.name == "wasm32") then "tower" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower."0.5.2" {
                inherit profileName;
              }).out;
            tower_service =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-service."0.3.3" {
                inherit profileName;
              }).out;
            url =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.5.4" {
                inherit profileName;
              }).out;
            ${if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" {
                inherit profileName;
              }).out;
            ${if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen_futures" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.50"
                { inherit profileName; }
              ).out;
            ${if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_streams" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-streams."0.4.2" {
                inherit profileName;
              }).out;
            ${if hostPlatform.parsed.cpu.name == "wasm32" then "web_sys" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.77" {
                inherit profileName;
              }).out;
            ${if !(hostPlatform.parsed.cpu.name == "wasm32") then "webpki_roots" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webpki-roots."0.26.8" {
                inherit profileName;
              }).out;
            ${if hostPlatform.isWindows then "windows_registry" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-registry."0.4.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".rfc6979."0.3.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "rfc6979";
          version = "0.3.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "7743f17af12fa0b03b803ba12cd6a8d9483a587e89c69445e3909655c0b9fabb";
          };
          dependencies = {
            crypto_bigint =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crypto-bigint."0.4.9" {
                inherit profileName;
              }).out;
            hmac =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hmac."0.12.1" {
                inherit profileName;
              }).out;
            zeroize =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.8.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".ring."0.17.14" =
      overridableMkRustCrate
        (profileName: rec {
          name = "ring";
          version = "0.17.14";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "a4689e6c2294d81e88dc6261c768b63bc4fcdb852be6d1352498b114f61383b7";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "default" ]
            [ "dev_urandom_fallback" ]
            [ "std" ]
            [ "wasm32_unknown_unknown_js" ]
          ];
          dependencies = {
            cfg_if =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {
                inherit profileName;
              }).out;
            getrandom =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.15" {
                inherit profileName;
              }).out;
            ${
              if
                hostPlatform.parsed.cpu.name == "aarch64"
                && hostPlatform.parsed.cpu.significantByte.name == "littleEndian"
                && hostPlatform.parsed.vendor.name == "apple"
                && (
                  hostPlatform.parsed.kernel.name == "ios"
                  || hostPlatform.parsed.kernel.name == "darwin"
                  || hostPlatform.parsed.kernel.name == "tvos"
                  || hostPlatform.parsed.kernel.name == "visionos"
                  || hostPlatform.parsed.kernel.name == "watchos"
                )
                ||
                  (
                    hostPlatform.parsed.cpu.name == "aarch64"
                    && hostPlatform.parsed.cpu.significantByte.name == "littleEndian"
                    ||
                      (hostPlatform.parsed.cpu.name == "armv6l" || hostPlatform.parsed.cpu.name == "armv7l")
                      && hostPlatform.parsed.cpu.significantByte.name == "littleEndian"
                  )
                  && (hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "linux")
              then
                "libc"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.171" {
                inherit profileName;
              }).out;
            untrusted =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".untrusted."0.9.0" {
                inherit profileName;
              }).out;
            ${
              if
                hostPlatform.parsed.cpu.name == "aarch64"
                && hostPlatform.parsed.cpu.significantByte.name == "littleEndian"
                && hostPlatform.parsed.kernel.name == "windows"
              then
                "windows_sys"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" {
                inherit profileName;
              }).out;
          };
          buildDependencies = {
            cc =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".cc."1.2.17" {
                profileName = "__noProfile";
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".rouille."3.6.2" =
      overridableMkRustCrate
        (profileName: rec {
          name = "rouille";
          version = "3.6.2";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "3716fbf57fc1084d7a706adf4e445298d123e4a44294c4e8213caf1b85fcc921";
          };
          dependencies = {
            base64 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.13.1" {
                inherit profileName;
              }).out;
            chrono =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".chrono."0.4.40" {
                inherit profileName;
              }).out;
            filetime =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".filetime."0.2.25" {
                inherit profileName;
              }).out;
            multipart =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".multipart."0.18.0" {
                inherit profileName;
              }).out;
            percent_encoding =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.1" {
                inherit profileName;
              }).out;
            rand =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            serde_derive =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.219" {
                profileName = "__noProfile";
              }).out;
            serde_json =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.140" {
                inherit profileName;
              }).out;
            sha1_smol =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha1_smol."1.0.1" {
                inherit profileName;
              }).out;
            threadpool =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".threadpool."1.8.1" {
                inherit profileName;
              }).out;
            time =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".time."0.3.41" {
                inherit profileName;
              }).out;
            tiny_http =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tiny_http."0.12.0" {
                inherit profileName;
              }).out;
            url =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.5.4" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".route-recognizer."0.3.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "route-recognizer";
          version = "0.3.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "afab94fb28594581f62d981211a9a4d53cc8130bbcbbb89a0440d9b8e81a7746";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".rsa."0.9.8" =
      overridableMkRustCrate
        (profileName: rec {
          name = "rsa";
          version = "0.9.8";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "78928ac1ed176a5ca1d17e578a1825f3d81ca54cf41053a592584b020cfd691b";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "pem" ]
            [ "std" ]
            [ "u64_digit" ]
          ];
          dependencies = {
            const_oid =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".const-oid."0.9.6" {
                inherit profileName;
              }).out;
            digest =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" {
                inherit profileName;
              }).out;
            num_bigint =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-bigint-dig."0.8.4" {
                inherit profileName;
              }).out;
            num_integer =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-integer."0.1.46" {
                inherit profileName;
              }).out;
            num_traits =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-traits."0.2.19" {
                inherit profileName;
              }).out;
            pkcs1 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pkcs1."0.7.5" {
                inherit profileName;
              }).out;
            pkcs8 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pkcs8."0.10.2" {
                inherit profileName;
              }).out;
            rand_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" {
                inherit profileName;
              }).out;
            signature =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".signature."2.2.0" {
                inherit profileName;
              }).out;
            spki =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".spki."0.7.3" {
                inherit profileName;
              }).out;
            subtle =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.6.1" {
                inherit profileName;
              }).out;
            zeroize =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.8.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".rustc-demangle."0.1.24" =
      overridableMkRustCrate
        (profileName: rec {
          name = "rustc-demangle";
          version = "0.1.24";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "719b953e2095829ee67db738b3bfa9fa368c94900df327b3f07fe6e794d2fe1f";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".rustc-hash."1.1.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "rustc-hash";
          version = "1.1.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "std" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".rustc-hash."2.1.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "rustc-hash";
          version = "2.1.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "357703d41365b4b27c590e3ed91eabb1b663f07c4c084095e60cbed4362dff0d";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "std" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".rustc_version."0.4.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "rustc_version";
          version = "0.4.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "cfcb3a22ef46e85b45de6ee7e79d063319ebb6594faafcf1c225ea92ab6e9b92";
          };
          dependencies = {
            semver =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".semver."1.0.26" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".rustix."0.38.44" =
      overridableMkRustCrate
        (profileName: rec {
          name = "rustix";
          version = "0.38.44";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "fdb5bc1ae2baa591800df16c9ca78619bf65c0488b41b96ccec5d11220d8c154";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "event" ]
            [ "fs" ]
            [ "libc-extra-traits" ]
            [ "net" ]
            [ "pipe" ]
            [ "process" ]
            [ "std" ]
            [ "time" ]
          ];
          dependencies = {
            bitflags =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.9.0" {
                inherit profileName;
              }).out;
            ${
              if
                hostPlatform.parsed.kernel.name == "linux"
                && (
                  hostPlatform.parsed.cpu.significantByte.name == "littleEndian"
                  || hostPlatform.parsed.cpu.name == "s390x"
                )
                && (
                  hostPlatform.parsed.cpu.name == "armv6l"
                  || hostPlatform.parsed.cpu.name == "armv7l"
                  || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64
                  || hostPlatform.parsed.cpu.name == "riscv64"
                  || hostPlatform.parsed.cpu.name == "i686"
                  || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64
                )
                ||
                  !hostPlatform.isWindows
                  && !(
                    hostPlatform.parsed.kernel.name == "linux"
                    && (
                      hostPlatform.parsed.cpu.significantByte.name == "littleEndian"
                      || hostPlatform.parsed.cpu.name == "s390x"
                    )
                    && (
                      hostPlatform.parsed.cpu.name == "armv6l"
                      || hostPlatform.parsed.cpu.name == "armv7l"
                      || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64
                      || hostPlatform.parsed.cpu.name == "riscv64"
                      || hostPlatform.parsed.cpu.name == "i686"
                      || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64
                    )
                  )
                || hostPlatform.isWindows
              then
                "libc_errno"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".errno."0.3.11" {
                inherit profileName;
              }).out;
            ${
              if
                hostPlatform.parsed.kernel.name == "linux"
                && (
                  hostPlatform.parsed.cpu.significantByte.name == "littleEndian"
                  || hostPlatform.parsed.cpu.name == "s390x"
                )
                && (
                  hostPlatform.parsed.cpu.name == "armv6l"
                  || hostPlatform.parsed.cpu.name == "armv7l"
                  || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64
                  || hostPlatform.parsed.cpu.name == "riscv64"
                  || hostPlatform.parsed.cpu.name == "i686"
                  || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64
                )
                ||
                  !hostPlatform.isWindows
                  && !(
                    hostPlatform.parsed.kernel.name == "linux"
                    && (
                      hostPlatform.parsed.cpu.significantByte.name == "littleEndian"
                      || hostPlatform.parsed.cpu.name == "s390x"
                    )
                    && (
                      hostPlatform.parsed.cpu.name == "armv6l"
                      || hostPlatform.parsed.cpu.name == "armv7l"
                      || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64
                      || hostPlatform.parsed.cpu.name == "riscv64"
                      || hostPlatform.parsed.cpu.name == "i686"
                      || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64
                    )
                  )
              then
                "libc"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.171" {
                inherit profileName;
              }).out;
            ${
              if
                hostPlatform.parsed.kernel.name == "linux"
                && (
                  hostPlatform.parsed.cpu.significantByte.name == "littleEndian"
                  || hostPlatform.parsed.cpu.name == "s390x"
                )
                && (
                  hostPlatform.parsed.cpu.name == "armv6l"
                  || hostPlatform.parsed.cpu.name == "armv7l"
                  || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64
                  || hostPlatform.parsed.cpu.name == "riscv64"
                  || hostPlatform.parsed.cpu.name == "i686"
                  || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64
                )
                ||
                  (hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "linux")
                  && !(
                    hostPlatform.parsed.kernel.name == "linux"
                    && (
                      hostPlatform.parsed.cpu.significantByte.name == "littleEndian"
                      || hostPlatform.parsed.cpu.name == "s390x"
                    )
                    && (
                      hostPlatform.parsed.cpu.name == "armv6l"
                      || hostPlatform.parsed.cpu.name == "armv7l"
                      || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64
                      || hostPlatform.parsed.cpu.name == "riscv64"
                      || hostPlatform.parsed.cpu.name == "i686"
                      || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64
                    )
                  )
              then
                "linux_raw_sys"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".linux-raw-sys."0.4.15" {
                inherit profileName;
              }).out;
            ${if hostPlatform.isWindows then "windows_sys" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.59.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".rustix."1.0.5" =
      overridableMkRustCrate
        (profileName: rec {
          name = "rustix";
          version = "1.0.5";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "d97817398dd4bb2e6da002002db259209759911da105da92bec29ccb12cf58bf";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "default" ]
            [ "fs" ]
            [ "std" ]
          ];
          dependencies = {
            bitflags =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.9.0" {
                inherit profileName;
              }).out;
            ${
              if
                hostPlatform.parsed.kernel.name == "linux"
                && (
                  hostPlatform.parsed.cpu.significantByte.name == "littleEndian"
                  || hostPlatform.parsed.cpu.name == "s390x"
                  || hostPlatform.parsed.cpu.name == "powerpc"
                )
                && (
                  hostPlatform.parsed.cpu.name == "armv6l"
                  || hostPlatform.parsed.cpu.name == "armv7l"
                  || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64
                  || hostPlatform.parsed.cpu.name == "riscv64"
                  || hostPlatform.parsed.cpu.name == "i686"
                  || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64
                )
                ||
                  !hostPlatform.isWindows
                  && !(
                    hostPlatform.parsed.kernel.name == "linux"
                    && (
                      hostPlatform.parsed.cpu.significantByte.name == "littleEndian"
                      || hostPlatform.parsed.cpu.name == "s390x"
                      || hostPlatform.parsed.cpu.name == "powerpc"
                    )
                    && (
                      hostPlatform.parsed.cpu.name == "armv6l"
                      || hostPlatform.parsed.cpu.name == "armv7l"
                      || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64
                      || hostPlatform.parsed.cpu.name == "riscv64"
                      || hostPlatform.parsed.cpu.name == "i686"
                      || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64
                    )
                  )
                || hostPlatform.isWindows
              then
                "libc_errno"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".errno."0.3.11" {
                inherit profileName;
              }).out;
            ${
              if
                hostPlatform.parsed.kernel.name == "linux"
                && (
                  hostPlatform.parsed.cpu.significantByte.name == "littleEndian"
                  || hostPlatform.parsed.cpu.name == "s390x"
                  || hostPlatform.parsed.cpu.name == "powerpc"
                )
                && (
                  hostPlatform.parsed.cpu.name == "armv6l"
                  || hostPlatform.parsed.cpu.name == "armv7l"
                  || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64
                  || hostPlatform.parsed.cpu.name == "riscv64"
                  || hostPlatform.parsed.cpu.name == "i686"
                  || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64
                )
                ||
                  !hostPlatform.isWindows
                  && !(
                    hostPlatform.parsed.kernel.name == "linux"
                    && (
                      hostPlatform.parsed.cpu.significantByte.name == "littleEndian"
                      || hostPlatform.parsed.cpu.name == "s390x"
                      || hostPlatform.parsed.cpu.name == "powerpc"
                    )
                    && (
                      hostPlatform.parsed.cpu.name == "armv6l"
                      || hostPlatform.parsed.cpu.name == "armv7l"
                      || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64
                      || hostPlatform.parsed.cpu.name == "riscv64"
                      || hostPlatform.parsed.cpu.name == "i686"
                      || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64
                    )
                  )
              then
                "libc"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.171" {
                inherit profileName;
              }).out;
            ${
              if
                hostPlatform.parsed.kernel.name == "linux"
                && (
                  hostPlatform.parsed.cpu.significantByte.name == "littleEndian"
                  || hostPlatform.parsed.cpu.name == "s390x"
                  || hostPlatform.parsed.cpu.name == "powerpc"
                )
                && (
                  hostPlatform.parsed.cpu.name == "armv6l"
                  || hostPlatform.parsed.cpu.name == "armv7l"
                  || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64
                  || hostPlatform.parsed.cpu.name == "riscv64"
                  || hostPlatform.parsed.cpu.name == "i686"
                  || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64
                )
                ||
                  (hostPlatform.parsed.kernel.name == "android" || hostPlatform.parsed.kernel.name == "linux")
                  && !(
                    hostPlatform.parsed.kernel.name == "linux"
                    && (
                      hostPlatform.parsed.cpu.significantByte.name == "littleEndian"
                      || hostPlatform.parsed.cpu.name == "s390x"
                      || hostPlatform.parsed.cpu.name == "powerpc"
                    )
                    && (
                      hostPlatform.parsed.cpu.name == "armv6l"
                      || hostPlatform.parsed.cpu.name == "armv7l"
                      || hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.cpu.bits == 64
                      || hostPlatform.parsed.cpu.name == "riscv64"
                      || hostPlatform.parsed.cpu.name == "i686"
                      || hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.cpu.bits == 64
                    )
                  )
              then
                "linux_raw_sys"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".linux-raw-sys."0.9.3" {
                inherit profileName;
              }).out;
            ${if hostPlatform.isWindows then "windows_sys" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.59.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".rustls."0.21.12" =
      overridableMkRustCrate
        (profileName: rec {
          name = "rustls";
          version = "0.21.12";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "3f56a14d1f48b391359b22f731fd4bd7e43c97f3c50eee276f3aa09c94784d3e";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "log" ]
            [ "logging" ]
            [ "tls12" ]
          ];
          dependencies = {
            log =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.27" {
                inherit profileName;
              }).out;
            ring =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.17.14" {
                inherit profileName;
              }).out;
            webpki =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-webpki."0.101.7" {
                inherit profileName;
              }).out;
            sct =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sct."0.7.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".rustls."0.23.25" =
      overridableMkRustCrate
        (profileName: rec {
          name = "rustls";
          version = "0.23.25";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "822ee9188ac4ec04a2f0531e55d035fb2de73f18b41a63c70c2712503b6fb13c";
          };
          features = builtins.concatLists [
            [ "aws-lc-rs" ]
            [ "aws_lc_rs" ]
            [ "default" ]
            [ "log" ]
            [ "logging" ]
            [ "ring" ]
            [ "std" ]
            [ "tls12" ]
          ];
          dependencies = {
            aws_lc_rs =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-lc-rs."1.13.0" {
                inherit profileName;
              }).out;
            log =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.27" {
                inherit profileName;
              }).out;
            once_cell =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.21.3" {
                inherit profileName;
              }).out;
            ring =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.17.14" {
                inherit profileName;
              }).out;
            pki_types =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pki-types."1.11.0" {
                inherit profileName;
              }).out;
            webpki =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-webpki."0.103.1" {
                inherit profileName;
              }).out;
            subtle =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.6.1" {
                inherit profileName;
              }).out;
            zeroize =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.8.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".rustls-native-certs."0.6.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "rustls-native-certs";
          version = "0.6.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "a9aace74cb666635c918e9c12bc0d348266037aa8eb599b5cba565709a8dff00";
          };
          dependencies = {
            ${
              if hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "darwin") then
                "openssl_probe"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".openssl-probe."0.1.6" {
                inherit profileName;
              }).out;
            rustls_pemfile =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pemfile."1.0.4" {
                inherit profileName;
              }).out;
            ${if hostPlatform.isWindows then "schannel" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".schannel."0.1.27" {
                inherit profileName;
              }).out;
            ${if hostPlatform.parsed.kernel.name == "darwin" then "security_framework" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".security-framework."2.11.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".rustls-native-certs."0.8.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "rustls-native-certs";
          version = "0.8.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "7fcff2dd52b58a8d98a70243663a0d234c4e2b79235637849d15913394a247d3";
          };
          dependencies = {
            ${
              if hostPlatform.isUnix && !(hostPlatform.parsed.kernel.name == "darwin") then
                "openssl_probe"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".openssl-probe."0.1.6" {
                inherit profileName;
              }).out;
            pki_types =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pki-types."1.11.0" {
                inherit profileName;
              }).out;
            ${if hostPlatform.isWindows then "schannel" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".schannel."0.1.27" {
                inherit profileName;
              }).out;
            ${if hostPlatform.parsed.kernel.name == "darwin" then "security_framework" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".security-framework."3.2.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".rustls-pemfile."1.0.4" =
      overridableMkRustCrate
        (profileName: rec {
          name = "rustls-pemfile";
          version = "1.0.4";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "1c74cae0a4cf6ccbbf5f359f08efdf8ee7e1dc532573bf0db71968cb56b1448c";
          };
          dependencies = {
            base64 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.21.7" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".rustls-pemfile."2.2.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "rustls-pemfile";
          version = "2.2.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "dce314e5fee3f39953d46bb63bb8a46d40c2f8fb7cc5a3b6cab2bde9721d6e50";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "std" ]
          ];
          dependencies = {
            pki_types =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pki-types."1.11.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".rustls-pki-types."1.11.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "rustls-pki-types";
          version = "1.11.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "917ce264624a4b4db1c364dcc35bfca9ded014d0a958cd47ad3e960e988ea51c";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "default" ]
            [ "std" ]
            [ "web" ]
            [ "web-time" ]
          ];
          dependencies = {
            ${if false then "web_time" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-time."1.1.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".rustls-webpki."0.101.7" =
      overridableMkRustCrate
        (profileName: rec {
          name = "rustls-webpki";
          version = "0.101.7";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "8b6275d1ee7a1cd780b64aca7726599a1dbc893b1e64144529e55c3c2f745765";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "default" ]
            [ "std" ]
          ];
          dependencies = {
            ring =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.17.14" {
                inherit profileName;
              }).out;
            untrusted =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".untrusted."0.9.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".rustls-webpki."0.103.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "rustls-webpki";
          version = "0.103.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "fef8b8769aaccf73098557a87cd1816b4f9c7c16811c9c77142aa695c16f2c03";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "aws-lc-rs" ]
            [ "ring" ]
            [ "std" ]
          ];
          dependencies = {
            aws_lc_rs =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".aws-lc-rs."1.13.0" {
                inherit profileName;
              }).out;
            ring =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.17.14" {
                inherit profileName;
              }).out;
            pki_types =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pki-types."1.11.0" {
                inherit profileName;
              }).out;
            untrusted =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".untrusted."0.9.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".rustversion."1.0.20" =
      overridableMkRustCrate
        (profileName: rec {
          name = "rustversion";
          version = "1.0.20";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "eded382c5f5f786b989652c49544c4877d9f015cc22e145a5ea8ea66c2921cd2";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".rusty_paseto."0.7.2" =
      overridableMkRustCrate
        (profileName: rec {
          name = "rusty_paseto";
          version = "0.7.2";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "05501841a4cac5c065cb6a501a62207c4c235e37d2882579a2505a2aa2837826";
          };
          features = builtins.concatLists [
            [ "batteries_included" ]
            [ "blake2" ]
            [ "chacha20" ]
            [ "core" ]
            [ "default" ]
            [ "ed25519-dalek" ]
            [ "erased-serde" ]
            [ "generic" ]
            [ "local" ]
            [ "public" ]
            [ "serde" ]
            [ "serde_json" ]
            [ "v4" ]
            [ "v4_local" ]
            [ "v4_public" ]
          ];
          dependencies = {
            base64 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.22.1" {
                inherit profileName;
              }).out;
            blake2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".blake2."0.10.6" {
                inherit profileName;
              }).out;
            chacha20 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".chacha20."0.9.1" {
                inherit profileName;
              }).out;
            digest =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" {
                inherit profileName;
              }).out;
            ed25519_dalek =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ed25519-dalek."2.1.1" {
                inherit profileName;
              }).out;
            erased_serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".erased-serde."0.4.6" {
                inherit profileName;
              }).out;
            hex =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" {
                inherit profileName;
              }).out;
            iso8601 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".iso8601."0.6.2" {
                inherit profileName;
              }).out;
            rand_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" {
                inherit profileName;
              }).out;
            ring =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.17.14" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            serde_json =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.140" {
                inherit profileName;
              }).out;
            thiserror =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.69" {
                inherit profileName;
              }).out;
            time =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".time."0.3.41" {
                inherit profileName;
              }).out;
            zeroize =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.8.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".ryu."1.0.20" =
      overridableMkRustCrate
        (profileName: rec {
          name = "ryu";
          version = "1.0.20";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "28d3b2b1366ec20994f1fd18c3c594f05c5dd4bc44d8bb0c1c632c8d6829481f";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".safemem."0.3.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "safemem";
          version = "0.3.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "ef703b7cb59335eae2eb93ceb664c0eb7ea6bf567079d843e09420219668e072";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "std" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".schannel."0.1.27" =
      overridableMkRustCrate
        (profileName: rec {
          name = "schannel";
          version = "0.1.27";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "1f29ebaa345f945cec9fbbc532eb307f0fdad8161f281b6369539c8d84876b3d";
          };
          dependencies = {
            windows_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.59.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".scopeguard."1.2.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "scopeguard";
          version = "1.2.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".sct."0.7.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "sct";
          version = "0.7.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "da046153aa2352493d6cb7da4b6e5c0c057d8a1d0a9aa8560baffdd945acd414";
          };
          dependencies = {
            ring =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ring."0.17.14" {
                inherit profileName;
              }).out;
            untrusted =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".untrusted."0.9.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".seahash."4.1.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "seahash";
          version = "4.1.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "1c107b6f4780854c8b126e228ea8869f4d7b71260f962fefb57b996b8959ba6b";
          };
          features = builtins.concatLists [
            [ "default" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".sec1."0.3.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "sec1";
          version = "0.3.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "3be24c1842290c45df0a7bf069e0c268a747ad05a192f2fd7dcfdbc1cba40928";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "base16ct" ]
            [ "default" ]
            [ "der" ]
            [ "generic-array" ]
            [ "pkcs8" ]
            [ "point" ]
            [ "subtle" ]
            [ "zeroize" ]
          ];
          dependencies = {
            base16ct =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base16ct."0.1.1" {
                inherit profileName;
              }).out;
            der =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".der."0.6.1" {
                inherit profileName;
              }).out;
            generic_array =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" {
                inherit profileName;
              }).out;
            pkcs8 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pkcs8."0.9.0" {
                inherit profileName;
              }).out;
            subtle =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".subtle."2.6.1" {
                inherit profileName;
              }).out;
            zeroize =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize."1.8.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".security-framework."2.11.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "security-framework";
          version = "2.11.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "897b2245f0b511c87893af39b033e5ca9cce68824c4d7e7630b5a1d339658d02";
          };
          features = builtins.concatLists [
            [ "OSX_10_10" ]
            [ "OSX_10_11" ]
            [ "OSX_10_12" ]
            [ "OSX_10_9" ]
            [ "default" ]
          ];
          dependencies = {
            bitflags =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.9.0" {
                inherit profileName;
              }).out;
            core_foundation =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.9.4" {
                inherit profileName;
              }).out;
            core_foundation_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.7" {
                inherit profileName;
              }).out;
            libc =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.171" {
                inherit profileName;
              }).out;
            security_framework_sys =
              (
                rustPackages."registry+https://github.com/rust-lang/crates.io-index".security-framework-sys."2.14.0"
                { inherit profileName; }
              ).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".security-framework."3.2.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "security-framework";
          version = "3.2.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "271720403f46ca04f7ba6f55d438f8bd878d6b8ca0a1046e8228c4145bcbb316";
          };
          features = builtins.concatLists [
            [ "OSX_10_12" ]
            [ "default" ]
          ];
          dependencies = {
            bitflags =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.9.0" {
                inherit profileName;
              }).out;
            core_foundation =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation."0.10.0" {
                inherit profileName;
              }).out;
            core_foundation_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.7" {
                inherit profileName;
              }).out;
            libc =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.171" {
                inherit profileName;
              }).out;
            security_framework_sys =
              (
                rustPackages."registry+https://github.com/rust-lang/crates.io-index".security-framework-sys."2.14.0"
                { inherit profileName; }
              ).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".security-framework-sys."2.14.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "security-framework-sys";
          version = "2.14.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "49db231d56a190491cb4aeda9527f1ad45345af50b0851622a7adb8c03b01c32";
          };
          features = builtins.concatLists [
            [ "OSX_10_10" ]
            [ "OSX_10_11" ]
            [ "OSX_10_12" ]
            [ "OSX_10_9" ]
          ];
          dependencies = {
            core_foundation_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".core-foundation-sys."0.8.7" {
                inherit profileName;
              }).out;
            libc =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.171" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".semver."1.0.26" =
      overridableMkRustCrate
        (profileName: rec {
          name = "semver";
          version = "1.0.26";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "56e6fa9c48d24d85fb3de5ad847117517440f6beceb7798af16b4a87d616b8d0";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "std" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".sentry."0.37.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "sentry";
          version = "0.37.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "255914a8e53822abd946e2ce8baa41d4cded6b8e938913b7f7b9da5b7ab44335";
          };
          features = builtins.concatLists [
            [ "backtrace" ]
            [ "contexts" ]
            [ "debug-images" ]
            [ "httpdate" ]
            [ "panic" ]
            [ "reqwest" ]
            [ "rustls" ]
            [ "sentry-backtrace" ]
            [ "sentry-contexts" ]
            [ "sentry-debug-images" ]
            [ "sentry-panic" ]
            [ "tokio" ]
            [ "webpki-roots" ]
          ];
          dependencies = {
            httpdate =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".httpdate."1.0.3" {
                inherit profileName;
              }).out;
            reqwest =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".reqwest."0.12.15" {
                inherit profileName;
              }).out;
            rustls =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.23.25" {
                inherit profileName;
              }).out;
            sentry_backtrace =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sentry-backtrace."0.37.0" {
                inherit profileName;
              }).out;
            sentry_contexts =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sentry-contexts."0.37.0" {
                inherit profileName;
              }).out;
            sentry_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sentry-core."0.37.0" {
                inherit profileName;
              }).out;
            sentry_debug_images =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sentry-debug-images."0.37.0" {
                inherit profileName;
              }).out;
            sentry_panic =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sentry-panic."0.37.0" {
                inherit profileName;
              }).out;
            sentry_tracing =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sentry-tracing."0.37.0" {
                inherit profileName;
              }).out;
            tokio =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.44.1" {
                inherit profileName;
              }).out;
            ureq =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ureq."2.12.1" {
                inherit profileName;
              }).out;
            webpki_roots =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webpki-roots."0.26.8" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".sentry-backtrace."0.37.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "sentry-backtrace";
          version = "0.37.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "00293cd332a859961f24fd69258f7e92af736feaeb91020cff84dac4188a4302";
          };
          dependencies = {
            backtrace =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".backtrace."0.3.71" {
                inherit profileName;
              }).out;
            once_cell =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.21.3" {
                inherit profileName;
              }).out;
            regex =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.11.1" {
                inherit profileName;
              }).out;
            sentry_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sentry-core."0.37.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".sentry-contexts."0.37.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "sentry-contexts";
          version = "0.37.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "961990f9caa76476c481de130ada05614cd7f5aa70fb57c2142f0e09ad3fb2aa";
          };
          dependencies = {
            hostname =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hostname."0.4.0" {
                inherit profileName;
              }).out;
            libc =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.171" {
                inherit profileName;
              }).out;
            ${if hostPlatform.isWindows then "os_info" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".os_info."3.10.0" {
                inherit profileName;
              }).out;
            sentry_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sentry-core."0.37.0" {
                inherit profileName;
              }).out;
            ${if !hostPlatform.isWindows then "uname" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".uname."0.1.1" {
                inherit profileName;
              }).out;
          };
          buildDependencies = {
            rustc_version =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc_version."0.4.1" {
                profileName = "__noProfile";
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".sentry-core."0.37.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "sentry-core";
          version = "0.37.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "1a6409d845707d82415c800290a5d63be5e3df3c2e417b0997c60531dfbd35ef";
          };
          features = builtins.concatLists [
            [ "client" ]
            [ "default" ]
            [ "rand" ]
            [ "release-health" ]
          ];
          dependencies = {
            once_cell =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.21.3" {
                inherit profileName;
              }).out;
            rand =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" {
                inherit profileName;
              }).out;
            sentry_types =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sentry-types."0.37.0" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            serde_json =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.140" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".sentry-debug-images."0.37.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "sentry-debug-images";
          version = "0.37.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "71ab5df4f3b64760508edfe0ba4290feab5acbbda7566a79d72673065888e5cc";
          };
          dependencies = {
            findshlibs =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".findshlibs."0.10.2" {
                inherit profileName;
              }).out;
            once_cell =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.21.3" {
                inherit profileName;
              }).out;
            sentry_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sentry-core."0.37.0" {
                inherit profileName;
              }).out;
          };
        });

    "git+https://github.com/auguwu/sentry-eyre".sentry-eyre."0.2.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "sentry-eyre";
          version = "0.2.0";
          registry = "git+https://github.com/auguwu/sentry-eyre";
          src = fetchCrateGit {
            url = "https://github.com/auguwu/sentry-eyre";
            name = "sentry-eyre";
            version = "0.2.0";
            rev = "7fc4ddffe82851940c7979d2b2e4f6727cf02f48";
          };
          dependencies = {
            eyre =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".eyre."0.6.12" {
                inherit profileName;
              }).out;
            sentry_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sentry-core."0.37.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".sentry-panic."0.37.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "sentry-panic";
          version = "0.37.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "609b1a12340495ce17baeec9e08ff8ed423c337c1a84dffae36a178c783623f3";
          };
          dependencies = {
            sentry_backtrace =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sentry-backtrace."0.37.0" {
                inherit profileName;
              }).out;
            sentry_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sentry-core."0.37.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".sentry-tower."0.37.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "sentry-tower";
          version = "0.37.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "4b98005537e38ee3bc10e7d36e7febe9b8e573d03f2ddd85fcdf05d21f9abd6d";
          };
          features = builtins.concatLists [
            [ "axum" ]
            [ "axum-matched-path" ]
            [ "default" ]
            [ "http" ]
            [ "pin-project" ]
            [ "release-health" ]
            [ "url" ]
          ];
          dependencies = {
            axum =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".axum."0.8.3" {
                inherit profileName;
              }).out;
            http =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.3.1" {
                inherit profileName;
              }).out;
            pin_project =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project."1.1.10" {
                inherit profileName;
              }).out;
            sentry_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sentry-core."0.37.0" {
                inherit profileName;
              }).out;
            tower_layer =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-layer."0.3.3" {
                inherit profileName;
              }).out;
            tower_service =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-service."0.3.3" {
                inherit profileName;
              }).out;
            url =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.5.4" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".sentry-tracing."0.37.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "sentry-tracing";
          version = "0.37.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "49f4e86402d5c50239dc7d8fd3f6d5e048221d5fcb4e026d8d50ab57fe4644cb";
          };
          features = builtins.concatLists [
            [ "backtrace" ]
            [ "default" ]
            [ "release-health" ]
          ];
          dependencies = {
            sentry_backtrace =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sentry-backtrace."0.37.0" {
                inherit profileName;
              }).out;
            sentry_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sentry-core."0.37.0" {
                inherit profileName;
              }).out;
            tracing_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.33" {
                inherit profileName;
              }).out;
            tracing_subscriber =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-subscriber."0.3.19" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".sentry-types."0.37.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "sentry-types";
          version = "0.37.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "3d3f117b8755dbede8260952de2aeb029e20f432e72634e8969af34324591631";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "protocol" ]
          ];
          dependencies = {
            debugid =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".debugid."0.8.0" {
                inherit profileName;
              }).out;
            hex =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" {
                inherit profileName;
              }).out;
            rand =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            serde_json =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.140" {
                inherit profileName;
              }).out;
            thiserror =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.69" {
                inherit profileName;
              }).out;
            time =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".time."0.3.41" {
                inherit profileName;
              }).out;
            url =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.5.4" {
                inherit profileName;
              }).out;
            uuid =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".uuid."1.16.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" =
      overridableMkRustCrate
        (profileName: rec {
          name = "serde";
          version = "1.0.219";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "5f0e2c6ed6606019b4e29e69dbaba95b11854410e5347d525002456dbbb786b6";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "default" ]
            [ "derive" ]
            [ "rc" ]
            [ "serde_derive" ]
            [ "std" ]
          ];
          dependencies = {
            serde_derive =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.219" {
                profileName = "__noProfile";
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".serde-wasm-bindgen."0.5.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "serde-wasm-bindgen";
          version = "0.5.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "f3b143e2833c57ab9ad3ea280d21fd34e285a42837aeb0ee301f4f41890fa00e";
          };
          dependencies = {
            js_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.77" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            wasm_bindgen =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".serde-wasm-bindgen."0.6.5" =
      overridableMkRustCrate
        (profileName: rec {
          name = "serde-wasm-bindgen";
          version = "0.6.5";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "8302e169f0eddcc139c70f139d19d6467353af16f9fce27e8c30158036a1e16b";
          };
          dependencies = {
            js_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.77" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            wasm_bindgen =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.219" =
      overridableMkRustCrate
        (profileName: rec {
          name = "serde_derive";
          version = "1.0.219";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "5b0276cf7f2c73365f7157c8123c21cd9a50fbbd844757af28ca1f5925fc2a00";
          };
          features = builtins.concatLists [
            [ "default" ]
          ];
          dependencies = {
            proc_macro2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.94" {
                inherit profileName;
              }).out;
            quote =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.40" {
                inherit profileName;
              }).out;
            syn =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.100" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.140" =
      overridableMkRustCrate
        (profileName: rec {
          name = "serde_json";
          version = "1.0.140";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "20068b6e96dc6c9bd23e01df8827e6c7e1f2fddd43c21810382803c136b99373";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "raw_value" ]
            [ "std" ]
          ];
          dependencies = {
            itoa =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.15" {
                inherit profileName;
              }).out;
            memchr =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.4" {
                inherit profileName;
              }).out;
            ryu =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ryu."1.0.20" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".serde_path_to_error."0.1.17" =
      overridableMkRustCrate
        (profileName: rec {
          name = "serde_path_to_error";
          version = "0.1.17";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "59fab13f937fa393d08645bf3a84bdfe86e296747b506ada67bb15f10f218b2a";
          };
          dependencies = {
            itoa =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.15" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".serde_spanned."0.6.8" =
      overridableMkRustCrate
        (profileName: rec {
          name = "serde_spanned";
          version = "0.6.8";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "87607cb1398ed59d48732e575a4c28a7a8ebf2454b964fe3f224f2afc07909e1";
          };
          features = builtins.concatLists [
            [ "serde" ]
          ];
          dependencies = {
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".serde_urlencoded."0.7.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "serde_urlencoded";
          version = "0.7.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "d3491c14715ca2294c4d6a88f15e84739788c1d030eed8c110436aafdaa2f3fd";
          };
          dependencies = {
            form_urlencoded =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".form_urlencoded."1.2.1" {
                inherit profileName;
              }).out;
            itoa =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.15" {
                inherit profileName;
              }).out;
            ryu =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ryu."1.0.20" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".sha1."0.10.6" =
      overridableMkRustCrate
        (profileName: rec {
          name = "sha1";
          version = "0.10.6";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "e3bf829a2d51ab4a5ddf1352d8470c140cadc8301b2ae1789db023f01cedd6ba";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "std" ]
          ];
          dependencies = {
            cfg_if =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {
                inherit profileName;
              }).out;
            ${
              if
                hostPlatform.parsed.cpu.name == "aarch64"
                || hostPlatform.parsed.cpu.name == "i686"
                || hostPlatform.parsed.cpu.name == "x86_64"
              then
                "cpufeatures"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.17" {
                inherit profileName;
              }).out;
            digest =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".sha1_smol."1.0.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "sha1_smol";
          version = "1.0.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "bbfa15b3dddfee50a0fff136974b3e1bde555604ba463834a7eb7deb6417705d";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" =
      overridableMkRustCrate
        (profileName: rec {
          name = "sha2";
          version = "0.10.8";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "793db75ad2bcafc3ffa7c68b215fee268f537982cd901d132f89c6343f3a3dc8";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "std" ]
          ];
          dependencies = {
            cfg_if =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {
                inherit profileName;
              }).out;
            ${
              if
                hostPlatform.parsed.cpu.name == "aarch64"
                || hostPlatform.parsed.cpu.name == "x86_64"
                || hostPlatform.parsed.cpu.name == "i686"
              then
                "cpufeatures"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cpufeatures."0.2.17" {
                inherit profileName;
              }).out;
            digest =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".sharded-slab."0.1.7" =
      overridableMkRustCrate
        (profileName: rec {
          name = "sharded-slab";
          version = "0.1.7";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6";
          };
          dependencies = {
            lazy_static =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lazy_static."1.5.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".shlex."1.3.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "shlex";
          version = "1.3.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "std" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".signal-hook-registry."1.4.2" =
      overridableMkRustCrate
        (profileName: rec {
          name = "signal-hook-registry";
          version = "1.4.2";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "a9e9e0b4211b72e7b8b6e85c807d36c212bdb33ea8587f7569562a84df5465b1";
          };
          dependencies = {
            libc =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.171" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".signature."1.6.4" =
      overridableMkRustCrate
        (profileName: rec {
          name = "signature";
          version = "1.6.4";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "74233d3b3b2f6d4b006dc19dee745e73e2a6bfb6f93607cd3b02bd5b00797d7c";
          };
          features = builtins.concatLists [
            [ "digest" ]
            [ "digest-preview" ]
            [ "hazmat-preview" ]
            [ "rand-preview" ]
            [ "rand_core" ]
            [ "std" ]
          ];
          dependencies = {
            digest =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" {
                inherit profileName;
              }).out;
            rand_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".signature."2.2.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "signature";
          version = "2.2.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "77549399552de45a898a580c1b41d445bf730df867cc44e6c0233bbc4b8329de";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "digest" ]
            [ "rand_core" ]
            [ "std" ]
          ];
          dependencies = {
            digest =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" {
                inherit profileName;
              }).out;
            rand_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand_core."0.6.4" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".sketches-ddsketch."0.3.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "sketches-ddsketch";
          version = "0.3.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "c1e9a774a6c28142ac54bb25d25562e6bcf957493a184f15ad4eebccb23e410a";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".slab."0.4.9" =
      overridableMkRustCrate
        (profileName: rec {
          name = "slab";
          version = "0.4.9";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "8f92a496fb766b417c996b9c5e57daf2f7ad3b0bebe1ccfca4856390e3d3bb67";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "std" ]
          ];
          buildDependencies = {
            autocfg =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".autocfg."1.4.0" {
                profileName = "__noProfile";
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".smallvec."1.14.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "smallvec";
          version = "1.14.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "7fcf8323ef1faaee30a44a340193b1ac6814fd9b7b4e88e9d4519a3e4abe1cfd";
          };
          features = builtins.concatLists [
            [ "const_generics" ]
            [ "const_new" ]
            [ "serde" ]
          ];
          dependencies = {
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".socket2."0.5.9" =
      overridableMkRustCrate
        (profileName: rec {
          name = "socket2";
          version = "0.5.9";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "4f5fd57c80058a56cf5c777ab8a126398ece8e442983605d280a44ce79d0edef";
          };
          features = builtins.concatLists [
            [ "all" ]
          ];
          dependencies = {
            ${if hostPlatform.isUnix then "libc" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.171" {
                inherit profileName;
              }).out;
            ${if hostPlatform.isWindows then "windows_sys" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".spin."0.9.8" =
      overridableMkRustCrate
        (profileName: rec {
          name = "spin";
          version = "0.9.8";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "6980e8d7511241f8acf4aebddbb1ff938df5eebe98691418c4468d0b72a96a67";
          };
          features = builtins.concatLists [
            [ "barrier" ]
            [ "default" ]
            [ "lazy" ]
            [ "lock_api" ]
            [ "lock_api_crate" ]
            [ "mutex" ]
            [ "once" ]
            [ "rwlock" ]
            [ "spin_mutex" ]
          ];
          dependencies = {
            lock_api_crate =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".lock_api."0.4.12" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".spki."0.6.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "spki";
          version = "0.6.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "67cf02bbac7a337dc36e4f5a693db6c21e7863f45070f7064577eb4367a3212b";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "base64ct" ]
          ];
          dependencies = {
            base64ct =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64ct."1.7.3" {
                inherit profileName;
              }).out;
            der =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".der."0.6.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".spki."0.7.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "spki";
          version = "0.7.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "d91ed6c858b01f942cd56b37a94b3e0a1798290327d1236e4d9cf4eaca44d29d";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "pem" ]
            [ "std" ]
          ];
          dependencies = {
            base64ct =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64ct."1.7.3" {
                inherit profileName;
              }).out;
            der =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".der."0.7.9" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".sqlx."0.8.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "sqlx";
          version = "0.8.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "4410e73b3c0d8442c5f99b425d7a435b5ee0ae4167b3196771dd3f7a01be745f";
          };
          features = builtins.concatLists [
            [ "_rt-tokio" ]
            [ "_sqlite" ]
            [ "derive" ]
            [ "macros" ]
            [ "migrate" ]
            [ "postgres" ]
            [ "runtime-tokio" ]
            [ "sqlite" ]
            [ "sqlx-macros" ]
            [ "sqlx-postgres" ]
            [ "sqlx-sqlite" ]
          ];
          dependencies = {
            sqlx_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sqlx-core."0.8.3" {
                inherit profileName;
              }).out;
            sqlx_macros =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".sqlx-macros."0.8.3" {
                profileName = "__noProfile";
              }).out;
            sqlx_mysql =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sqlx-mysql."0.8.3" {
                inherit profileName;
              }).out;
            sqlx_postgres =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sqlx-postgres."0.8.3" {
                inherit profileName;
              }).out;
            sqlx_sqlite =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sqlx-sqlite."0.8.3" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".sqlx-core."0.8.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "sqlx-core";
          version = "0.8.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "6a007b6936676aa9ab40207cde35daab0a04b823be8ae004368c0793b96a61e0";
          };
          features = builtins.concatLists [
            [ "_rt-tokio" ]
            [ "any" ]
            [ "crc" ]
            [ "default" ]
            [ "json" ]
            [ "migrate" ]
            [ "offline" ]
            [ "serde" ]
            [ "serde_json" ]
            [ "sha2" ]
            [ "tokio" ]
            [ "tokio-stream" ]
          ];
          dependencies = {
            bytes =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.10.1" {
                inherit profileName;
              }).out;
            crc =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc."3.2.1" {
                inherit profileName;
              }).out;
            crossbeam_queue =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-queue."0.3.12" {
                inherit profileName;
              }).out;
            either =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.15.0" {
                inherit profileName;
              }).out;
            event_listener =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".event-listener."5.4.0" {
                inherit profileName;
              }).out;
            futures_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" {
                inherit profileName;
              }).out;
            futures_intrusive =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-intrusive."0.5.0" {
                inherit profileName;
              }).out;
            futures_io =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.31" {
                inherit profileName;
              }).out;
            futures_util =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" {
                inherit profileName;
              }).out;
            hashbrown =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.15.2" {
                inherit profileName;
              }).out;
            hashlink =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashlink."0.10.0" {
                inherit profileName;
              }).out;
            indexmap =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."2.8.0" {
                inherit profileName;
              }).out;
            log =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.27" {
                inherit profileName;
              }).out;
            memchr =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.4" {
                inherit profileName;
              }).out;
            once_cell =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.21.3" {
                inherit profileName;
              }).out;
            percent_encoding =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.1" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            serde_json =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.140" {
                inherit profileName;
              }).out;
            sha2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" {
                inherit profileName;
              }).out;
            smallvec =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.14.0" {
                inherit profileName;
              }).out;
            thiserror =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."2.0.12" {
                inherit profileName;
              }).out;
            tokio =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.44.1" {
                inherit profileName;
              }).out;
            tokio_stream =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-stream."0.1.17" {
                inherit profileName;
              }).out;
            tracing =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" {
                inherit profileName;
              }).out;
            url =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.5.4" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".sqlx-macros."0.8.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "sqlx-macros";
          version = "0.8.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "3112e2ad78643fef903618d78cf0aec1cb3134b019730edb039b69eaf531f310";
          };
          features = builtins.concatLists [
            [ "_rt-tokio" ]
            [ "default" ]
            [ "derive" ]
            [ "macros" ]
            [ "migrate" ]
            [ "postgres" ]
            [ "sqlite" ]
          ];
          dependencies = {
            proc_macro2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.94" {
                inherit profileName;
              }).out;
            quote =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.40" {
                inherit profileName;
              }).out;
            sqlx_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sqlx-core."0.8.3" {
                inherit profileName;
              }).out;
            sqlx_macros_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sqlx-macros-core."0.8.3" {
                inherit profileName;
              }).out;
            syn =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.100" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".sqlx-macros-core."0.8.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "sqlx-macros-core";
          version = "0.8.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "4e9f90acc5ab146a99bf5061a7eb4976b573f560bc898ef3bf8435448dd5e7ad";
          };
          features = builtins.concatLists [
            [ "_rt-tokio" ]
            [ "_sqlite" ]
            [ "default" ]
            [ "derive" ]
            [ "macros" ]
            [ "migrate" ]
            [ "postgres" ]
            [ "sqlite" ]
            [ "sqlx-postgres" ]
            [ "sqlx-sqlite" ]
            [ "tokio" ]
          ];
          dependencies = {
            dotenvy =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".dotenvy."0.15.7" {
                inherit profileName;
              }).out;
            either =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.15.0" {
                inherit profileName;
              }).out;
            heck =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".heck."0.5.0" {
                inherit profileName;
              }).out;
            hex =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" {
                inherit profileName;
              }).out;
            once_cell =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.21.3" {
                inherit profileName;
              }).out;
            proc_macro2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.94" {
                inherit profileName;
              }).out;
            quote =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.40" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            serde_json =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.140" {
                inherit profileName;
              }).out;
            sha2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" {
                inherit profileName;
              }).out;
            sqlx_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sqlx-core."0.8.3" {
                inherit profileName;
              }).out;
            sqlx_postgres =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sqlx-postgres."0.8.3" {
                inherit profileName;
              }).out;
            sqlx_sqlite =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sqlx-sqlite."0.8.3" {
                inherit profileName;
              }).out;
            syn =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.100" {
                inherit profileName;
              }).out;
            tempfile =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tempfile."3.19.1" {
                inherit profileName;
              }).out;
            tokio =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.44.1" {
                inherit profileName;
              }).out;
            url =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.5.4" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".sqlx-mysql."0.8.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "sqlx-mysql";
          version = "0.8.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "4560278f0e00ce64938540546f59f590d60beee33fffbd3b9cd47851e5fff233";
          };
          features = builtins.concatLists [
            [ "migrate" ]
          ];
          dependencies = {
            atoi =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".atoi."2.0.0" {
                inherit profileName;
              }).out;
            base64 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.22.1" {
                inherit profileName;
              }).out;
            bitflags =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.9.0" {
                inherit profileName;
              }).out;
            byteorder =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" {
                inherit profileName;
              }).out;
            bytes =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.10.1" {
                inherit profileName;
              }).out;
            crc =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc."3.2.1" {
                inherit profileName;
              }).out;
            digest =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".digest."0.10.7" {
                inherit profileName;
              }).out;
            dotenvy =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".dotenvy."0.15.7" {
                inherit profileName;
              }).out;
            either =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.15.0" {
                inherit profileName;
              }).out;
            futures_channel =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.31" {
                inherit profileName;
              }).out;
            futures_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" {
                inherit profileName;
              }).out;
            futures_io =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.31" {
                inherit profileName;
              }).out;
            futures_util =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" {
                inherit profileName;
              }).out;
            generic_array =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".generic-array."0.14.7" {
                inherit profileName;
              }).out;
            hex =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" {
                inherit profileName;
              }).out;
            hkdf =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hkdf."0.12.4" {
                inherit profileName;
              }).out;
            hmac =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hmac."0.12.1" {
                inherit profileName;
              }).out;
            itoa =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.15" {
                inherit profileName;
              }).out;
            log =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.27" {
                inherit profileName;
              }).out;
            md5 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".md-5."0.10.6" {
                inherit profileName;
              }).out;
            memchr =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.4" {
                inherit profileName;
              }).out;
            once_cell =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.21.3" {
                inherit profileName;
              }).out;
            percent_encoding =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.1" {
                inherit profileName;
              }).out;
            rand =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" {
                inherit profileName;
              }).out;
            rsa =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rsa."0.9.8" {
                inherit profileName;
              }).out;
            sha1 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha1."0.10.6" {
                inherit profileName;
              }).out;
            sha2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" {
                inherit profileName;
              }).out;
            smallvec =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.14.0" {
                inherit profileName;
              }).out;
            sqlx_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sqlx-core."0.8.3" {
                inherit profileName;
              }).out;
            stringprep =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".stringprep."0.1.5" {
                inherit profileName;
              }).out;
            thiserror =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."2.0.12" {
                inherit profileName;
              }).out;
            tracing =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" {
                inherit profileName;
              }).out;
            whoami =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".whoami."1.6.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".sqlx-postgres."0.8.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "sqlx-postgres";
          version = "0.8.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "c5b98a57f363ed6764d5b3a12bfedf62f07aa16e1856a7ddc2a0bb190a959613";
          };
          features = builtins.concatLists [
            [ "migrate" ]
            [ "offline" ]
          ];
          dependencies = {
            atoi =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".atoi."2.0.0" {
                inherit profileName;
              }).out;
            base64 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.22.1" {
                inherit profileName;
              }).out;
            bitflags =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.9.0" {
                inherit profileName;
              }).out;
            byteorder =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".byteorder."1.5.0" {
                inherit profileName;
              }).out;
            crc =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crc."3.2.1" {
                inherit profileName;
              }).out;
            dotenvy =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".dotenvy."0.15.7" {
                inherit profileName;
              }).out;
            ${if hostPlatform.parsed.kernel.name == "windows" then "etcetera" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".etcetera."0.8.0" {
                inherit profileName;
              }).out;
            futures_channel =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.31" {
                inherit profileName;
              }).out;
            futures_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" {
                inherit profileName;
              }).out;
            futures_util =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" {
                inherit profileName;
              }).out;
            hex =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hex."0.4.3" {
                inherit profileName;
              }).out;
            hkdf =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hkdf."0.12.4" {
                inherit profileName;
              }).out;
            hmac =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hmac."0.12.1" {
                inherit profileName;
              }).out;
            home =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".home."0.5.11" {
                inherit profileName;
              }).out;
            itoa =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.15" {
                inherit profileName;
              }).out;
            log =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.27" {
                inherit profileName;
              }).out;
            md5 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".md-5."0.10.6" {
                inherit profileName;
              }).out;
            memchr =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.4" {
                inherit profileName;
              }).out;
            once_cell =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.21.3" {
                inherit profileName;
              }).out;
            rand =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            serde_json =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.140" {
                inherit profileName;
              }).out;
            sha2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sha2."0.10.8" {
                inherit profileName;
              }).out;
            smallvec =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.14.0" {
                inherit profileName;
              }).out;
            sqlx_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sqlx-core."0.8.3" {
                inherit profileName;
              }).out;
            stringprep =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".stringprep."0.1.5" {
                inherit profileName;
              }).out;
            thiserror =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."2.0.12" {
                inherit profileName;
              }).out;
            tracing =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" {
                inherit profileName;
              }).out;
            whoami =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".whoami."1.6.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".sqlx-sqlite."0.8.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "sqlx-sqlite";
          version = "0.8.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "f85ca71d3a5b24e64e1d08dd8fe36c6c95c339a896cc33068148906784620540";
          };
          features = builtins.concatLists [
            [ "bundled" ]
            [ "migrate" ]
            [ "offline" ]
            [ "serde" ]
          ];
          dependencies = {
            atoi =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".atoi."2.0.0" {
                inherit profileName;
              }).out;
            flume =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".flume."0.11.1" {
                inherit profileName;
              }).out;
            futures_channel =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-channel."0.3.31" {
                inherit profileName;
              }).out;
            futures_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" {
                inherit profileName;
              }).out;
            futures_executor =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-executor."0.3.31" {
                inherit profileName;
              }).out;
            futures_intrusive =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-intrusive."0.5.0" {
                inherit profileName;
              }).out;
            futures_util =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" {
                inherit profileName;
              }).out;
            libsqlite3_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libsqlite3-sys."0.30.1" {
                inherit profileName;
              }).out;
            log =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.27" {
                inherit profileName;
              }).out;
            percent_encoding =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.1" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            serde_urlencoded =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_urlencoded."0.7.1" {
                inherit profileName;
              }).out;
            sqlx_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sqlx-core."0.8.3" {
                inherit profileName;
              }).out;
            tracing =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" {
                inherit profileName;
              }).out;
            url =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.5.4" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".stable_deref_trait."1.2.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "stable_deref_trait";
          version = "1.2.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "a8f112729512f8e442d81f95a8a7ddf2b7c6b8a1a6f509a95864142b30cab2d3";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "std" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".stretto."0.8.4" =
      overridableMkRustCrate
        (profileName: rec {
          name = "stretto";
          version = "0.8.4";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "70a313e115c2cd9a88d99d60386bc88641c853d468b2c3bc454c294f385fc084";
          };
          features = builtins.concatLists [
            [ "async" ]
            [ "async-channel" ]
            [ "async-io" ]
            [ "crossbeam-channel" ]
            [ "default" ]
            [ "futures" ]
            [ "sync" ]
          ];
          dependencies = {
            async_channel =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-channel."2.3.1" {
                inherit profileName;
              }).out;
            async_io =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".async-io."2.4.0" {
                inherit profileName;
              }).out;
            atomic =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".atomic."0.6.0" {
                inherit profileName;
              }).out;
            crossbeam_channel =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".crossbeam-channel."0.5.14" {
                inherit profileName;
              }).out;
            futures =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.31" {
                inherit profileName;
              }).out;
            ${if false then "getrandom" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.2.15" {
                inherit profileName;
              }).out;
            parking_lot =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.3" {
                inherit profileName;
              }).out;
            rand =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rand."0.8.5" {
                inherit profileName;
              }).out;
            seahash =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".seahash."4.1.0" {
                inherit profileName;
              }).out;
            thiserror =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.69" {
                inherit profileName;
              }).out;
            tracing =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" {
                inherit profileName;
              }).out;
            wg =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wg."0.9.2" {
                inherit profileName;
              }).out;
            xxhash_rust =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".xxhash-rust."0.8.15" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".stringprep."0.1.5" =
      overridableMkRustCrate
        (profileName: rec {
          name = "stringprep";
          version = "0.1.5";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "7b4df3d392d81bd458a8a621b8bffbd2302a12ffe288a9d931670948749463b1";
          };
          dependencies = {
            unicode_bidi =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-bidi."0.3.18" {
                inherit profileName;
              }).out;
            unicode_normalization =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-normalization."0.1.24"
                { inherit profileName; }
              ).out;
            unicode_properties =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-properties."0.1.3" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".strsim."0.11.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "strsim";
          version = "0.11.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "7da8b5736845d9f2fcb837ea5d9e2628564b3b043a70948a3f0b778838c5fb4f";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".subtle."2.6.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "subtle";
          version = "2.6.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "13c2bddecc57b384dee18652358fb23172facb8a2c51ccc10d74c157bdea3292";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "i128" ]
            [ "std" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".syn."1.0.109" =
      overridableMkRustCrate
        (profileName: rec {
          name = "syn";
          version = "1.0.109";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237";
          };
          dependencies = {
            proc_macro2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.94" {
                inherit profileName;
              }).out;
            unicode_ident =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-ident."1.0.18" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".syn."2.0.100" =
      overridableMkRustCrate
        (profileName: rec {
          name = "syn";
          version = "2.0.100";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "b09a44accad81e1ba1cd74a32461ba89dee89095ba17b32f5d03683b1b1fc2a0";
          };
          features = builtins.concatLists [
            [ "clone-impls" ]
            [ "default" ]
            [ "derive" ]
            [ "extra-traits" ]
            [ "fold" ]
            [ "full" ]
            [ "parsing" ]
            [ "printing" ]
            [ "proc-macro" ]
            [ "visit" ]
            [ "visit-mut" ]
          ];
          dependencies = {
            proc_macro2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.94" {
                inherit profileName;
              }).out;
            quote =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.40" {
                inherit profileName;
              }).out;
            unicode_ident =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-ident."1.0.18" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".sync_wrapper."1.0.2" =
      overridableMkRustCrate
        (profileName: rec {
          name = "sync_wrapper";
          version = "1.0.2";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "0bf256ce5efdfa370213c1dabab5935a12e49f2c58d15e9eac2870d3b4f27263";
          };
          features = builtins.concatLists [
            [ "futures" ]
            [ "futures-core" ]
          ];
          dependencies = {
            futures_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".synstructure."0.13.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "synstructure";
          version = "0.13.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "c8af7666ab7b6390ab78131fb5b0fce11d6b7a6951602017c35fa82800708971";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "proc-macro" ]
          ];
          dependencies = {
            proc_macro2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.94" {
                inherit profileName;
              }).out;
            quote =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.40" {
                inherit profileName;
              }).out;
            syn =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.100" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".tempfile."3.19.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "tempfile";
          version = "3.19.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "7437ac7763b9b123ccf33c338a5cc1bac6f69b45a136c19bdd8a65e3916435bf";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "getrandom" ]
          ];
          dependencies = {
            fastrand =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".fastrand."2.3.0" {
                inherit profileName;
              }).out;
            ${
              if hostPlatform.isUnix || hostPlatform.isWindows || hostPlatform.parsed.kernel.name == "wasi" then
                "getrandom"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".getrandom."0.3.2" {
                inherit profileName;
              }).out;
            once_cell =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.21.3" {
                inherit profileName;
              }).out;
            ${if hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "wasi" then "rustix" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustix."1.0.5" {
                inherit profileName;
              }).out;
            ${if hostPlatform.isWindows then "windows_sys" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.59.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.69" =
      overridableMkRustCrate
        (profileName: rec {
          name = "thiserror";
          version = "1.0.69";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "b6aaf5339b578ea85b50e080feb250a3e8ae8cfcdff9a461c9ec2904bc923f52";
          };
          dependencies = {
            thiserror_impl =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror-impl."1.0.69" {
                profileName = "__noProfile";
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".thiserror."2.0.12" =
      overridableMkRustCrate
        (profileName: rec {
          name = "thiserror";
          version = "2.0.12";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "567b8a2dae586314f7be2a752ec7474332959c6460e02bde30d702a66d488708";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "std" ]
          ];
          dependencies = {
            thiserror_impl =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror-impl."2.0.12" {
                profileName = "__noProfile";
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".thiserror-impl."1.0.69" =
      overridableMkRustCrate
        (profileName: rec {
          name = "thiserror-impl";
          version = "1.0.69";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "4fee6c4efc90059e10f81e6d42c60a18f76588c3d74cb83a0b242a2b6c7504c1";
          };
          dependencies = {
            proc_macro2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.94" {
                inherit profileName;
              }).out;
            quote =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.40" {
                inherit profileName;
              }).out;
            syn =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.100" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".thiserror-impl."2.0.12" =
      overridableMkRustCrate
        (profileName: rec {
          name = "thiserror-impl";
          version = "2.0.12";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "7f7cf42b4507d8ea322120659672cf1b9dbb93f8f2d4ecfd6e51350ff5b17a1d";
          };
          dependencies = {
            proc_macro2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.94" {
                inherit profileName;
              }).out;
            quote =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.40" {
                inherit profileName;
              }).out;
            syn =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.100" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".thread_local."1.1.8" =
      overridableMkRustCrate
        (profileName: rec {
          name = "thread_local";
          version = "1.1.8";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "8b9ef9bad013ada3808854ceac7b46812a6465ba368859a37e2100283d2d719c";
          };
          dependencies = {
            cfg_if =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {
                inherit profileName;
              }).out;
            once_cell =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.21.3" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".threadpool."1.8.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "threadpool";
          version = "1.8.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "d050e60b33d41c19108b32cea32164033a9013fe3b46cbd4457559bfbf77afaa";
          };
          dependencies = {
            num_cpus =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_cpus."1.16.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".time."0.3.41" =
      overridableMkRustCrate
        (profileName: rec {
          name = "time";
          version = "0.3.41";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "8a7619e19bc266e0f9c5e6686659d394bc57973859340060a69221e57dbc0c40";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "default" ]
            [ "formatting" ]
            [ "local-offset" ]
            [ "parsing" ]
            [ "std" ]
          ];
          dependencies = {
            deranged =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".deranged."0.4.1" {
                inherit profileName;
              }).out;
            itoa =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".itoa."1.0.15" {
                inherit profileName;
              }).out;
            ${if hostPlatform.isUnix then "libc" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.171" {
                inherit profileName;
              }).out;
            num_conv =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-conv."0.1.0" {
                inherit profileName;
              }).out;
            ${if hostPlatform.isUnix then "num_threads" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num_threads."0.1.7" {
                inherit profileName;
              }).out;
            powerfmt =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".powerfmt."0.2.0" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            time_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".time-core."0.1.4" {
                inherit profileName;
              }).out;
            time_macros =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".time-macros."0.2.22" {
                profileName = "__noProfile";
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".time-core."0.1.4" =
      overridableMkRustCrate
        (profileName: rec {
          name = "time-core";
          version = "0.1.4";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "c9e9a38711f559d9e3ce1cdb06dd7c5b8ea546bc90052da6d06bb76da74bb07c";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".time-macros."0.2.22" =
      overridableMkRustCrate
        (profileName: rec {
          name = "time-macros";
          version = "0.2.22";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "3526739392ec93fd8b359c8e98514cb3e8e021beb4e5f597b00a0221f8ed8a49";
          };
          features = builtins.concatLists [
            [ "formatting" ]
            [ "parsing" ]
          ];
          dependencies = {
            num_conv =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".num-conv."0.1.0" {
                inherit profileName;
              }).out;
            time_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".time-core."0.1.4" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".tiny_http."0.12.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "tiny_http";
          version = "0.12.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "389915df6413a2e74fb181895f933386023c71110878cd0825588928e64cdc82";
          };
          dependencies = {
            ascii =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ascii."1.1.0" {
                inherit profileName;
              }).out;
            chunked_transfer =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".chunked_transfer."1.5.0" {
                inherit profileName;
              }).out;
            httpdate =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".httpdate."1.0.3" {
                inherit profileName;
              }).out;
            log =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.27" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".tinystr."0.7.6" =
      overridableMkRustCrate
        (profileName: rec {
          name = "tinystr";
          version = "0.7.6";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "9117f5d4db391c1cf6927e7bea3db74b9a1c1add8f7eda9ffd5364f40f57b82f";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "zerovec" ]
          ];
          dependencies = {
            displaydoc =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".displaydoc."0.2.5" {
                profileName = "__noProfile";
              }).out;
            zerovec =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zerovec."0.10.4" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".tinyvec."1.9.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "tinyvec";
          version = "1.9.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "09b3661f17e86524eccd4371ab0429194e0d7c008abb45f7a7495b1719463c71";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "default" ]
            [ "tinyvec_macros" ]
          ];
          dependencies = {
            tinyvec_macros =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinyvec_macros."0.1.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".tinyvec_macros."0.1.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "tinyvec_macros";
          version = "0.1.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "1f3ccbac311fea05f86f61904b462b55fb3df8837a366dfc601a0161d0532f20";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".tokio."1.44.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "tokio";
          version = "1.44.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "f382da615b842244d4b8738c82ed1275e6c5dd90c459a30941cd07080b06c91a";
          };
          features = builtins.concatLists [
            [ "bytes" ]
            [ "default" ]
            [ "fs" ]
            [ "io-std" ]
            [ "io-util" ]
            [ "libc" ]
            [ "macros" ]
            [ "mio" ]
            [ "net" ]
            [ "process" ]
            [ "rt" ]
            [ "rt-multi-thread" ]
            [ "signal" ]
            [ "signal-hook-registry" ]
            [ "socket2" ]
            [ "sync" ]
            [ "time" ]
            [ "tokio-macros" ]
            [ "windows-sys" ]
          ];
          dependencies = {
            ${if false then "backtrace" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".backtrace."0.3.71" {
                inherit profileName;
              }).out;
            bytes =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.10.1" {
                inherit profileName;
              }).out;
            ${if hostPlatform.isUnix then "libc" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.171" {
                inherit profileName;
              }).out;
            mio =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".mio."1.0.3" {
                inherit profileName;
              }).out;
            pin_project_lite =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.16" {
                inherit profileName;
              }).out;
            ${if hostPlatform.isUnix then "signal_hook_registry" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".signal-hook-registry."1.4.2" {
                inherit profileName;
              }).out;
            socket2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".socket2."0.5.9" {
                inherit profileName;
              }).out;
            tokio_macros =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio-macros."2.5.0" {
                profileName = "__noProfile";
              }).out;
            ${if hostPlatform.isWindows then "windows_sys" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".tokio-macros."2.5.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "tokio-macros";
          version = "2.5.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "6e06d43f1345a3bcd39f6a56dbb7dcab2ba47e68e8ac134855e7e2bdbaf8cab8";
          };
          dependencies = {
            proc_macro2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.94" {
                inherit profileName;
              }).out;
            quote =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.40" {
                inherit profileName;
              }).out;
            syn =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.100" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".tokio-rustls."0.24.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "tokio-rustls";
          version = "0.24.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "c28327cf380ac148141087fbfb9de9d7bd4e84ab5d2c28fbc911d753de8a7081";
          };
          features = builtins.concatLists [
            [ "logging" ]
            [ "tls12" ]
          ];
          dependencies = {
            rustls =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.21.12" {
                inherit profileName;
              }).out;
            tokio =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.44.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".tokio-rustls."0.26.2" =
      overridableMkRustCrate
        (profileName: rec {
          name = "tokio-rustls";
          version = "0.26.2";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "8e727b36a1a0e8b74c376ac2211e40c2c8af09fb4013c60d910495810f008e9b";
          };
          features = builtins.concatLists [
            [ "aws_lc_rs" ]
            [ "default" ]
            [ "logging" ]
            [ "ring" ]
            [ "tls12" ]
          ];
          dependencies = {
            rustls =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.23.25" {
                inherit profileName;
              }).out;
            tokio =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.44.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".tokio-stream."0.1.17" =
      overridableMkRustCrate
        (profileName: rec {
          name = "tokio-stream";
          version = "0.1.17";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "eca58d7bba4a75707817a2c44174253f9236b2d5fbd055602e9d5c07c139a047";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "fs" ]
            [ "time" ]
          ];
          dependencies = {
            futures_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" {
                inherit profileName;
              }).out;
            pin_project_lite =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.16" {
                inherit profileName;
              }).out;
            tokio =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.44.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".tokio-util."0.7.14" =
      overridableMkRustCrate
        (profileName: rec {
          name = "tokio-util";
          version = "0.7.14";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "6b9590b93e6fcc1739458317cccd391ad3955e2bde8913edf6f95f9e65a8f034";
          };
          features = builtins.concatLists [
            [ "codec" ]
            [ "compat" ]
            [ "default" ]
            [ "futures-io" ]
            [ "io" ]
          ];
          dependencies = {
            bytes =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.10.1" {
                inherit profileName;
              }).out;
            futures_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" {
                inherit profileName;
              }).out;
            futures_io =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-io."0.3.31" {
                inherit profileName;
              }).out;
            futures_sink =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-sink."0.3.31" {
                inherit profileName;
              }).out;
            pin_project_lite =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.16" {
                inherit profileName;
              }).out;
            tokio =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.44.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".toml."0.8.20" =
      overridableMkRustCrate
        (profileName: rec {
          name = "toml";
          version = "0.8.20";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "cd87a5cdd6ffab733b2f74bc4fd7ee5fff6634124999ac278c35fc78c6120148";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "display" ]
            [ "parse" ]
          ];
          dependencies = {
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            serde_spanned =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_spanned."0.6.8" {
                inherit profileName;
              }).out;
            toml_datetime =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml_datetime."0.6.8" {
                inherit profileName;
              }).out;
            toml_edit =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml_edit."0.22.24" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".toml_datetime."0.6.8" =
      overridableMkRustCrate
        (profileName: rec {
          name = "toml_datetime";
          version = "0.6.8";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "0dd7358ecb8fc2f8d014bf86f6f638ce72ba252a2c3a2572f2a795f1d23efb41";
          };
          features = builtins.concatLists [
            [ "serde" ]
          ];
          dependencies = {
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".toml_edit."0.19.15" =
      overridableMkRustCrate
        (profileName: rec {
          name = "toml_edit";
          version = "0.19.15";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "1b5bb770da30e5cbfde35a2d7b9b8a2c4b8ef89548a7a6aeab5c9a576e3e7421";
          };
          features = builtins.concatLists [
            [ "default" ]
          ];
          dependencies = {
            indexmap =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."2.8.0" {
                inherit profileName;
              }).out;
            toml_datetime =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml_datetime."0.6.8" {
                inherit profileName;
              }).out;
            winnow =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winnow."0.5.40" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".toml_edit."0.22.24" =
      overridableMkRustCrate
        (profileName: rec {
          name = "toml_edit";
          version = "0.22.24";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "17b4795ff5edd201c7cd6dca065ae59972ce77d1b80fa0a84d94950ece7d1474";
          };
          features = builtins.concatLists [
            [ "display" ]
            [ "parse" ]
            [ "serde" ]
          ];
          dependencies = {
            indexmap =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."2.8.0" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            serde_spanned =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_spanned."0.6.8" {
                inherit profileName;
              }).out;
            toml_datetime =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".toml_datetime."0.6.8" {
                inherit profileName;
              }).out;
            winnow =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".winnow."0.7.4" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".tower."0.5.2" =
      overridableMkRustCrate
        (profileName: rec {
          name = "tower";
          version = "0.5.2";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "d039ad9159c98b70ecfd540b2573b97f7f52c3e8d9f8ad57a24b916a536975f9";
          };
          features = builtins.concatLists [
            [ "__common" ]
            [ "futures-core" ]
            [ "futures-util" ]
            [ "log" ]
            [ "make" ]
            [ "pin-project-lite" ]
            [ "sync_wrapper" ]
            [ "timeout" ]
            [ "tokio" ]
            [ "tracing" ]
            [ "util" ]
          ];
          dependencies = {
            futures_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" {
                inherit profileName;
              }).out;
            futures_util =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" {
                inherit profileName;
              }).out;
            pin_project_lite =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.16" {
                inherit profileName;
              }).out;
            sync_wrapper =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sync_wrapper."1.0.2" {
                inherit profileName;
              }).out;
            tokio =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.44.1" {
                inherit profileName;
              }).out;
            tower_layer =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-layer."0.3.3" {
                inherit profileName;
              }).out;
            tower_service =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-service."0.3.3" {
                inherit profileName;
              }).out;
            tracing =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".tower-http."0.6.2" =
      overridableMkRustCrate
        (profileName: rec {
          name = "tower-http";
          version = "0.6.2";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "403fa3b783d4b626a8ad51d766ab03cb6d2dbfc46b1c5d4448395e6628dc9697";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "trace" ]
            [ "tracing" ]
          ];
          dependencies = {
            bitflags =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.9.0" {
                inherit profileName;
              }).out;
            bytes =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bytes."1.10.1" {
                inherit profileName;
              }).out;
            http =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http."1.3.1" {
                inherit profileName;
              }).out;
            http_body =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".http-body."1.0.1" {
                inherit profileName;
              }).out;
            pin_project_lite =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.16" {
                inherit profileName;
              }).out;
            tower_layer =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-layer."0.3.3" {
                inherit profileName;
              }).out;
            tower_service =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tower-service."0.3.3" {
                inherit profileName;
              }).out;
            tracing =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".tower-layer."0.3.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "tower-layer";
          version = "0.3.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "121c2a6cda46980bb0fcd1647ffaf6cd3fc79a013de288782836f6df9c48780e";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".tower-service."0.3.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "tower-service";
          version = "0.3.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "8df9b6e13f2d32c91b9bd719c00d1958837bc7dec474d94952798cc8e69eeec3";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" =
      overridableMkRustCrate
        (profileName: rec {
          name = "tracing";
          version = "0.1.41";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0";
          };
          features = builtins.concatLists [
            [ "attributes" ]
            [ "default" ]
            [ "log" ]
            [ "std" ]
            [ "tracing-attributes" ]
          ];
          dependencies = {
            log =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.27" {
                inherit profileName;
              }).out;
            pin_project_lite =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.16" {
                inherit profileName;
              }).out;
            tracing_attributes =
              (
                buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-attributes."0.1.28"
                { profileName = "__noProfile"; }
              ).out;
            tracing_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.33" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".tracing-attributes."0.1.28" =
      overridableMkRustCrate
        (profileName: rec {
          name = "tracing-attributes";
          version = "0.1.28";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "395ae124c09f9e6918a2310af6038fba074bcf474ac352496d5910dd59a2226d";
          };
          dependencies = {
            proc_macro2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.94" {
                inherit profileName;
              }).out;
            quote =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.40" {
                inherit profileName;
              }).out;
            syn =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.100" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.33" =
      overridableMkRustCrate
        (profileName: rec {
          name = "tracing-core";
          version = "0.1.33";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "e672c95779cf947c5311f83787af4fa8fffd12fb27e4993211a84bdfd9610f9c";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "once_cell" ]
            [ "std" ]
          ];
          dependencies = {
            once_cell =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.21.3" {
                inherit profileName;
              }).out;
            ${if false then "valuable" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".valuable."0.1.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".tracing-error."0.2.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "tracing-error";
          version = "0.2.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "8b1581020d7a273442f5b45074a6a57d5757ad0a47dac0e9f0bd57b81936f3db";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "traced-error" ]
          ];
          dependencies = {
            tracing =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" {
                inherit profileName;
              }).out;
            tracing_subscriber =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-subscriber."0.3.19" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".tracing-log."0.2.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "tracing-log";
          version = "0.2.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "ee855f1f400bd0e5c02d150ae5de3840039a3f54b025156404e34c23c03f47c3";
          };
          features = builtins.concatLists [
            [ "log-tracer" ]
            [ "std" ]
          ];
          dependencies = {
            log =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.27" {
                inherit profileName;
              }).out;
            once_cell =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.21.3" {
                inherit profileName;
              }).out;
            tracing_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.33" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".tracing-serde."0.2.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "tracing-serde";
          version = "0.2.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "704b1aeb7be0d0a84fc9828cae51dab5970fee5088f83d1dd7ee6f6246fc6ff1";
          };
          dependencies = {
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            tracing_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.33" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".tracing-subscriber."0.3.19" =
      overridableMkRustCrate
        (profileName: rec {
          name = "tracing-subscriber";
          version = "0.3.19";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "e8189decb5ac0fa7bc8b96b7cb9b2701d60d48805aca84a238004d665fcc4008";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "ansi" ]
            [ "default" ]
            [ "env-filter" ]
            [ "fmt" ]
            [ "json" ]
            [ "matchers" ]
            [ "nu-ansi-term" ]
            [ "once_cell" ]
            [ "regex" ]
            [ "registry" ]
            [ "serde" ]
            [ "serde_json" ]
            [ "sharded-slab" ]
            [ "smallvec" ]
            [ "std" ]
            [ "thread_local" ]
            [ "tracing" ]
            [ "tracing-log" ]
            [ "tracing-serde" ]
          ];
          dependencies = {
            matchers =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".matchers."0.1.0" {
                inherit profileName;
              }).out;
            nu_ansi_term =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".nu-ansi-term."0.46.0" {
                inherit profileName;
              }).out;
            once_cell =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.21.3" {
                inherit profileName;
              }).out;
            regex =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".regex."1.11.1" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            serde_json =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.140" {
                inherit profileName;
              }).out;
            sharded_slab =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".sharded-slab."0.1.7" {
                inherit profileName;
              }).out;
            smallvec =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".smallvec."1.14.0" {
                inherit profileName;
              }).out;
            thread_local =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thread_local."1.1.8" {
                inherit profileName;
              }).out;
            tracing =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" {
                inherit profileName;
              }).out;
            tracing_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-core."0.1.33" {
                inherit profileName;
              }).out;
            tracing_log =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-log."0.2.0" {
                inherit profileName;
              }).out;
            tracing_serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-serde."0.2.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".triomphe."0.1.14" =
      overridableMkRustCrate
        (profileName: rec {
          name = "triomphe";
          version = "0.1.14";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "ef8f7726da4807b58ea5c96fdc122f80702030edc33b35aff9190a51148ccc85";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "serde" ]
            [ "stable_deref_trait" ]
            [ "std" ]
          ];
          dependencies = {
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            stable_deref_trait =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".stable_deref_trait."1.2.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".try-lock."0.2.5" =
      overridableMkRustCrate
        (profileName: rec {
          name = "try-lock";
          version = "0.2.5";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "e421abadd41a4225275504ea4d6566923418b7f05506fbc9c0fe86ba7396114b";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".twoway."0.1.8" =
      overridableMkRustCrate
        (profileName: rec {
          name = "twoway";
          version = "0.1.8";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "59b11b2b5241ba34be09c3cc85a36e56e48f9888862e19cedf23336d35316ed1";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "use_std" ]
          ];
          dependencies = {
            memchr =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.4" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".typeid."1.0.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "typeid";
          version = "1.0.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "bc7d623258602320d5c55d1bc22793b57daff0ec7efc270ea7d55ce1d5f5471c";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".typenum."1.18.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "typenum";
          version = "1.18.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "1dccffe3ce07af9386bfd29e80c0ab1a8205a2fc34e4bcd40364df902cfa8f3f";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".uname."0.1.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "uname";
          version = "0.1.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "b72f89f0ca32e4db1c04e2a72f5345d59796d4866a1ee0609084569f73683dc8";
          };
          dependencies = {
            libc =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".libc."0.2.171" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".unicase."2.8.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "unicase";
          version = "2.8.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "75b844d17643ee918803943289730bec8aac480150456169e647ed0b576ba539";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".unicode-bidi."0.3.18" =
      overridableMkRustCrate
        (profileName: rec {
          name = "unicode-bidi";
          version = "0.3.18";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "5c1cb5db39152898a79168971543b1cb5020dff7fe43c8dc468b0885f5e29df5";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "hardcoded-data" ]
            [ "std" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".unicode-ident."1.0.18" =
      overridableMkRustCrate
        (profileName: rec {
          name = "unicode-ident";
          version = "1.0.18";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".unicode-normalization."0.1.24" =
      overridableMkRustCrate
        (profileName: rec {
          name = "unicode-normalization";
          version = "0.1.24";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "5033c97c4262335cded6d6fc3e5c18ab755e1a3dc96376350f3d8e9f009ad956";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "std" ]
          ];
          dependencies = {
            tinyvec =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tinyvec."1.9.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".unicode-properties."0.1.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "unicode-properties";
          version = "0.1.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "e70f2a8b45122e719eb623c01822704c4e0907e7e426a05927e1a1cfff5b75d0";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "emoji" ]
            [ "general-category" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".untrusted."0.9.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "untrusted";
          version = "0.9.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "8ecb6da28b8a351d773b68d5825ac39017e680750f980f3a1a85cd8dd28a47c1";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".unty."0.0.4" =
      overridableMkRustCrate
        (profileName: rec {
          name = "unty";
          version = "0.0.4";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "6d49784317cd0d1ee7ec5c716dd598ec5b4483ea832a2dced265471cc0f690ae";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".ureq."2.12.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "ureq";
          version = "2.12.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "02d1a66277ed75f640d608235660df48c8e3c19f3b4edb6a263315626cc3c01d";
          };
          features = builtins.concatLists [
            [ "brotli" ]
            [ "gzip" ]
            [ "tls" ]
          ];
          dependencies = {
            base64 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.22.1" {
                inherit profileName;
              }).out;
            brotli_decompressor =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".brotli-decompressor."4.0.2" {
                inherit profileName;
              }).out;
            flate2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".flate2."1.1.1" {
                inherit profileName;
              }).out;
            log =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.27" {
                inherit profileName;
              }).out;
            once_cell =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.21.3" {
                inherit profileName;
              }).out;
            rustls =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls."0.23.25" {
                inherit profileName;
              }).out;
            rustls_pki_types =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pki-types."1.11.0" {
                inherit profileName;
              }).out;
            url =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".url."2.5.4" {
                inherit profileName;
              }).out;
            webpki_roots =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".webpki-roots."0.26.8" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".url."2.5.4" =
      overridableMkRustCrate
        (profileName: rec {
          name = "url";
          version = "2.5.4";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "32f8b686cadd1473f4bd0117a5d28d36b1ade384ea9b5069a1c40aefed7fda60";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "serde" ]
            [ "std" ]
          ];
          dependencies = {
            form_urlencoded =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".form_urlencoded."1.2.1" {
                inherit profileName;
              }).out;
            idna =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".idna."1.0.3" {
                inherit profileName;
              }).out;
            percent_encoding =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".percent-encoding."2.3.1" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".urlencoding."2.1.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "urlencoding";
          version = "2.1.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "daf8dba3b7eb870caf1ddeed7bc9d2a049f3cfdfae7cb521b087cc33ae4c49da";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".utf16_iter."1.0.5" =
      overridableMkRustCrate
        (profileName: rec {
          name = "utf16_iter";
          version = "1.0.5";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "c8232dd3cdaed5356e0f716d285e4b40b932ac434100fe9b7e0e8e935b9e6246";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".utf8_iter."1.0.4" =
      overridableMkRustCrate
        (profileName: rec {
          name = "utf8_iter";
          version = "1.0.4";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "b6c140620e7ffbb22c2dee59cafe6084a59b5ffc27a8859a5f0d494b5d52b6be";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".utf8parse."0.2.2" =
      overridableMkRustCrate
        (profileName: rec {
          name = "utf8parse";
          version = "0.2.2";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "06abde3611657adf66d383f00b093d7faecc7fa57071cce2578660c9f1010821";
          };
          features = builtins.concatLists [
            [ "default" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".uuid."1.16.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "uuid";
          version = "1.16.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "458f7a779bf54acc9f347480ac654f68407d3aab21269a6e3c9f922acd9e2da9";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "serde" ]
            [ "std" ]
          ];
          dependencies = {
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".valuable."0.1.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "valuable";
          version = "0.1.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "ba73ea9cf16a25df0c8caa16c51acb937d5712a8429db78a3ee29d5dcacd3a65";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "std" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".vcpkg."0.2.15" =
      overridableMkRustCrate
        (profileName: rec {
          name = "vcpkg";
          version = "0.2.15";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "accd4ea62f7bb7a82fe23066fb0957d48ef677f6eeb8215f372f52e48bb32426";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".version_check."0.9.5" =
      overridableMkRustCrate
        (profileName: rec {
          name = "version_check";
          version = "0.9.5";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "0b928f33d975fc6ad9f86c8f283853ad26bdd5b10b7f1542aa2fa15e2289105a";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".virtue."0.0.18" =
      overridableMkRustCrate
        (profileName: rec {
          name = "virtue";
          version = "0.0.18";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "051eb1abcf10076295e815102942cc58f9d5e3b4560e46e53c21e8ff6f3af7b1";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".vsimd."0.8.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "vsimd";
          version = "0.8.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "5c3082ca00d5a5ef149bb8b555a72ae84c9c59f7250f013ac822ac2e49b19c64";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "detect" ]
            [ "std" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".walrus."0.23.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "walrus";
          version = "0.23.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "6481311b98508f4bc2d0abbfa5d42172e7a54b4b24d8f15e28b0dc650be0c59f";
          };
          features = builtins.concatLists [
            [ "parallel" ]
            [ "rayon" ]
          ];
          dependencies = {
            anyhow =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.97" {
                inherit profileName;
              }).out;
            gimli =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gimli."0.26.2" {
                inherit profileName;
              }).out;
            id_arena =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".id-arena."2.2.1" {
                inherit profileName;
              }).out;
            leb128 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".leb128."0.2.5" {
                inherit profileName;
              }).out;
            log =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.27" {
                inherit profileName;
              }).out;
            rayon =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rayon."1.10.0" {
                inherit profileName;
              }).out;
            walrus_macro =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".walrus-macro."0.22.0" {
                profileName = "__noProfile";
              }).out;
            wasm_encoder =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-encoder."0.214.0" {
                inherit profileName;
              }).out;
            wasmparser =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmparser."0.214.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".walrus-macro."0.22.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "walrus-macro";
          version = "0.22.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "439ad39ff894c43c9649fa724cdde9a6fc50b855d517ef071a93e5df82fe51d3";
          };
          dependencies = {
            heck =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".heck."0.5.0" {
                inherit profileName;
              }).out;
            proc_macro2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.94" {
                inherit profileName;
              }).out;
            quote =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.40" {
                inherit profileName;
              }).out;
            syn =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.100" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".want."0.3.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "want";
          version = "0.3.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "bfa7760aed19e106de2c7c0b581b509f2f25d3dacaf737cb82ac61bc6d760b0e";
          };
          dependencies = {
            try_lock =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".try-lock."0.2.5" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".wasi."0.11.0+wasi-snapshot-preview1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "wasi";
          version = "0.11.0+wasi-snapshot-preview1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "std" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".wasi."0.14.2+wasi-0.2.4" =
      overridableMkRustCrate
        (profileName: rec {
          name = "wasi";
          version = "0.14.2+wasi-0.2.4";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "9683f9a5a998d873c0d21fcbe3c083009670149a8fab228644b8bd36b2c48cb3";
          };
          dependencies = {
            wit_bindgen_rt =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wit-bindgen-rt."0.39.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".wasite."0.1.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "wasite";
          version = "0.1.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "b8dad83b4f25e74f184f64c43b150b91efe7647395b42289f38e50566d82855b";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" =
      overridableMkRustCrate
        (profileName: rec {
          name = "wasm-bindgen";
          version = "0.2.100";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "1edc8929d7499fc4e8f0be2262a241556cfc54a0bea223790e71446f2aab1ef5";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "msrv" ]
            [ "rustversion" ]
            [ "std" ]
          ];
          dependencies = {
            cfg_if =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {
                inherit profileName;
              }).out;
            once_cell =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.21.3" {
                inherit profileName;
              }).out;
            rustversion =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rustversion."1.0.20" {
                profileName = "__noProfile";
              }).out;
            wasm_bindgen_macro =
              (
                buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro."0.2.100"
                { profileName = "__noProfile"; }
              ).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-backend."0.2.100" =
      overridableMkRustCrate
        (profileName: rec {
          name = "wasm-bindgen-backend";
          version = "0.2.100";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "2f0a0651a5c2bc21487bde11ee802ccaf4c51935d0d3d42a6101f98161700bc6";
          };
          dependencies = {
            bumpalo =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bumpalo."3.17.0" {
                inherit profileName;
              }).out;
            log =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.27" {
                inherit profileName;
              }).out;
            proc_macro2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.94" {
                inherit profileName;
              }).out;
            quote =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.40" {
                inherit profileName;
              }).out;
            syn =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.100" {
                inherit profileName;
              }).out;
            wasm_bindgen_shared =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.100"
                { inherit profileName; }
              ).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-cli."0.2.100" =
      overridableMkRustCrate
        (profileName: rec {
          name = "wasm-bindgen-cli";
          version = "0.2.100";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "9e7f06f41580c87b6f4f84176d033f09c0838db1523a8d1899064b53cbb92c59";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "rustls-tls" ]
          ];
          dependencies = {
            anyhow =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.97" {
                inherit profileName;
              }).out;
            clap =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".clap."4.5.35" {
                inherit profileName;
              }).out;
            env_logger =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".env_logger."0.11.8" {
                inherit profileName;
              }).out;
            log =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.27" {
                inherit profileName;
              }).out;
            rouille =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rouille."3.6.2" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            serde_derive =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_derive."1.0.219" {
                profileName = "__noProfile";
              }).out;
            serde_json =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.140" {
                inherit profileName;
              }).out;
            tempfile =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tempfile."3.19.1" {
                inherit profileName;
              }).out;
            ureq =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ureq."2.12.1" {
                inherit profileName;
              }).out;
            walrus =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".walrus."0.23.3" {
                inherit profileName;
              }).out;
            wasm_bindgen_cli_support =
              (
                rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-cli-support."0.2.100"
                { inherit profileName; }
              ).out;
            wasm_bindgen_shared =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.100"
                { inherit profileName; }
              ).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-cli-support."0.2.100" =
      overridableMkRustCrate
        (profileName: rec {
          name = "wasm-bindgen-cli-support";
          version = "0.2.100";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "21e1a4a49abe9cd6f762fc65fac2ef5732afeeb66be369d2f71a85b165a533cf";
          };
          dependencies = {
            anyhow =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.97" {
                inherit profileName;
              }).out;
            base64 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".base64."0.22.1" {
                inherit profileName;
              }).out;
            log =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.27" {
                inherit profileName;
              }).out;
            rustc_demangle =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustc-demangle."0.1.24" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            serde_json =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_json."1.0.140" {
                inherit profileName;
              }).out;
            tempfile =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tempfile."3.19.1" {
                inherit profileName;
              }).out;
            walrus =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".walrus."0.23.3" {
                inherit profileName;
              }).out;
            wasm_bindgen_externref_xform =
              (
                rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-externref-xform."0.2.100"
                { inherit profileName; }
              ).out;
            wasm_bindgen_multi_value_xform =
              (
                rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-multi-value-xform."0.2.100"
                { inherit profileName; }
              ).out;
            wasm_bindgen_shared =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.100"
                { inherit profileName; }
              ).out;
            wasm_bindgen_threads_xform =
              (
                rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-threads-xform."0.2.100"
                { inherit profileName; }
              ).out;
            wasm_bindgen_wasm_conventions =
              (
                rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-wasm-conventions."0.2.100"
                { inherit profileName; }
              ).out;
            wasm_bindgen_wasm_interpreter =
              (
                rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-wasm-interpreter."0.2.100"
                { inherit profileName; }
              ).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-externref-xform."0.2.100" =
      overridableMkRustCrate
        (profileName: rec {
          name = "wasm-bindgen-externref-xform";
          version = "0.2.100";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "940542c5cdbe96c35f98b5da5c65fb9d18df55a0cb1d81fc5ca4acc4fda4d61c";
          };
          dependencies = {
            anyhow =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.97" {
                inherit profileName;
              }).out;
            walrus =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".walrus."0.23.3" {
                inherit profileName;
              }).out;
            wasm_bindgen_wasm_conventions =
              (
                rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-wasm-conventions."0.2.100"
                { inherit profileName; }
              ).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.50" =
      overridableMkRustCrate
        (profileName: rec {
          name = "wasm-bindgen-futures";
          version = "0.4.50";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "555d470ec0bc3bb57890405e5d4322cc9ea83cebb085523ced7be4144dac1e61";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "std" ]
          ];
          dependencies = {
            cfg_if =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".cfg-if."1.0.0" {
                inherit profileName;
              }).out;
            js_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.77" {
                inherit profileName;
              }).out;
            once_cell =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.21.3" {
                inherit profileName;
              }).out;
            wasm_bindgen =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" {
                inherit profileName;
              }).out;
            ${if builtins.elem "atomics" hostPlatformFeatures then "web_sys" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.77" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro."0.2.100" =
      overridableMkRustCrate
        (profileName: rec {
          name = "wasm-bindgen-macro";
          version = "0.2.100";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "7fe63fc6d09ed3792bd0897b314f53de8e16568c2b3f7982f468c0bf9bd0b407";
          };
          dependencies = {
            quote =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.40" {
                inherit profileName;
              }).out;
            wasm_bindgen_macro_support =
              (
                rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro-support."0.2.100"
                { inherit profileName; }
              ).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-macro-support."0.2.100" =
      overridableMkRustCrate
        (profileName: rec {
          name = "wasm-bindgen-macro-support";
          version = "0.2.100";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "8ae87ea40c9f689fc23f209965b6fb8a99ad69aeeb0231408be24920604395de";
          };
          dependencies = {
            proc_macro2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.94" {
                inherit profileName;
              }).out;
            quote =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.40" {
                inherit profileName;
              }).out;
            syn =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.100" {
                inherit profileName;
              }).out;
            wasm_bindgen_backend =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-backend."0.2.100"
                { inherit profileName; }
              ).out;
            wasm_bindgen_shared =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.100"
                { inherit profileName; }
              ).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-multi-value-xform."0.2.100" =
      overridableMkRustCrate
        (profileName: rec {
          name = "wasm-bindgen-multi-value-xform";
          version = "0.2.100";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "64b5ad2e97adde0c3e4369c38e0dbaee329ad8f6cc2ee8e01d1d0b13bd8b14cf";
          };
          dependencies = {
            anyhow =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.97" {
                inherit profileName;
              }).out;
            walrus =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".walrus."0.23.3" {
                inherit profileName;
              }).out;
            wasm_bindgen_wasm_conventions =
              (
                rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-wasm-conventions."0.2.100"
                { inherit profileName; }
              ).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-shared."0.2.100" =
      overridableMkRustCrate
        (profileName: rec {
          name = "wasm-bindgen-shared";
          version = "0.2.100";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "1a05d73b933a847d6cccdda8f838a22ff101ad9bf93e33684f39c1f5f0eece3d";
          };
          dependencies = {
            unicode_ident =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".unicode-ident."1.0.18" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-threads-xform."0.2.100" =
      overridableMkRustCrate
        (profileName: rec {
          name = "wasm-bindgen-threads-xform";
          version = "0.2.100";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "1cbdf2d55a50f7edc9dd9aecae7a3a40e9736fda851bd8816f98a86167c8c277";
          };
          dependencies = {
            anyhow =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.97" {
                inherit profileName;
              }).out;
            walrus =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".walrus."0.23.3" {
                inherit profileName;
              }).out;
            wasm_bindgen_wasm_conventions =
              (
                rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-wasm-conventions."0.2.100"
                { inherit profileName; }
              ).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-wasm-conventions."0.2.100" =
      overridableMkRustCrate
        (profileName: rec {
          name = "wasm-bindgen-wasm-conventions";
          version = "0.2.100";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "b1c24fcaa34d2d84407122cfb1d3f37c3586756cf462be18e049b49245a16c08";
          };
          dependencies = {
            anyhow =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.97" {
                inherit profileName;
              }).out;
            leb128 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".leb128."0.2.5" {
                inherit profileName;
              }).out;
            log =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.27" {
                inherit profileName;
              }).out;
            walrus =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".walrus."0.23.3" {
                inherit profileName;
              }).out;
            wasmparser =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasmparser."0.214.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-wasm-interpreter."0.2.100" =
      overridableMkRustCrate
        (profileName: rec {
          name = "wasm-bindgen-wasm-interpreter";
          version = "0.2.100";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "33f24921401faadd6944206f9d6837d07bbb5ff766ed51ad34528089f66550e0";
          };
          dependencies = {
            anyhow =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".anyhow."1.0.97" {
                inherit profileName;
              }).out;
            log =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".log."0.4.27" {
                inherit profileName;
              }).out;
            walrus =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".walrus."0.23.3" {
                inherit profileName;
              }).out;
            wasm_bindgen_wasm_conventions =
              (
                rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-wasm-conventions."0.2.100"
                { inherit profileName; }
              ).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".wasm-encoder."0.214.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "wasm-encoder";
          version = "0.214.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "ff694f02a8d7a50b6922b197ae03883fbf18cdb2ae9fbee7b6148456f5f44041";
          };
          dependencies = {
            leb128 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".leb128."0.2.5" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".wasm-streams."0.4.2" =
      overridableMkRustCrate
        (profileName: rec {
          name = "wasm-streams";
          version = "0.4.2";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "15053d8d85c7eccdbefef60f06769760a563c7f0a9d6902a13d35c7800b0ad65";
          };
          dependencies = {
            futures_util =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-util."0.3.31" {
                inherit profileName;
              }).out;
            js_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.77" {
                inherit profileName;
              }).out;
            wasm_bindgen =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" {
                inherit profileName;
              }).out;
            wasm_bindgen_futures =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.50"
                { inherit profileName; }
              ).out;
            web_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.77" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".wasm-tracing."2.0.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "wasm-tracing";
          version = "2.0.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "eb675aa3376d079f9c5710cf2c96126e97eebe6565a092bcfbcb041d7c67509c";
          };
          dependencies = {
            tracing =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" {
                inherit profileName;
              }).out;
            tracing_subscriber =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing-subscriber."0.3.19" {
                inherit profileName;
              }).out;
            wasm_bindgen =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".wasmparser."0.214.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "wasmparser";
          version = "0.214.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "5309c1090e3e84dad0d382f42064e9933fdaedb87e468cc239f0eabea73ddcb6";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "serde" ]
            [ "std" ]
            [ "validate" ]
          ];
          dependencies = {
            ahash =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".ahash."0.8.11" {
                inherit profileName;
              }).out;
            bitflags =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.9.0" {
                inherit profileName;
              }).out;
            hashbrown =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".hashbrown."0.14.5" {
                inherit profileName;
              }).out;
            indexmap =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."2.8.0" {
                inherit profileName;
              }).out;
            semver =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".semver."1.0.26" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.77" =
      overridableMkRustCrate
        (profileName: rec {
          name = "web-sys";
          version = "0.3.77";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "33b6dd2ef9186f1f2072e409e99cd22a975331a6b3591b12c764e0e55c60d5d2";
          };
          features = builtins.concatLists [
            [ "AbortController" ]
            [ "AbortSignal" ]
            [ "AddEventListenerOptions" ]
            [ "AnimationEvent" ]
            [ "BinaryType" ]
            [ "Blob" ]
            [ "BlobPropertyBag" ]
            [ "CharacterData" ]
            [ "CloseEvent" ]
            [ "CloseEventInit" ]
            [ "DedicatedWorkerGlobalScope" ]
            [ "Document" ]
            [ "DocumentFragment" ]
            [ "DomException" ]
            [ "DragEvent" ]
            [ "Element" ]
            [ "ErrorEvent" ]
            [ "Event" ]
            [ "EventInit" ]
            [ "EventSource" ]
            [ "EventTarget" ]
            [ "File" ]
            [ "FileList" ]
            [ "FilePropertyBag" ]
            [ "FileReader" ]
            [ "FocusEvent" ]
            [ "FormData" ]
            [ "Headers" ]
            [ "History" ]
            [ "HtmlBaseElement" ]
            [ "HtmlCollection" ]
            [ "HtmlElement" ]
            [ "HtmlHeadElement" ]
            [ "HtmlInputElement" ]
            [ "HtmlScriptElement" ]
            [ "HtmlTextAreaElement" ]
            [ "InputEvent" ]
            [ "InputEventInit" ]
            [ "KeyboardEvent" ]
            [ "Location" ]
            [ "MessageEvent" ]
            [ "MouseEvent" ]
            [ "Node" ]
            [ "NodeList" ]
            [ "ObserverCallback" ]
            [ "Performance" ]
            [ "PointerEvent" ]
            [ "ProgressEvent" ]
            [ "QueuingStrategy" ]
            [ "ReadableByteStreamController" ]
            [ "ReadableStream" ]
            [ "ReadableStreamByobReader" ]
            [ "ReadableStreamByobRequest" ]
            [ "ReadableStreamDefaultController" ]
            [ "ReadableStreamDefaultReader" ]
            [ "ReadableStreamGetReaderOptions" ]
            [ "ReadableStreamReadResult" ]
            [ "ReadableStreamReaderMode" ]
            [ "ReadableStreamType" ]
            [ "ReadableWritablePair" ]
            [ "ReferrerPolicy" ]
            [ "Request" ]
            [ "RequestCache" ]
            [ "RequestCredentials" ]
            [ "RequestInit" ]
            [ "RequestMode" ]
            [ "RequestRedirect" ]
            [ "Response" ]
            [ "ResponseInit" ]
            [ "ResponseType" ]
            [ "ServiceWorkerGlobalScope" ]
            [ "ShadowRoot" ]
            [ "Storage" ]
            [ "StreamPipeOptions" ]
            [ "SubmitEvent" ]
            [ "Text" ]
            [ "TouchEvent" ]
            [ "TransformStream" ]
            [ "TransformStreamDefaultController" ]
            [ "Transformer" ]
            [ "TransitionEvent" ]
            [ "UiEvent" ]
            [ "UnderlyingSink" ]
            [ "UnderlyingSource" ]
            [ "Url" ]
            [ "UrlSearchParams" ]
            [ "WebSocket" ]
            [ "WheelEvent" ]
            [ "Window" ]
            [ "Worker" ]
            [ "WorkerGlobalScope" ]
            [ "WorkerOptions" ]
            [ "WritableStream" ]
            [ "WritableStreamDefaultController" ]
            [ "WritableStreamDefaultWriter" ]
            [ "console" ]
            [ "default" ]
            [ "std" ]
          ];
          dependencies = {
            js_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.77" {
                inherit profileName;
              }).out;
            wasm_bindgen =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".web-time."1.1.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "web-time";
          version = "1.1.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "5a6580f308b1fad9207618087a65c04e7a10bc77e02c8e84e9b00dd4b12fa0bb";
          };
          dependencies = {
            ${if false then "js_sys" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.77" {
                inherit profileName;
              }).out;
            ${if false then "wasm_bindgen" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".webpki-roots."0.26.8" =
      overridableMkRustCrate
        (profileName: rec {
          name = "webpki-roots";
          version = "0.26.8";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "2210b291f7ea53617fbafcc4939f10914214ec15aace5ba62293a668f322c5c9";
          };
          dependencies = {
            pki_types =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustls-pki-types."1.11.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".wg."0.9.2" =
      overridableMkRustCrate
        (profileName: rec {
          name = "wg";
          version = "0.9.2";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "7aafc5e81e847f05d6770e074faf7b1cd4a5dec9a0e88eac5d55e20fdfebee9a";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "event-listener" ]
            [ "future" ]
            [ "parking_lot" ]
            [ "pin-project-lite" ]
            [ "std" ]
            [ "triomphe" ]
          ];
          dependencies = {
            event_listener =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".event-listener."5.4.0" {
                inherit profileName;
              }).out;
            futures_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures-core."0.3.31" {
                inherit profileName;
              }).out;
            parking_lot =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".parking_lot."0.12.3" {
                inherit profileName;
              }).out;
            pin_project_lite =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".pin-project-lite."0.2.16" {
                inherit profileName;
              }).out;
            triomphe =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".triomphe."0.1.14" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".which."4.4.2" =
      overridableMkRustCrate
        (profileName: rec {
          name = "which";
          version = "4.4.2";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "87ba24419a2078cd2b0f2ede2691b6c66d8e47836da3b6db8265ebad47afbfc7";
          };
          dependencies = {
            either =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".either."1.15.0" {
                inherit profileName;
              }).out;
            ${
              if hostPlatform.isWindows || hostPlatform.isUnix || hostPlatform.parsed.kernel.name == "redox" then
                "home"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".home."0.5.11" {
                inherit profileName;
              }).out;
            ${if hostPlatform.isWindows then "once_cell" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.21.3" {
                inherit profileName;
              }).out;
            rustix =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".rustix."0.38.44" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".whoami."1.6.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "whoami";
          version = "1.6.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "6994d13118ab492c3c80c1f81928718159254c53c472bf9ce36f8dae4add02a7";
          };
          dependencies = {
            ${
              if hostPlatform.parsed.kernel.name == "redox" && !(hostPlatform.parsed.cpu.name == "wasm32") then
                "syscall"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".redox_syscall."0.5.10" {
                inherit profileName;
              }).out;
            ${
              if hostPlatform.parsed.cpu.name == "wasm32" && hostPlatform.parsed.kernel.name == "wasi" then
                "wasite"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasite."0.1.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".winapi."0.3.9" =
      overridableMkRustCrate
        (profileName: rec {
          name = "winapi";
          version = "0.3.9";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419";
          };
          features = builtins.concatLists [
            [ "consoleapi" ]
            [ "errhandlingapi" ]
            [ "fileapi" ]
            [ "handleapi" ]
            [ "libloaderapi" ]
            [ "memoryapi" ]
            [ "processenv" ]
            [ "processthreadsapi" ]
            [ "profileapi" ]
            [ "psapi" ]
          ];
          dependencies = {
            ${if hostPlatform.config == "i686-pc-windows-gnu" then "winapi_i686_pc_windows_gnu" else null} =
              (
                rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-i686-pc-windows-gnu."0.4.0"
                { inherit profileName; }
              ).out;
            ${if hostPlatform.config == "x86_64-pc-windows-gnu" then "winapi_x86_64_pc_windows_gnu" else null} =
              (
                rustPackages."registry+https://github.com/rust-lang/crates.io-index".winapi-x86_64-pc-windows-gnu."0.4.0"
                { inherit profileName; }
              ).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".winapi-i686-pc-windows-gnu."0.4.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "winapi-i686-pc-windows-gnu";
          version = "0.4.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".winapi-x86_64-pc-windows-gnu."0.4.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "winapi-x86_64-pc-windows-gnu";
          version = "0.4.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".windows."0.52.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "windows";
          version = "0.52.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "e48a53791691ab099e5e2ad123536d0fff50652600abaf43bbf952894110d0be";
          };
          features = builtins.concatLists [
            [ "Win32" ]
            [ "Win32_Foundation" ]
            [ "Win32_System" ]
            [ "Win32_System_SystemInformation" ]
            [ "default" ]
          ];
          dependencies = {
            windows_core =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-core."0.52.0" {
                inherit profileName;
              }).out;
            windows_targets =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.52.6" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".windows-core."0.52.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "windows-core";
          version = "0.52.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "33ab640c8d7e35bf8ba19b884ba838ceb4fba93a4e8c65a9059d08afcfc683d9";
          };
          features = builtins.concatLists [
            [ "default" ]
          ];
          dependencies = {
            windows_targets =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.52.6" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".windows-core."0.61.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "windows-core";
          version = "0.61.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "4763c1de310c86d75a878046489e2e5ba02c649d185f21c67d4cf8a56d098980";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "std" ]
          ];
          dependencies = {
            windows_implement =
              (
                buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-implement."0.60.0"
                { profileName = "__noProfile"; }
              ).out;
            windows_interface =
              (
                buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-interface."0.59.1"
                { profileName = "__noProfile"; }
              ).out;
            windows_link =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-link."0.1.1" {
                inherit profileName;
              }).out;
            windows_result =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-result."0.3.2" {
                inherit profileName;
              }).out;
            windows_strings =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-strings."0.4.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".windows-implement."0.60.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "windows-implement";
          version = "0.60.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "a47fddd13af08290e67f4acabf4b459f647552718f683a7b415d290ac744a836";
          };
          dependencies = {
            proc_macro2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.94" {
                inherit profileName;
              }).out;
            quote =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.40" {
                inherit profileName;
              }).out;
            syn =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.100" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".windows-interface."0.59.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "windows-interface";
          version = "0.59.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "bd9211b69f8dcdfa817bfd14bf1c97c9188afa36f4750130fcdf3f400eca9fa8";
          };
          dependencies = {
            proc_macro2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.94" {
                inherit profileName;
              }).out;
            quote =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.40" {
                inherit profileName;
              }).out;
            syn =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.100" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".windows-link."0.1.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "windows-link";
          version = "0.1.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "76840935b766e1b0a05c0066835fb9ec80071d4c09a16f6bd5f7e655e3c14c38";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".windows-registry."0.4.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "windows-registry";
          version = "0.4.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "4286ad90ddb45071efd1a66dfa43eb02dd0dfbae1545ad6cc3c51cf34d7e8ba3";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "std" ]
          ];
          dependencies = {
            windows_result =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-result."0.3.2" {
                inherit profileName;
              }).out;
            windows_strings =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-strings."0.3.1" {
                inherit profileName;
              }).out;
            windows_targets =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.53.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".windows-result."0.3.2" =
      overridableMkRustCrate
        (profileName: rec {
          name = "windows-result";
          version = "0.3.2";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "c64fd11a4fd95df68efcfee5f44a294fe71b8bc6a91993e2791938abcc712252";
          };
          features = builtins.concatLists [
            [ "std" ]
          ];
          dependencies = {
            windows_link =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-link."0.1.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".windows-strings."0.3.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "windows-strings";
          version = "0.3.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "87fa48cc5d406560701792be122a10132491cff9d0aeb23583cc2dcafc847319";
          };
          features = builtins.concatLists [
            [ "std" ]
          ];
          dependencies = {
            windows_link =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-link."0.1.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".windows-strings."0.4.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "windows-strings";
          version = "0.4.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "7a2ba9642430ee452d5a7aa78d72907ebe8cfda358e8cb7918a2050581322f97";
          };
          features = builtins.concatLists [
            [ "std" ]
          ];
          dependencies = {
            windows_link =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-link."0.1.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.48.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "windows-sys";
          version = "0.48.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9";
          };
          features = builtins.concatLists [
            [ "Win32" ]
            [ "Win32_Foundation" ]
            [ "Win32_UI" ]
            [ "Win32_UI_Shell" ]
            [ "default" ]
          ];
          dependencies = {
            windows_targets =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.48.5" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.52.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "windows-sys";
          version = "0.52.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d";
          };
          features = builtins.concatLists [
            [ "Wdk" ]
            [ "Wdk_Foundation" ]
            [ "Wdk_Storage" ]
            [ "Wdk_Storage_FileSystem" ]
            [ "Wdk_System" ]
            [ "Wdk_System_IO" ]
            [ "Win32" ]
            [ "Win32_Foundation" ]
            [ "Win32_Networking" ]
            [ "Win32_Networking_WinSock" ]
            [ "Win32_Security" ]
            [ "Win32_Storage" ]
            [ "Win32_Storage_FileSystem" ]
            [ "Win32_System" ]
            [ "Win32_System_Console" ]
            [ "Win32_System_IO" ]
            [ "Win32_System_LibraryLoader" ]
            [ "Win32_System_Pipes" ]
            [ "Win32_System_Registry" ]
            [ "Win32_System_SystemInformation" ]
            [ "Win32_System_SystemServices" ]
            [ "Win32_System_Threading" ]
            [ "Win32_System_WindowsProgramming" ]
            [ "Win32_UI" ]
            [ "Win32_UI_WindowsAndMessaging" ]
            [ "default" ]
          ];
          dependencies = {
            windows_targets =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.52.6" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".windows-sys."0.59.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "windows-sys";
          version = "0.59.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "1e38bc4d79ed67fd075bcc251a1c39b32a1776bbe92e5bef1f0bf1f8c531853b";
          };
          features = builtins.concatLists [
            [ "Wdk" ]
            [ "Wdk_Foundation" ]
            [ "Wdk_Storage" ]
            [ "Wdk_Storage_FileSystem" ]
            [ "Win32" ]
            [ "Win32_Foundation" ]
            [ "Win32_NetworkManagement" ]
            [ "Win32_NetworkManagement_IpHelper" ]
            [ "Win32_Networking" ]
            [ "Win32_Networking_WinSock" ]
            [ "Win32_Security" ]
            [ "Win32_Security_Authentication" ]
            [ "Win32_Security_Authentication_Identity" ]
            [ "Win32_Security_Credentials" ]
            [ "Win32_Security_Cryptography" ]
            [ "Win32_Storage" ]
            [ "Win32_Storage_FileSystem" ]
            [ "Win32_System" ]
            [ "Win32_System_Com" ]
            [ "Win32_System_Console" ]
            [ "Win32_System_Diagnostics" ]
            [ "Win32_System_Diagnostics_Debug" ]
            [ "Win32_System_IO" ]
            [ "Win32_System_LibraryLoader" ]
            [ "Win32_System_Memory" ]
            [ "Win32_System_SystemInformation" ]
            [ "Win32_System_Threading" ]
            [ "Win32_System_WindowsProgramming" ]
            [ "Win32_UI" ]
            [ "Win32_UI_Shell" ]
            [ "default" ]
          ];
          dependencies = {
            windows_targets =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.52.6" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.48.5" =
      overridableMkRustCrate
        (profileName: rec {
          name = "windows-targets";
          version = "0.48.5";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c";
          };
          dependencies = {
            ${if hostPlatform.config == "aarch64-pc-windows-gnullvm" then "windows_aarch64_gnullvm" else null} =
              (
                rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_gnullvm."0.48.5"
                { inherit profileName; }
              ).out;
            ${
              if hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.abi.name == "msvc" then
                "windows_aarch64_msvc"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.48.5"
                { inherit profileName; }
              ).out;
            ${
              if hostPlatform.parsed.cpu.name == "i686" && hostPlatform.parsed.abi.name == "gnu" then
                "windows_i686_gnu"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.48.5" {
                inherit profileName;
              }).out;
            ${
              if hostPlatform.parsed.cpu.name == "i686" && hostPlatform.parsed.abi.name == "msvc" then
                "windows_i686_msvc"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.48.5" {
                inherit profileName;
              }).out;
            ${
              if hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.abi.name == "gnu" then
                "windows_x86_64_gnu"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.48.5" {
                inherit profileName;
              }).out;
            ${if hostPlatform.config == "x86_64-pc-windows-gnullvm" then "windows_x86_64_gnullvm" else null} =
              (
                rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnullvm."0.48.5"
                { inherit profileName; }
              ).out;
            ${
              if hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.abi.name == "msvc" then
                "windows_x86_64_msvc"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.48.5" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.52.6" =
      overridableMkRustCrate
        (profileName: rec {
          name = "windows-targets";
          version = "0.52.6";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973";
          };
          dependencies = {
            ${if hostPlatform.config == "aarch64-pc-windows-gnullvm" then "windows_aarch64_gnullvm" else null} =
              (
                rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_gnullvm."0.52.6"
                { inherit profileName; }
              ).out;
            ${
              if hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.abi.name == "msvc" then
                "windows_aarch64_msvc"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.52.6"
                { inherit profileName; }
              ).out;
            ${
              if hostPlatform.parsed.cpu.name == "i686" && hostPlatform.parsed.abi.name == "gnu" then
                "windows_i686_gnu"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.52.6" {
                inherit profileName;
              }).out;
            ${if hostPlatform.config == "i686-pc-windows-gnullvm" then "windows_i686_gnullvm" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnullvm."0.52.6"
                { inherit profileName; }
              ).out;
            ${
              if hostPlatform.parsed.cpu.name == "i686" && hostPlatform.parsed.abi.name == "msvc" then
                "windows_i686_msvc"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.52.6" {
                inherit profileName;
              }).out;
            ${
              if hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.abi.name == "gnu" then
                "windows_x86_64_gnu"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.52.6" {
                inherit profileName;
              }).out;
            ${if hostPlatform.config == "x86_64-pc-windows-gnullvm" then "windows_x86_64_gnullvm" else null} =
              (
                rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnullvm."0.52.6"
                { inherit profileName; }
              ).out;
            ${
              if
                (hostPlatform.parsed.cpu.name == "x86_64" || hostPlatform.parsed.cpu.name == "arm64ec")
                && hostPlatform.parsed.abi.name == "msvc"
              then
                "windows_x86_64_msvc"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.52.6" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".windows-targets."0.53.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "windows-targets";
          version = "0.53.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "b1e4c7e8ceaaf9cb7d7507c974735728ab453b67ef8f18febdd7c11fe59dca8b";
          };
          dependencies = {
            ${if hostPlatform.config == "aarch64-pc-windows-gnullvm" then "windows_aarch64_gnullvm" else null} =
              (
                rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_gnullvm."0.53.0"
                { inherit profileName; }
              ).out;
            ${
              if hostPlatform.parsed.cpu.name == "aarch64" && hostPlatform.parsed.abi.name == "msvc" then
                "windows_aarch64_msvc"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.53.0"
                { inherit profileName; }
              ).out;
            ${
              if hostPlatform.parsed.cpu.name == "i686" && hostPlatform.parsed.abi.name == "gnu" then
                "windows_i686_gnu"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.53.0" {
                inherit profileName;
              }).out;
            ${if hostPlatform.config == "i686-pc-windows-gnullvm" then "windows_i686_gnullvm" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnullvm."0.53.0"
                { inherit profileName; }
              ).out;
            ${
              if hostPlatform.parsed.cpu.name == "i686" && hostPlatform.parsed.abi.name == "msvc" then
                "windows_i686_msvc"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.53.0" {
                inherit profileName;
              }).out;
            ${
              if hostPlatform.parsed.cpu.name == "x86_64" && hostPlatform.parsed.abi.name == "gnu" then
                "windows_x86_64_gnu"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.53.0" {
                inherit profileName;
              }).out;
            ${if hostPlatform.config == "x86_64-pc-windows-gnullvm" then "windows_x86_64_gnullvm" else null} =
              (
                rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnullvm."0.53.0"
                { inherit profileName; }
              ).out;
            ${
              if
                (hostPlatform.parsed.cpu.name == "x86_64" || hostPlatform.parsed.cpu.name == "arm64ec")
                && hostPlatform.parsed.abi.name == "msvc"
              then
                "windows_x86_64_msvc"
              else
                null
            } =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.53.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_gnullvm."0.48.5" =
      overridableMkRustCrate
        (profileName: rec {
          name = "windows_aarch64_gnullvm";
          version = "0.48.5";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_gnullvm."0.52.6" =
      overridableMkRustCrate
        (profileName: rec {
          name = "windows_aarch64_gnullvm";
          version = "0.52.6";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_gnullvm."0.53.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "windows_aarch64_gnullvm";
          version = "0.53.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "86b8d5f90ddd19cb4a147a5fa63ca848db3df085e25fee3cc10b39b6eebae764";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.48.5" =
      overridableMkRustCrate
        (profileName: rec {
          name = "windows_aarch64_msvc";
          version = "0.48.5";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.52.6" =
      overridableMkRustCrate
        (profileName: rec {
          name = "windows_aarch64_msvc";
          version = "0.52.6";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".windows_aarch64_msvc."0.53.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "windows_aarch64_msvc";
          version = "0.53.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "c7651a1f62a11b8cbd5e0d42526e55f2c99886c77e007179efff86c2b137e66c";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.48.5" =
      overridableMkRustCrate
        (profileName: rec {
          name = "windows_i686_gnu";
          version = "0.48.5";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.52.6" =
      overridableMkRustCrate
        (profileName: rec {
          name = "windows_i686_gnu";
          version = "0.52.6";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnu."0.53.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "windows_i686_gnu";
          version = "0.53.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "c1dc67659d35f387f5f6c479dc4e28f1d4bb90ddd1a5d3da2e5d97b42d6272c3";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnullvm."0.52.6" =
      overridableMkRustCrate
        (profileName: rec {
          name = "windows_i686_gnullvm";
          version = "0.52.6";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".windows_i686_gnullvm."0.53.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "windows_i686_gnullvm";
          version = "0.53.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "9ce6ccbdedbf6d6354471319e781c0dfef054c81fbc7cf83f338a4296c0cae11";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.48.5" =
      overridableMkRustCrate
        (profileName: rec {
          name = "windows_i686_msvc";
          version = "0.48.5";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.52.6" =
      overridableMkRustCrate
        (profileName: rec {
          name = "windows_i686_msvc";
          version = "0.52.6";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".windows_i686_msvc."0.53.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "windows_i686_msvc";
          version = "0.53.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "581fee95406bb13382d2f65cd4a908ca7b1e4c2f1917f143ba16efe98a589b5d";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.48.5" =
      overridableMkRustCrate
        (profileName: rec {
          name = "windows_x86_64_gnu";
          version = "0.48.5";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.52.6" =
      overridableMkRustCrate
        (profileName: rec {
          name = "windows_x86_64_gnu";
          version = "0.52.6";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnu."0.53.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "windows_x86_64_gnu";
          version = "0.53.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "2e55b5ac9ea33f2fc1716d1742db15574fd6fc8dadc51caab1c16a3d3b4190ba";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnullvm."0.48.5" =
      overridableMkRustCrate
        (profileName: rec {
          name = "windows_x86_64_gnullvm";
          version = "0.48.5";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnullvm."0.52.6" =
      overridableMkRustCrate
        (profileName: rec {
          name = "windows_x86_64_gnullvm";
          version = "0.52.6";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_gnullvm."0.53.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "windows_x86_64_gnullvm";
          version = "0.53.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "0a6e035dd0599267ce1ee132e51c27dd29437f63325753051e71dd9e42406c57";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.48.5" =
      overridableMkRustCrate
        (profileName: rec {
          name = "windows_x86_64_msvc";
          version = "0.48.5";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.52.6" =
      overridableMkRustCrate
        (profileName: rec {
          name = "windows_x86_64_msvc";
          version = "0.52.6";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".windows_x86_64_msvc."0.53.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "windows_x86_64_msvc";
          version = "0.53.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "271414315aff87387382ec3d271b52d7ae78726f5d44ac98b4f4030c91880486";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".winnow."0.5.40" =
      overridableMkRustCrate
        (profileName: rec {
          name = "winnow";
          version = "0.5.40";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "f593a95398737aeed53e489c785df13f3618e41dbcd6718c6addbf1395aa6876";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "default" ]
            [ "std" ]
          ];
          dependencies = {
            memchr =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.4" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".winnow."0.7.4" =
      overridableMkRustCrate
        (profileName: rec {
          name = "winnow";
          version = "0.7.4";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "0e97b544156e9bebe1a0ffbc03484fc1ffe3100cbce3ffb17eac35f7cdd7ab36";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "default" ]
            [ "std" ]
          ];
          dependencies = {
            memchr =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".memchr."2.7.4" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".wit-bindgen-rt."0.39.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "wit-bindgen-rt";
          version = "0.39.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "6f42320e61fe2cfd34354ecb597f86f413484a798ba44a8ca1165c58d42da6c1";
          };
          features = builtins.concatLists [
            [ "bitflags" ]
          ];
          dependencies = {
            bitflags =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".bitflags."2.9.0" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".write16."1.0.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "write16";
          version = "1.0.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "d1890f4022759daae28ed4fe62859b1236caebfc61ede2f63ed4e695f3f6d936";
          };
          features = builtins.concatLists [
            [ "alloc" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".writeable."0.5.5" =
      overridableMkRustCrate
        (profileName: rec {
          name = "writeable";
          version = "0.5.5";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "1e9df38ee2d2c3c5948ea468a8406ff0db0b29ae1ffde1bcf20ef305bcc95c51";
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".xmlparser."0.13.6" =
      overridableMkRustCrate
        (profileName: rec {
          name = "xmlparser";
          version = "0.13.6";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "66fee0b777b0f5ac1c69bb06d361268faafa61cd4682ae064a171c16c433e9e4";
          };
          features = builtins.concatLists [
            [ "default" ]
            [ "std" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".xxhash-rust."0.8.15" =
      overridableMkRustCrate
        (profileName: rec {
          name = "xxhash-rust";
          version = "0.8.15";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "fdd20c5420375476fbd4394763288da7eb0cc0b8c11deed431a91562af7335d3";
          };
          features = builtins.concatLists [
            [ "xxh64" ]
          ];
        });

    "registry+https://github.com/rust-lang/crates.io-index".yew."0.21.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "yew";
          version = "0.21.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "5f1a03f255c70c7aa3e9c62e15292f142ede0564123543c1cc0c7a4f31660cac";
          };
          features = builtins.concatLists [
            [ "csr" ]
            [ "default" ]
          ];
          dependencies = {
            console_error_panic_hook =
              (
                rustPackages."registry+https://github.com/rust-lang/crates.io-index".console_error_panic_hook."0.1.7"
                { inherit profileName; }
              ).out;
            futures =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".futures."0.3.31" {
                inherit profileName;
              }).out;
            gloo =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo."0.10.0" {
                inherit profileName;
              }).out;
            implicit_clone =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".implicit-clone."0.4.9" {
                inherit profileName;
              }).out;
            indexmap =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".indexmap."2.8.0" {
                inherit profileName;
              }).out;
            js_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.77" {
                inherit profileName;
              }).out;
            prokio =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".prokio."0.1.0" {
                inherit profileName;
              }).out;
            rustversion =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".rustversion."1.0.20" {
                profileName = "__noProfile";
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            slab =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".slab."0.4.9" {
                inherit profileName;
              }).out;
            thiserror =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".thiserror."1.0.69" {
                inherit profileName;
              }).out;
            ${if !(hostPlatform.parsed.cpu.name == "wasm32") then "tokio" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tokio."1.44.1" {
                inherit profileName;
              }).out;
            tracing =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" {
                inherit profileName;
              }).out;
            wasm_bindgen =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" {
                inherit profileName;
              }).out;
            ${if hostPlatform.parsed.cpu.name == "wasm32" then "wasm_bindgen_futures" else null} =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen-futures."0.4.50"
                { inherit profileName; }
              ).out;
            web_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.77" {
                inherit profileName;
              }).out;
            yew_macro =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".yew-macro."0.21.0" {
                profileName = "__noProfile";
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".yew-macro."0.21.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "yew-macro";
          version = "0.21.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "02fd8ca5166d69e59f796500a2ce432ff751edecbbb308ca59fd3fe4d0343de2";
          };
          dependencies = {
            boolinator =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".boolinator."2.4.0" {
                inherit profileName;
              }).out;
            once_cell =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".once_cell."1.21.3" {
                inherit profileName;
              }).out;
            prettyplease =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".prettyplease."0.2.31" {
                inherit profileName;
              }).out;
            proc_macro_error =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro-error."1.0.4" {
                inherit profileName;
              }).out;
            proc_macro2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.94" {
                inherit profileName;
              }).out;
            quote =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.40" {
                inherit profileName;
              }).out;
            syn =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.100" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".yew-router."0.18.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "yew-router";
          version = "0.18.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "4ca1d5052c96e6762b4d6209a8aded597758d442e6c479995faf0c7b5538e0c6";
          };
          dependencies = {
            gloo =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".gloo."0.10.0" {
                inherit profileName;
              }).out;
            js_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".js-sys."0.3.77" {
                inherit profileName;
              }).out;
            route_recognizer =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".route-recognizer."0.3.1" {
                inherit profileName;
              }).out;
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            serde_urlencoded =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde_urlencoded."0.7.1" {
                inherit profileName;
              }).out;
            tracing =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".tracing."0.1.41" {
                inherit profileName;
              }).out;
            urlencoding =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".urlencoding."2.1.3" {
                inherit profileName;
              }).out;
            wasm_bindgen =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".wasm-bindgen."0.2.100" {
                inherit profileName;
              }).out;
            web_sys =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".web-sys."0.3.77" {
                inherit profileName;
              }).out;
            yew =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".yew."0.21.0" {
                inherit profileName;
              }).out;
            yew_router_macro =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".yew-router-macro."0.18.0"
                { profileName = "__noProfile"; }
              ).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".yew-router-macro."0.18.0" =
      overridableMkRustCrate
        (profileName: rec {
          name = "yew-router-macro";
          version = "0.18.0";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "42bfd190a07ca8cfde7cd4c52b3ac463803dc07323db8c34daa697e86365978c";
          };
          dependencies = {
            proc_macro2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.94" {
                inherit profileName;
              }).out;
            quote =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.40" {
                inherit profileName;
              }).out;
            syn =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.100" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".yoke."0.7.5" =
      overridableMkRustCrate
        (profileName: rec {
          name = "yoke";
          version = "0.7.5";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "120e6aef9aa629e3d4f52dc8cc43a015c7724194c97dfaf45180d2daf2b77f40";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "default" ]
            [ "derive" ]
            [ "zerofrom" ]
          ];
          dependencies = {
            serde =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".serde."1.0.219" {
                inherit profileName;
              }).out;
            stable_deref_trait =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".stable_deref_trait."1.2.0" {
                inherit profileName;
              }).out;
            yoke_derive =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".yoke-derive."0.7.5" {
                profileName = "__noProfile";
              }).out;
            zerofrom =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zerofrom."0.1.6" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".yoke-derive."0.7.5" =
      overridableMkRustCrate
        (profileName: rec {
          name = "yoke-derive";
          version = "0.7.5";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "2380878cad4ac9aac1e2435f3eb4020e8374b5f13c296cb75b4620ff8e229154";
          };
          dependencies = {
            proc_macro2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.94" {
                inherit profileName;
              }).out;
            quote =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.40" {
                inherit profileName;
              }).out;
            syn =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.100" {
                inherit profileName;
              }).out;
            synstructure =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".synstructure."0.13.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".zerocopy."0.7.35" =
      overridableMkRustCrate
        (profileName: rec {
          name = "zerocopy";
          version = "0.7.35";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "1b9b4fd18abc82b8136838da5d50bae7bdea537c574d8dc1a34ed098d6c166f0";
          };
          features = builtins.concatLists [
            [ "simd" ]
          ];
          dependencies = {
            ${if false then "zerocopy_derive" else null} =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".zerocopy-derive."0.7.35"
                { profileName = "__noProfile"; }
              ).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".zerocopy."0.8.24" =
      overridableMkRustCrate
        (profileName: rec {
          name = "zerocopy";
          version = "0.8.24";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "2586fea28e186957ef732a5f8b3be2da217d65c5969d4b1e17f973ebbe876879";
          };
          features = builtins.concatLists [
            [ "simd" ]
          ];
          dependencies = {
            ${if false then "zerocopy_derive" else null} =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".zerocopy-derive."0.8.24"
                { profileName = "__noProfile"; }
              ).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".zerocopy-derive."0.7.35" =
      overridableMkRustCrate
        (profileName: rec {
          name = "zerocopy-derive";
          version = "0.7.35";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "fa4f8080344d4671fb4e831a13ad1e68092748387dfc4f55e356242fae12ce3e";
          };
          dependencies = {
            proc_macro2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.94" {
                inherit profileName;
              }).out;
            quote =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.40" {
                inherit profileName;
              }).out;
            syn =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.100" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".zerocopy-derive."0.8.24" =
      overridableMkRustCrate
        (profileName: rec {
          name = "zerocopy-derive";
          version = "0.8.24";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "a996a8f63c5c4448cd959ac1bab0aaa3306ccfd060472f85943ee0750f0169be";
          };
          dependencies = {
            proc_macro2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.94" {
                inherit profileName;
              }).out;
            quote =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.40" {
                inherit profileName;
              }).out;
            syn =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.100" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".zerofrom."0.1.6" =
      overridableMkRustCrate
        (profileName: rec {
          name = "zerofrom";
          version = "0.1.6";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "50cc42e0333e05660c3587f3bf9d0478688e15d870fab3346451ce7f8c9fbea5";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "derive" ]
          ];
          dependencies = {
            zerofrom_derive =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".zerofrom-derive."0.1.6" {
                profileName = "__noProfile";
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".zerofrom-derive."0.1.6" =
      overridableMkRustCrate
        (profileName: rec {
          name = "zerofrom-derive";
          version = "0.1.6";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "d71e5d6e06ab090c67b5e44993ec16b72dcbaabc526db883a360057678b48502";
          };
          dependencies = {
            proc_macro2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.94" {
                inherit profileName;
              }).out;
            quote =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.40" {
                inherit profileName;
              }).out;
            syn =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.100" {
                inherit profileName;
              }).out;
            synstructure =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".synstructure."0.13.1" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".zeroize."1.8.1" =
      overridableMkRustCrate
        (profileName: rec {
          name = "zeroize";
          version = "1.8.1";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "ced3678a2879b30306d323f4542626697a464a97c0a07c9aebf7ebca65cd4dde";
          };
          features = builtins.concatLists [
            [ "alloc" ]
            [ "default" ]
            [ "zeroize_derive" ]
          ];
          dependencies = {
            zeroize_derive =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".zeroize_derive."1.4.2" {
                profileName = "__noProfile";
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".zeroize_derive."1.4.2" =
      overridableMkRustCrate
        (profileName: rec {
          name = "zeroize_derive";
          version = "1.4.2";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "ce36e65b0d2999d2aafac989fb249189a141aee1f53c612c1f37d72631959f69";
          };
          dependencies = {
            proc_macro2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.94" {
                inherit profileName;
              }).out;
            quote =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.40" {
                inherit profileName;
              }).out;
            syn =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.100" {
                inherit profileName;
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".zerovec."0.10.4" =
      overridableMkRustCrate
        (profileName: rec {
          name = "zerovec";
          version = "0.10.4";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "aa2b893d79df23bfb12d5461018d408ea19dfafe76c2c7ef6d4eba614f8ff079";
          };
          features = builtins.concatLists [
            [ "derive" ]
            [ "yoke" ]
          ];
          dependencies = {
            yoke =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".yoke."0.7.5" {
                inherit profileName;
              }).out;
            zerofrom =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".zerofrom."0.1.6" {
                inherit profileName;
              }).out;
            zerovec_derive =
              (buildRustPackages."registry+https://github.com/rust-lang/crates.io-index".zerovec-derive."0.10.3" {
                profileName = "__noProfile";
              }).out;
          };
        });

    "registry+https://github.com/rust-lang/crates.io-index".zerovec-derive."0.10.3" =
      overridableMkRustCrate
        (profileName: rec {
          name = "zerovec-derive";
          version = "0.10.3";
          registry = "registry+https://github.com/rust-lang/crates.io-index";
          src = fetchCratesIo {
            inherit name version;
            sha256 = "6eafa6dfb17584ea3e2bd6e76e0cc15ad7af12b09abdd1ca55961bed9b1063c6";
          };
          dependencies = {
            proc_macro2 =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".proc-macro2."1.0.94" {
                inherit profileName;
              }).out;
            quote =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".quote."1.0.40" {
                inherit profileName;
              }).out;
            syn =
              (rustPackages."registry+https://github.com/rust-lang/crates.io-index".syn."2.0.100" {
                inherit profileName;
              }).out;
          };
        });

  }
